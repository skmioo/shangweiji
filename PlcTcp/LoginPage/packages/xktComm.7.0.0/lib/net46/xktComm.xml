<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xktComm</name>
    </assembly>
    <members>
        <member name="T:xktComm.AllenBradleyNet">
            <summary>
            AB PLC通信库
            </summary>
        </member>
        <member name="P:xktComm.AllenBradleyNet.SendTimeOut">
            <summary>
            发送超时事件
            </summary>
        </member>
        <member name="P:xktComm.AllenBradleyNet.ReceiveTimeOut">
            <summary>
            接收超时事件
            </summary>
        </member>
        <member name="P:xktComm.AllenBradleyNet.DataFormat">
            <summary>
            字节大小端顺序
            </summary>
        </member>
        <member name="P:xktComm.AllenBradleyNet.WaitTimes">
            <summary>
            接受返回报文等待次数，默认10次
            </summary>
        </member>
        <member name="P:xktComm.AllenBradleyNet.SleepTime">
            <summary>
            接受返回报文等待次数，每次为10ms
            </summary>
        </member>
        <member name="P:xktComm.AllenBradleyNet.SessionHandle">
            <summary>
            The current session handle, which is determined by the PLC when communicating with the PLC handshake
            </summary>
        </member>
        <member name="P:xktComm.AllenBradleyNet.Slot">
            <summary>
            Gets or sets the slot number information for the current plc, which should be set before connections
            </summary>
        </member>
        <member name="P:xktComm.AllenBradleyNet.PortSlot">
            <summary>
            port and sloat infomation
            </summary>
        </member>
        <member name="P:xktComm.AllenBradleyNet.CipCommand">
            <summary>
            获取或设置整个交互指令的控制码，默认为0x6F，通常不需要修改<br />
            Gets or sets the control code of the entire interactive instruction. The default is 0x6F, and usually does not need to be modified.
            </summary>
        </member>
        <member name="P:xktComm.AllenBradleyNet.ConnectTimeOut">
            <summary>
            连接超时时间
            </summary>
        </member>
        <member name="M:xktComm.AllenBradleyNet.Connect(System.String,System.Int32)">
            <summary>
            建立Socket连接
            </summary>
            <param name="ip">IP地址</param>
            <param name="port">端口号</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.AllenBradleyNet.DisConnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:xktComm.AllenBradleyNet.SendAndReceive(System.Byte[])">
            <summary>
            发送报文并接收返回值
            </summary>
            <param name="SendByte"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.AllenBradleyHelper">
            <summary>
            AB PLC的辅助类，用来辅助生成基本的指令信息
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_READ_DATA">
            <summary>
            CIP命令中的读取数据的服务
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_WRITE_DATA">
            <summary>
            CIP命令中的写数据的服务
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_READ_WRITE_DATA">
            <summary>
            CIP命令中的读并写的数据服务
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_READ_FRAGMENT">
            <summary>
            CIP命令中的读片段的数据服务
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_WRITE_FRAGMENT">
            <summary>
            CIP命令中的写片段的数据服务
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_READ_LIST">
            <summary>
            CIP指令中读取数据的列表
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_MULTIREAD_DATA">
            <summary>
            CIP命令中的对数据读取服务
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_Type_Bool">
            <summary>
            bool型数据，一个字节长度
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_Type_Byte">
            <summary>
            byte型数据，一个字节长度
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_Type_Word">
            <summary>
            整型，两个字节长度
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_Type_DWord">
            <summary>
            长整型，四个字节长度
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_Type_LInt">
            <summary>
            特长整型，8个字节
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_Type_Real">
            <summary>
            实数数据，四个字节长度
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_Type_Double">
            <summary>
            实数数据，八个字节的长度
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_Type_Struct">
            <summary>
            结构体数据，不定长度
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_Type_String">
            <summary>
            字符串数据内容
            </summary>
        </member>
        <member name="F:xktComm.AllenBradleyHelper.CIP_Type_BitArray">
            <summary>
            二进制数据内容
            </summary>
        </member>
        <member name="M:xktComm.AllenBradleyHelper.ParseRequestPathCommand(System.Byte[])">
            <summary>
            从生成的报文里面反解出实际的数据地址，不支持结构体嵌套，仅支持数据，一维数组，不支持多维数据
            </summary>
            <param name="pathCommand">地址路径报文</param>
            <returns>实际的地址</returns>
        </member>
        <member name="M:xktComm.AllenBradleyHelper.GetEnumeratorCommand(System.UInt16)">
            <summary>
            获取枚举PLC数据信息的指令
            </summary>
            <param name="startInstance">实例的起始地址</param>
            <returns>结果数据</returns>
        </member>
        <member name="M:xktComm.AllenBradleyHelper.GetStructHandleCommand(System.UInt16)">
            <summary>
            获取获得结构体句柄的命令
            </summary>
            <param name="symbolType">包含地址的信息</param>
            <returns>命令数据</returns>
        </member>
        <member name="M:xktComm.AllenBradleyHelper.GetStructItemNameType(System.UInt16,xktComm.AbStructHandle)">
            <summary>
            获取结构体内部数据结构的方法
            </summary>
            <param name="symbolType">地址</param>
            <param name="structHandle">句柄</param>
            <returns>指令</returns>
        </member>
        <member name="M:xktComm.AllenBradleyHelper.PackRequestHeader(System.UInt16,System.UInt32,System.Byte[])">
            <summary>
            将CommandSpecificData的命令，打包成可发送的数据指令
            </summary>
            <param name="command">实际的命令暗号</param>
            <param name="session">当前会话的id</param>
            <param name="commandSpecificData">CommandSpecificData命令</param>
            <returns>最终可发送的数据命令</returns>
        </member>
        <member name="M:xktComm.AllenBradleyHelper.PackRequsetRead(System.String,System.Int32)">
            <summary>
            打包生成一个请求读取数据的节点信息，CIP指令信息
            </summary>
            <param name="address">地址</param>
            <param name="length">指代数组的长度</param>
            <returns>CIP的指令信息</returns>
        </member>
        <member name="M:xktComm.AllenBradleyHelper.PackRequestReadSegment(System.String,System.Int32,System.Int32)">
            <summary>
            打包生成一个请求读取数据片段的节点信息，CIP指令信息
            </summary>
            <param name="address">节点的名称 -> Tag Name</param>
            <param name="startIndex">起始的索引位置，以字节为单位 -> The initial index position, in bytes</param>
            <param name="length">读取的数据长度，一次通讯总计490个字节 -> Length of read data, a total of 490 bytes of communication</param>
            <returns>CIP的指令信息</returns>
        </member>
        <member name="M:xktComm.AllenBradleyHelper.PackRequestWrite(System.String,System.UInt16,System.Byte[],System.Int32)">
            <summary>
            根据指定的数据和类型，生成对应的数据
            </summary>
            <param name="address">地址信息</param>
            <param name="typeCode">数据类型</param>
            <param name="value">字节值</param>
            <param name="length">如果节点为数组，就是数组长度</param>
            <returns>CIP的指令信息</returns>
        </member>
        <member name="M:xktComm.AllenBradleyHelper.PackCommandService(System.Byte[],System.Byte[][])">
            <summary>
            将所有的cip指定进行打包操作。
            </summary>
            <param name="portSlot">PLC所在的面板槽号</param>
            <param name="cips">所有的cip打包指令信息</param>
            <returns>包含服务的信息</returns>
        </member>
        <member name="M:xktComm.AllenBradleyHelper.PackCleanCommandService(System.Byte[],System.Byte[][])">
            <summary>
            将所有的cip指定进行打包操作。
            </summary>
            <param name="portSlot">PLC所在的面板槽号</param>
            <param name="cips">所有的cip打包指令信息</param>
            <returns>包含服务的信息</returns>
        </member>
        <member name="M:xktComm.AllenBradleyHelper.PackCommandResponse(System.Byte[],System.Boolean)">
            <summary>
            根据数据创建反馈的数据信息
            </summary>
            <param name="data">反馈的数据信息</param>
            <param name="isRead">是否是读取</param>
            <returns>数据</returns>
        </member>
        <member name="M:xktComm.AllenBradleyHelper.PackCommandSpecificData(System.Byte[][])">
            <summary>
            生成读取直接节点数据信息的内容
            </summary>
            <param name="service">cip指令内容</param>
            <returns>最终的指令值</returns>
        </member>
        <member name="M:xktComm.AllenBradleyHelper.PackCommandSingleService(System.Byte[])">
            <summary>
            将所有的cip指定进行打包操作。
            </summary>
            <param name="command">指令信息</param>
            <returns>包含服务的信息</returns>
        </member>
        <member name="M:xktComm.AllenBradleyHelper.ExtractActualData(System.Byte[],System.Boolean)">
            <summary>
            从PLC反馈的数据解析
            </summary>
            <param name="response">PLC的反馈数据</param>
            <param name="isRead">是否是返回的操作</param>
            <returns>带有结果标识的最终数据</returns>
        </member>
        <member name="T:xktComm.AbStructHandle">
            <summary>
            结构体的句柄信息
            </summary>
        </member>
        <member name="P:xktComm.AbStructHandle.Count">
            <summary>
            返回项数
            </summary>
        </member>
        <member name="P:xktComm.AbStructHandle.TemplateObjectDefinitionSize">
            <summary>
            结构体定义大小
            </summary>
        </member>
        <member name="P:xktComm.AbStructHandle.TemplateStructureSize">
            <summary>
            使用读取标记服务读取结构时在线路上传输的字节数
            </summary>
        </member>
        <member name="P:xktComm.AbStructHandle.MemberCount">
            <summary>
            成员数量
            </summary>
        </member>
        <member name="P:xktComm.AbStructHandle.StructureHandle">
            <summary>
            结构体的handle
            </summary>
        </member>
        <member name="T:xktComm.Beckhoff">
            <summary>
            倍福ADS通信库
            </summary>
        </member>
        <member name="F:xktComm.Beckhoff.tcclient">
            <summary>
            TcAdsClient
            </summary>
        </member>
        <member name="M:xktComm.Beckhoff.Connect(System.String,System.Int32)">
            <summary>
            建立与PLC的连接
            </summary>
            <param name="NetID">Net ID</param>
            <param name="Port">端口号</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.Beckhoff.DisConnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:xktComm.Beckhoff.ReadStruct(System.String,System.Int32)">
            <summary>
            读取结构体
            </summary>
            <param name="Address"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.Beckhoff.ReadArray``1(System.String,System.Int32)">
            <summary>
            读取数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Address"></param>
            <param name=""></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.Beckhoff.Read(System.String,xktComm.Common.ComplexDataType)">
            <summary>
            读取变量
            </summary>
            <param name="address">变量地址</param>
            <param name="vartype">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.Beckhoff.Write(System.String,System.Object,xktComm.Common.ComplexDataType)">
            <summary>
            写入变量
            </summary>
            <param name="address"></param>
            <param name="value"></param>
            <param name="vartype"></param>
        </member>
        <member name="T:xktComm.AIBUS">
            <summary>
            AIBUS
            </summary>
        </member>
        <member name="P:xktComm.AIBUS.ReceiveTimeOut">
            <summary>
            读取返回报文超时时间
            </summary>
        </member>
        <member name="P:xktComm.AIBUS.SleepTime">
            <summary>
            读取缓冲区的延时时间
            </summary>
        </member>
        <member name="F:xktComm.AIBUS.InteractiveLock">
            <summary>
            互斥的锁对象
            </summary>
        </member>
        <member name="M:xktComm.AIBUS.Connect(System.Int32,System.String,System.Int32,System.IO.Ports.Parity,System.IO.Ports.StopBits)">
            <summary>
            打开串口
            </summary>
            <param name="iBaudRate">波特率</param>
            <param name="iPortName">串口号</param>
            <param name="iDataBits">数据位</param>
            <param name="iParity">校验位</param>
            <param name="iStopBits">停止位</param>
        </member>
        <member name="M:xktComm.AIBUS.DisConnect">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:xktComm.AIBUS.SendAndReceive(System.Byte[],System.Byte[]@)">
            <summary>
            通用发送报文并接受
            </summary>
            <param name="sendByte">发送字节数组</param>
            <param name="response">返回字节数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:xktComm.BitLib">
            <summary>
            位转换库
            </summary>
        </member>
        <member name="M:xktComm.BitLib.GetBitFromByte(System.Byte,System.Int32)">
            <summary>
            返回指定字节的指定位
            </summary>
            <param name="b">字节</param>
            <param name="offset">指定位（0-7）</param>
            <returns>布尔结果</returns>
        </member>
        <member name="M:xktComm.BitLib.GetBitFromByteArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            返回字节数组中的某个字节某个位
            </summary>
            <param name="b">字节数组</param>
            <param name="index">字节索引</param>
            <param name="offset">指定位（0-7）</param>
            <returns>布尔结果</returns>
        </member>
        <member name="M:xktComm.BitLib.GetBitFrom2Byte(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            返回两个字节的指定位
            </summary>
            <param name="b">两个字节</param>
            <param name="offset">指定位（0-15）</param>
            <param name="reverse">字节顺序</param>
            <returns>布尔结果</returns>
        </member>
        <member name="M:xktComm.BitLib.GetBitFrom2ByteArray(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            返回字节数组中某2个字节的指定位
            </summary>
            <param name="b">字节数组</param>
            <param name="index">字节索引</param>
            <param name="offset">指定位（0-15）</param>
            <param name="reverse">字节顺序</param>
            <returns>布尔结果</returns>
        </member>
        <member name="M:xktComm.BitLib.GetBitFromShort(System.Int16,System.Int32,System.Boolean)">
            <summary>
            根据一个Short返回指定位
            </summary>
            <param name="val">short数值</param>
            <param name="offset">指定位（0-15）</param>
            <param name="reverse">字节顺序</param>
            <returns>布尔结果</returns>
        </member>
        <member name="M:xktComm.BitLib.GetBitFromUShort(System.UInt16,System.Int32,System.Boolean)">
            <summary>
            根据一个UShort返回指定位
            </summary>
            <param name="val">ushort数值</param>
            <param name="offset">指定位（0-15）</param>
            <param name="reverse">字节顺序</param>
            <returns>布尔结果</returns>
        </member>
        <member name="M:xktComm.BitLib.GetBitArrayFromByte(System.Byte,System.Boolean)">
            <summary>
            将一个字节转换成布尔数组
            </summary>
            <param name="b">字节</param>
            <param name="reverse">位顺序</param>
            <returns>布尔数组</returns>
        </member>
        <member name="M:xktComm.BitLib.GetBitArrayFromByteArray(System.Byte[],System.Boolean)">
            <summary>
            将一个字节数组转换成布尔数组
            </summary>
            <param name="b">字节数组</param>
            <param name="reverse">位顺序</param>
            <returns>布尔数组</returns>
        </member>
        <member name="M:xktComm.BitLib.GetBitArray(System.Boolean[],System.Int32,System.Int32)">
            <summary>
            根据位开始和长度截取位数组
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.BitLib.GetBitArrayFromBitArrayString(System.String,System.Char)">
            <summary>
            将字符串按照指定的分隔符转换成布尔数组
            </summary>
            <param name="val"></param>
            <param name="spilt"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.ByteArrayLib">
            <summary>
            字节数组转换库
            </summary>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            自定义截取字节数组
            </summary>
            <param name="source">字节数组</param>
            <param name="start">开始字节</param>
            <param name="length">截取长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.Get2ByteArray(System.Byte[],System.Int32,xktComm.Common.DataFormat)">
            <summary>
            从字节数组中截取2个字节
            </summary>
            <param name="source">字节数组</param>
            <param name="start">开始索引</param>
            <param name="type">字节顺序，默认为ABCD</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.Get4ByteArray(System.Byte[],System.Int32,xktComm.Common.DataFormat)">
            <summary>
            从字节数组中截取4个字节
            </summary>
            <param name="source">字节数组</param>
            <param name="start">开始索引</param>
            <param name="type">字节顺序，默认为ABCD</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.Get8ByteArray(System.Byte[],System.Int32,xktComm.Common.DataFormat)">
            <summary>
            从字节数组中截取8个字节
            </summary>
            <param name="source">字节数组</param>
            <param name="start">开始索引</param>
            <param name="type">字节顺序，默认为ABCD</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.ByteArrayEquals(System.Byte[],System.Byte[])">
            <summary>
            比较两个字节数组是否完全相同
            </summary>
            <param name="b1">字节数组1</param>
            <param name="b2">字节数组2</param>
            <returns>是否相同</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromByte(System.Byte)">
            <summary>
            将单个字节转换成字节数组
            </summary>
            <param name="value">单个字节</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromShort(System.Int16,xktComm.Common.DataFormat)">
            <summary>
            将Short类型数值转换成字节数组
            </summary>
            <param name="SetValue">Short类型数值</param>
            <param name="dataFormat">字节顺序</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromUShort(System.UInt16,xktComm.Common.DataFormat)">
            <summary>
            将UShort类型数值转换成字节数组
            </summary>
            <param name="SetValue">UShort类型数值</param>
            <param name="dataFormat">字节顺序</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromShortArray(System.Int16[],xktComm.Common.DataFormat)">
            <summary>
            将Short数组转换成字节数组
            </summary>
            <param name="SetValue">Short数组</param>
            <param name="dataFormat">字节顺序</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromUShortArray(System.UInt16[],xktComm.Common.DataFormat)">
            <summary>
            将UShort数组转换成字节数组
            </summary>
            <param name="SetValue">UShort数组</param>
            <param name="dataFormat">字节顺序</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromInt(System.Int32,xktComm.Common.DataFormat)">
            <summary>
            将Int类型数值转换成字节数组
            </summary>
            <param name="SetValue">Int类型数值</param>
            <param name="dataFormat">字节顺序</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromUInt(System.UInt32,xktComm.Common.DataFormat)">
            <summary>
            将UInt类型数值转换成字节数组
            </summary>
            <param name="SetValue">UInt类型数值</param>
            <param name="dataFormat">字节顺序</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromFloat(System.Single,xktComm.Common.DataFormat)">
            <summary>
            将Float数值转换成字节数组
            </summary>
            <param name="SetValue">Float类型数值</param>
            <param name="dataFormat">字节顺序</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromDouble(System.Double,xktComm.Common.DataFormat)">
            <summary>
            将Double类型数值转换成字节数组
            </summary>
            <param name="SetValue">Double类型数值</param>
            <param name="dataFormat">字节顺序</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromIntArray(System.Int32[],xktComm.Common.DataFormat)">
            <summary>
            将Int类型数组转换成字节数组
            </summary>
            <param name="SetValue">Int类型数组</param>
            <param name="dataFormat">字节顺序</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromUIntArray(System.UInt32[],xktComm.Common.DataFormat)">
            <summary>
            将UInt类型数组转换成字节数组
            </summary>
            <param name="SetValue">UInt类型数组</param>
            <param name="dataFormat">字节顺序</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromFloatArray(System.Single[],xktComm.Common.DataFormat)">
            <summary>
            将Float类型数组转成字节数组
            </summary>
            <param name="SetValue">Float类型数组</param>
            <param name="dataFormat">字节顺序</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromDoubleArray(System.Double[],xktComm.Common.DataFormat)">
            <summary>
            将Double类型数组转成字节数组
            </summary>
            <param name="SetValue">Double类型数组</param>
            <param name="dataFormat">字节顺序</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromLong(System.Int64,xktComm.Common.DataFormat)">
            <summary>
            将Long类型数值转换成字节数组
            </summary>
            <param name="SetValue">Long类型数值</param>
            <param name="dataFormat">字节顺序</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromULong(System.UInt64,xktComm.Common.DataFormat)">
            <summary>
            将ULong类型数值转换成字节数组
            </summary>
            <param name="SetValue">ULong类型数值</param>
            <param name="dataFormat">字节顺序</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromLongArray(System.Int64[],xktComm.Common.DataFormat)">
            <summary>
            将Long类型数组转换成字节数组
            </summary>
            <param name="SetValue">Long类型数组</param>
            <param name="dataFormat">字节顺序</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromULongArray(System.UInt64[],xktComm.Common.DataFormat)">
            <summary>
            将ULong类型数组转换成字节数组
            </summary>
            <param name="SetValue">ULong类型数组</param>
            <param name="dataFormat">字节顺序</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromString(System.String,System.Text.Encoding)">
            <summary>
            将指定编码格式的字符串转换成字节数组
            </summary>
            <param name="SetValue">字符串</param>
            <param name="encoding">编码格式</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromHexString(System.String,System.Char)">
            <summary>
            将16进制字符串按照空格分隔成字节数组
            </summary>
            <param name="val">16进制字符串</param>
            <param name="spilt">分隔符</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromHexStringWithoutSpilt(System.String)">
            <summary>
            将16进制字符串不用分隔符转换成字节数组（每2个字符为1个字节）
            </summary>
            <param name="val">16进制字符串</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromBoolArray(System.Boolean[])">
            <summary>
            将布尔数组转换成字节数组
            </summary>
            <param name="val">布尔数组</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromSiemensString(System.String)">
            <summary>
            将西门子字符串转换成字节数组
            </summary>
            <param name="SetValue">西门子字符串</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetByteArrayFromOmronCIPString(System.String)">
            <summary>
            将西门子字符串转换成字节数组
            </summary>
            <param name="SetValue">西门子字符串</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetAsciiBytesFromByteArray(System.Byte[])">
            <summary>
            将字节数组转换成ASCII字节数组
            </summary>
            <param name="inBytes">字节数组</param>
            <returns>ASCII字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.CombineTwoByteArray(System.Byte[],System.Byte[])">
            <summary>
            将2个字节数组进行合并
            </summary>
            <param name="bytes1">字节数组1</param>
            <param name="bytes2">字节数组2</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.CombineThreeByteArray(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            将3个字节数组进行合并
            </summary>
            <param name="bytes1">字节数组1</param>
            <param name="bytes2">字节数组2</param>
            <param name="bytes3">字节数组3</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.GetBytesArrayFromASCIIByteArray(System.Byte[])">
            <summary>
            将ASCII字节数组转换成字节数组
            </summary>
            <param name="inBytes">ASCII字节数组</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ByteArrayLib.SetByteArray(System.Byte[],System.Object,System.Int32,System.Int32)">
            <summary>
            字节数组转换
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <param name="start"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.ByteLib">
            <summary>
            单个字节转换库
            </summary>
        </member>
        <member name="M:xktComm.ByteLib.GetByteFromByteArray(System.Byte[],System.Int32)">
            <summary>
            从字节数组中截取某个字节
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ByteLib.SetbitValue(System.Byte,System.Int32,System.Boolean)">
            <summary>
            将字节中的某个位赋值
            </summary>
            <param name="value">原始字节</param>
            <param name="bit">位</param>
            <param name="val">写入数值</param>
            <returns>返回字节</returns>
        </member>
        <member name="T:xktComm.DoubleLib">
            <summary>
            Double类型转换库
            </summary>
        </member>
        <member name="M:xktComm.DoubleLib.GetDoubleFromByteArray(System.Byte[],System.Int32,xktComm.Common.DataFormat)">
            <summary>
            将字节数组中某8个字节转换成Double类型
            </summary>
            <param name="source">字节数组</param>
            <param name="start">开始位置</param>
            <param name="type">字节顺序</param>
            <returns>Double类型数值</returns>
        </member>
        <member name="M:xktComm.DoubleLib.GetDoubleArrayFromByteArray(System.Byte[],xktComm.Common.DataFormat)">
            <summary>
            将字节数组转换成Double数组
            </summary>
            <param name="source">字节数组</param>
            <param name="type">字节顺序</param>
            <returns>Double数组</returns>
        </member>
        <member name="M:xktComm.DoubleLib.GetDoubleArrayFromString(System.String,System.Char)">
            <summary>
            将Double字符串转换成双精度浮点型数组
            </summary>
            <param name="val">Double字符串</param>
            <param name="spilt">Double字符串</param>
            <returns>双精度浮点型数组</returns>
        </member>
        <member name="T:xktComm.FloatLib">
            <summary>
            Float类型转换库
            </summary>
        </member>
        <member name="M:xktComm.FloatLib.GetFloatFromByteArray(System.Byte[],System.Int32,xktComm.Common.DataFormat)">
            <summary>
            将字节数组中某4个字节转换成Float类型
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.FloatLib.GetFloatArrayFromByteArray(System.Byte[],xktComm.Common.DataFormat)">
            <summary>
            将字节数组转换成Float数组
            </summary>
            <param name="source"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.FloatLib.GetFloatArrayFromString(System.String,System.Char)">
            <summary>
            将Float字符串转换成单精度浮点型数组
            </summary>
            <param name="val">Float字符串</param>
            <param name="spilt">分隔符</param>
            <returns>单精度浮点型数组</returns>
        </member>
        <member name="T:xktComm.IntLib">
            <summary>
            Int类型转换库
            </summary>
        </member>
        <member name="M:xktComm.IntLib.GetIntFromByteArray(System.Byte[],System.Int32,xktComm.Common.DataFormat)">
            <summary>
            字节数组中截取转成32位整型
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.IntLib.GetIntArrayFromByteArray(System.Byte[],xktComm.Common.DataFormat)">
            <summary>
            将字节数组中截取转成32位整型数组
            </summary>
            <param name="source"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.IntLib.GetIntArrayFromString(System.String,System.Char)">
            <summary>
            将字符串转转成32位整型数组
            </summary>
            <param name="val"></param>
            <param name="spilt"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.LongLib">
            <summary>
            Long转换类
            </summary>
        </member>
        <member name="M:xktComm.LongLib.GetLongFromByteArray(System.Byte[],System.Int32,xktComm.Common.DataFormat)">
            <summary>
            字节数组中截取转成64位整型
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.LongLib.GetLongArrayFromByteArray(System.Byte[],xktComm.Common.DataFormat)">
            <summary>
            将字节数组中截取转成64位整型数组
            </summary>
            <param name="source"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.LongLib.GetLongArrayFromString(System.String,System.Char)">
            <summary>
            将字符串转转成64位整型数组
            </summary>
            <param name="val"></param>
            <param name="spilt"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.MigrationLib">
            <summary>
            数值转换类
            </summary>
        </member>
        <member name="T:xktComm.DeltaModbusEthernetType">
            <summary>
            台达网口协议类型
            </summary>
        </member>
        <member name="F:xktComm.DeltaModbusEthernetType.DeltaTCP">
            <summary>
            ModbusTCP
            </summary>
        </member>
        <member name="F:xktComm.DeltaModbusEthernetType.DeltaUDP">
            <summary>
            DeltaUDP
            </summary>
        </member>
        <member name="T:xktComm.DeltaModbusEthernet">
            <summary>
            台达网口通信库
            </summary>
        </member>
        <member name="P:xktComm.DeltaModbusEthernet.DataFormat">
            <summary>
            字节顺序
            </summary>
        </member>
        <member name="F:xktComm.DeltaModbusEthernet.waitTimes">
            <summary>
            最大等待次数
            </summary>
        </member>
        <member name="P:xktComm.DeltaModbusEthernet.WaitTimes">
            <summary>
            延时时间
            </summary>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.#ctor(xktComm.DeltaModbusEthernetType,System.Int32,xktComm.Common.DataFormat)">
            <summary>
            构造方法，传递参数
            </summary>       
            <param name="WaitTimes"></param>
            <param name="Protocol"></param>
            <param name="dataformat"></param>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Connect(System.String,System.Int32)">
            <summary>
            建立连接
            </summary>
            <param name="IpAddress">IP地址</param>
            <param name="Port">端口号</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.DisConnect">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Readbool(System.String,System.Boolean@)">
            <summary>
            读取布尔变量
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.ReadBytes(System.String,System.UInt16)">
            <summary>
            读取字节数组
            </summary>
            <param name="address">变量地址</param>
            <param name="length">长度</param>
            <returns>带字节数组的结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Readshort(System.String,System.Int16@)">
            <summary>
            读取Short类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Readushort(System.String,System.UInt16@)">
            <summary>
            读取UShort类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Readint(System.String,System.Int32@)">
            <summary>
            读取Int类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Readuint(System.String,System.UInt32@)">
            <summary>
            读取UInt类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Readfloat(System.String,System.Single@)">
            <summary>
            读取Float类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Readlong(System.String,System.Int64@)">
            <summary>
            读取Int64类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Readulong(System.String,System.UInt64@)">
            <summary>
            读取UInt64类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Readdouble(System.String,System.Double@)">
            <summary>
            读取Double类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Readstring(System.String,System.UInt16,System.String@)">
            <summary>
            读取String类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="length">长度</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入的方法
            </summary>
            <param name="address">Modbus地址</param>
            <param name="value">设定值</param>
            <param name="vartype">数据类型</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.WriteBoolReg(System.String,System.Boolean)">
            <summary>
            给布尔寄存器赋值
            </summary>
            <param name="address">布尔寄存器地址</param>
            <param name="value">设定值</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <returns>结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.Boolean)">
            <summary>
            布尔线圈写入数值
            </summary>
            <param name="address">变量地址</param>
            <param name="value">布尔数值</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.Boolean[])">
            <summary>
            布尔数组线圈写入数值
            </summary>
            <param name="address">变量地址</param>
            <param name="values">布尔数组</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.Int16[])">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.Int16)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.UInt16[])">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.UInt16)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.Int32[])">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.UInt32[])">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.UInt32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.Single[])">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.Single)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.Int64[])">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.Int64)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.UInt64[])">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.UInt64)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.Double[])">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.Double)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.Write(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusEthernet.WriteUnicodeString(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="T:xktComm.DeltaModbusUdp">
            <summary>
            DeltaModbusUdp通信库
            </summary>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.#ctor(System.String,System.Int32,xktComm.Common.DataFormat)">
            <summary>
            DeltaModbusUdp通信库
            </summary>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Readbool(System.String,System.Boolean@)">
            <summary>
            读取布尔变量
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.ReadBytes(System.String,System.UInt16)">
            <summary>
            读取字节数组
            </summary>
            <param name="address">变量地址</param>
            <param name="length">长度</param>
            <returns>带字节数组的结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Readshort(System.String,System.Int16@)">
            <summary>
            读取Short类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Readushort(System.String,System.UInt16@)">
            <summary>
            读取UShort类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Readint(System.String,System.Int32@)">
            <summary>
            读取Int类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Readuint(System.String,System.UInt32@)">
            <summary>
            读取UInt类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Readfloat(System.String,System.Single@)">
            <summary>
            读取Float类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Readlong(System.String,System.Int64@)">
            <summary>
            读取Int64类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Readulong(System.String,System.UInt64@)">
            <summary>
            读取UInt64类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Readdouble(System.String,System.Double@)">
            <summary>
            读取Double类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Readstring(System.String,System.UInt16,System.String@)">
            <summary>
            读取String类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="length">长度</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入的方法
            </summary>
            <param name="address">Modbus地址</param>
            <param name="value">设定值</param>
            <param name="vartype">数据类型</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.WriteBoolReg(System.String,System.Boolean)">
            <summary>
            给布尔寄存器赋值
            </summary>
            <param name="address">布尔寄存器地址</param>
            <param name="value">设定值</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <returns>结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.Boolean)">
            <summary>
            布尔线圈写入数值
            </summary>
            <param name="address">变量地址</param>
            <param name="value">布尔数值</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.Boolean[])">
            <summary>
            布尔数组线圈写入数值
            </summary>
            <param name="address">变量地址</param>
            <param name="values">布尔数组</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.Int16[])">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.Int16)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.UInt16[])">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.UInt16)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.Int32[])">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.UInt32[])">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.UInt32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.Single[])">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.Single)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.Int64[])">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.Int64)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.UInt64[])">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.UInt64)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.Double[])">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.Double)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.Write(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.WriteUnicodeString(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusUdp.AnlysisAddress(System.String)">
            <summary>
            解析台达PLC的地址，返回的第一个数据为解析之后的读取地址，第二个数据位0 输出线圈  1输入线圈  3输入寄存器  4输出寄存器
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.DeltaModbusTcp">
            <summary>
            DeltaModbusTcp通信库
            </summary>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Readbool(System.String,System.Boolean@)">
            <summary>
            读取布尔变量
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.ReadBytes(System.String,System.UInt16)">
            <summary>
            读取字节数组
            </summary>
            <param name="address">变量地址</param>
            <param name="length">长度</param>
            <returns>带字节数组的结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Readshort(System.String,System.Int16@)">
            <summary>
            读取Short类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Readushort(System.String,System.UInt16@)">
            <summary>
            读取UShort类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Readint(System.String,System.Int32@)">
            <summary>
            读取Int类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Readuint(System.String,System.UInt32@)">
            <summary>
            读取UInt类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Readfloat(System.String,System.Single@)">
            <summary>
            读取Float类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Readlong(System.String,System.Int64@)">
            <summary>
            读取Int64类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Readulong(System.String,System.UInt64@)">
            <summary>
            读取UInt64类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Readdouble(System.String,System.Double@)">
            <summary>
            读取Double类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Readstring(System.String,System.UInt16,System.String@)">
            <summary>
            读取String类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="length">长度</param>
            <param name="value">变量数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入的方法
            </summary>
            <param name="address">Modbus地址</param>
            <param name="value">设定值</param>
            <param name="vartype">数据类型</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.WriteBoolReg(System.String,System.Boolean)">
            <summary>
            给布尔寄存器赋值
            </summary>
            <param name="address">布尔寄存器地址</param>
            <param name="value">设定值</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <returns>结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.Boolean)">
            <summary>
            布尔线圈写入数值
            </summary>
            <param name="address">变量地址</param>
            <param name="value">布尔数值</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.Boolean[])">
            <summary>
            布尔数组线圈写入数值
            </summary>
            <param name="address">变量地址</param>
            <param name="values">布尔数组</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.Int16[])">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.Int16)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.UInt16[])">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.UInt16)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.Int32[])">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.UInt32[])">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.UInt32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.Single[])">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.Single)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.Int64[])">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.Int64)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.UInt64[])">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.UInt64)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.Double[])">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.Double)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.Write(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.WriteUnicodeString(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusTcp.AnlysisAddress(System.String)">
            <summary>
            解析台达PLC的地址，返回的第一个数据为解析之后的读取地址，第二个数据位0 输出线圈  1输入线圈  3输入寄存器  4输出寄存器
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.DeltaModbusAscii">
            <summary>
            台达ModbusASCII通信库
            </summary>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Readbool(System.String,System.Boolean@,System.Int32)">
            <summary>
            读取布尔变量
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.ReadBytes(System.String,System.UInt16,System.Int32)">
            <summary>
            读取字节数组
            </summary>
            <param name="address">变量地址</param>
            <param name="length">长度</param>
            <param name="SlaveID">从站地址</param>
            <returns>带字节数组的结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Readshort(System.String,System.Int16@,System.Int32)">
            <summary>
            读取Short类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Readushort(System.String,System.UInt16@,System.Int32)">
            <summary>
            读取UShort类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Readint(System.String,System.Int32@,System.Int32)">
            <summary>
            读取Int类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Readuint(System.String,System.UInt32@,System.Int32)">
            <summary>
            读取UInt类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Readfloat(System.String,System.Single@,System.Int32)">
            <summary>
            读取Float类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Readlong(System.String,System.Int64@,System.Int32)">
            <summary>
            读取Int64类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Readulong(System.String,System.UInt64@,System.Int32)">
            <summary>
            读取UInt64类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Readdouble(System.String,System.Double@,System.Int32)">
            <summary>
            读取Double类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Readstring(System.String,System.UInt16,System.String@,System.Int32)">
            <summary>
            读取String类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="length">长度</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.String,xktComm.Common.DataType,System.Int32)">
            <summary>
            通用写入的方法
            </summary>
            <param name="address">Modbus地址</param>
            <param name="value">设定值</param>
            <param name="vartype">数据类型</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.WriteBoolReg(System.String,System.Boolean,System.Int32)">
            <summary>
            给布尔寄存器赋值
            </summary>
            <param name="address">布尔寄存器地址</param>
            <param name="value">设定值</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.Byte[],System.Int32)">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.Boolean,System.Int32)">
            <summary>
            布尔线圈写入数值
            </summary>
            <param name="address">变量地址</param>
            <param name="value">布尔数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.Boolean[],System.Int32)">
            <summary>
            布尔数组线圈写入数值
            </summary>
            <param name="address">变量地址</param>
            <param name="values">布尔数组</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.Int16[],System.Int32)">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.Int16,System.Int32)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.UInt16[],System.Int32)">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.UInt16,System.Int32)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.Int32[],System.Int32)">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.Int32,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.UInt32[],System.Int32)">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.UInt32,System.Int32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.Single[],System.Int32)">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.Single,System.Int32)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.Int64[],System.Int32)">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.Int64,System.Int32)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.UInt64[],System.Int32)">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.UInt64,System.Int32)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.Double[],System.Int32)">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.Double,System.Int32)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.Write(System.String,System.String,System.Int32)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.WriteUnicodeString(System.String,System.String,System.Int32)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusAscii.AnlysisAddress(System.String)">
            <summary>
            解析台达PLC的地址，返回的第一个数据为解析之后的读取地址，第二个数据位0 输出线圈  1输入线圈  3输入寄存器  4输出寄存器
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.DeltaModbusRtu">
            <summary>
            台达ModbusRTU通信库
            </summary>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Readbool(System.String,System.Boolean@,System.Int32)">
            <summary>
            读取布尔变量
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.ReadBytes(System.String,System.UInt16,System.Int32)">
            <summary>
            读取字节数组
            </summary>
            <param name="address">变量地址</param>
            <param name="length">长度</param>
            <param name="SlaveID">从站地址</param>
            <returns>带字节数组的结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Readshort(System.String,System.Int16@,System.Int32)">
            <summary>
            读取Short类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Readushort(System.String,System.UInt16@,System.Int32)">
            <summary>
            读取UShort类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Readint(System.String,System.Int32@,System.Int32)">
            <summary>
            读取Int类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Readuint(System.String,System.UInt32@,System.Int32)">
            <summary>
            读取UInt类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Readfloat(System.String,System.Single@,System.Int32)">
            <summary>
            读取Float类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Readlong(System.String,System.Int64@,System.Int32)">
            <summary>
            读取Int64类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Readulong(System.String,System.UInt64@,System.Int32)">
            <summary>
            读取UInt64类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Readdouble(System.String,System.Double@,System.Int32)">
            <summary>
            读取Double类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Readstring(System.String,System.UInt16,System.String@,System.Int32)">
            <summary>
            读取String类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="length">长度</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.String,xktComm.Common.DataType,System.Int32)">
            <summary>
            通用写入的方法
            </summary>
            <param name="address">Modbus地址</param>
            <param name="value">设定值</param>
            <param name="vartype">数据类型</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.WriteBoolReg(System.String,System.Boolean,System.Int32)">
            <summary>
            给布尔寄存器赋值
            </summary>
            <param name="address">布尔寄存器地址</param>
            <param name="value">设定值</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.Byte[],System.Int32)">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.Boolean,System.Int32)">
            <summary>
            布尔线圈写入数值
            </summary>
            <param name="address">变量地址</param>
            <param name="value">布尔数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.Boolean[],System.Int32)">
            <summary>
            布尔数组线圈写入数值
            </summary>
            <param name="address">变量地址</param>
            <param name="values">布尔数组</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.Int16[],System.Int32)">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.Int16,System.Int32)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.UInt16[],System.Int32)">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.UInt16,System.Int32)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.Int32[],System.Int32)">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.Int32,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.UInt32[],System.Int32)">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.UInt32,System.Int32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.Single[],System.Int32)">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.Single,System.Int32)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.Int64[],System.Int32)">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.Int64,System.Int32)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.UInt64[],System.Int32)">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.UInt64,System.Int32)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.Double[],System.Int32)">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.Double,System.Int32)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.Write(System.String,System.String,System.Int32)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.WriteUnicodeString(System.String,System.String,System.Int32)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusRtu.AnlysisAddress(System.String)">
            <summary>
            解析台达PLC的地址，返回的第一个数据为解析之后的读取地址，第二个数据位0 输出线圈  1输入线圈  3输入寄存器  4输出寄存器
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.DeltaModbusDataType">
            <summary>
            台达PLC数据类型
            </summary>
        </member>
        <member name="M:xktComm.DeltaModbusDataType.#ctor(System.Int32)">
            <summary>
            台达PLC数据类型
            </summary>
            <param name="fromBase"></param>
        </member>
        <member name="P:xktComm.DeltaModbusDataType.FromBase">
            <summary>
            指示地址是10进制，还是16进制的
            </summary>
        </member>
        <member name="F:xktComm.DeltaModbusDataType.X">
            <summary>
            X输入寄存器
            </summary>
        </member>
        <member name="F:xktComm.DeltaModbusDataType.Y">
            <summary>
            Y输出寄存器
            </summary>
        </member>
        <member name="F:xktComm.DeltaModbusDataType.M">
            <summary>
            M中间寄存器
            </summary>
        </member>
        <member name="F:xktComm.DeltaModbusDataType.S">
            <summary>
            S状态寄存器
            </summary>
        </member>
        <member name="F:xktComm.DeltaModbusDataType.T">
            <summary>
            T状态寄存器
            </summary>
        </member>
        <member name="F:xktComm.DeltaModbusDataType.C">
            <summary>
            C状态寄存器
            </summary>
        </member>
        <member name="F:xktComm.DeltaModbusDataType.D">
            <summary>
            D数据寄存器
            </summary>
        </member>
        <member name="F:xktComm.DeltaModbusDataType.TR">
            <summary>
            TD数据寄存器
            </summary>
        </member>
        <member name="F:xktComm.DeltaModbusDataType.CR">
            <summary>
            CD数据寄存器
            </summary>
        </member>
        <member name="T:xktComm.DeltaModbusSerialType">
            <summary>
            台达串口协议类型
            </summary>
        </member>
        <member name="F:xktComm.DeltaModbusSerialType.DeltaRTU">
            <summary>
            ModbusRTU
            </summary>
        </member>
        <member name="F:xktComm.DeltaModbusSerialType.DeltaASCII">
            <summary>
            ModbusASCII
            </summary>
        </member>
        <member name="T:xktComm.DeltaModbusSerial">
            <summary>
            台达串口通信库
            </summary>
        </member>
        <member name="P:xktComm.DeltaModbusSerial.DataFormat">
            <summary>
            字节顺序
            </summary>
        </member>
        <member name="P:xktComm.DeltaModbusSerial.SleepTime">
            <summary>
            延时时间
            </summary>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.#ctor(xktComm.DeltaModbusSerialType,System.Int32,xktComm.Common.DataFormat)">
            <summary>
            构造方法，传递参数
            </summary>       
            <param name="SleepTime"></param>
            <param name="Protocol"></param>
            <param name="dataformat"></param>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Connect(System.Int32,System.String,System.Int32,System.IO.Ports.Parity,System.IO.Ports.StopBits)">
            <summary>
            打开串口
            </summary>
            <param name="iBaudRate">波特率</param>
            <param name="iPortName">串口号</param>
            <param name="iDataBits">数据位</param>
            <param name="iParity">校验位</param>
            <param name="iStopBits">停止位</param>    
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.DisConnect">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Readbool(System.String,System.Boolean@,System.Int32)">
            <summary>
            读取布尔变量
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.ReadBytes(System.String,System.UInt16,System.Int32)">
            <summary>
            读取字节数组
            </summary>
            <param name="address">变量地址</param>
            <param name="length">长度</param>
            <param name="SlaveID">从站地址</param>
            <returns>带字节数组的结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Readshort(System.String,System.Int16@,System.Int32)">
            <summary>
            读取Short类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Readushort(System.String,System.UInt16@,System.Int32)">
            <summary>
            读取UShort类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Readint(System.String,System.Int32@,System.Int32)">
            <summary>
            读取Int类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Readuint(System.String,System.UInt32@,System.Int32)">
            <summary>
            读取UInt类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Readfloat(System.String,System.Single@,System.Int32)">
            <summary>
            读取Float类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Readlong(System.String,System.Int64@,System.Int32)">
            <summary>
            读取Int64类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Readulong(System.String,System.UInt64@,System.Int32)">
            <summary>
            读取UInt64类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Readdouble(System.String,System.Double@,System.Int32)">
            <summary>
            读取Double类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Readstring(System.String,System.UInt16,System.String@,System.Int32)">
            <summary>
            读取String类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="length">长度</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.String,xktComm.Common.DataType,System.Int32)">
            <summary>
            通用写入的方法
            </summary>
            <param name="address">Modbus地址</param>
            <param name="value">设定值</param>
            <param name="vartype">数据类型</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.WriteBoolReg(System.String,System.Boolean,System.Int32)">
            <summary>
            给布尔寄存器赋值
            </summary>
            <param name="address">布尔寄存器地址</param>
            <param name="value">设定值</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.Byte[],System.Int32)">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.Boolean,System.Int32)">
            <summary>
            布尔线圈写入数值
            </summary>
            <param name="address">变量地址</param>
            <param name="value">布尔数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.Boolean[],System.Int32)">
            <summary>
            布尔数组线圈写入数值
            </summary>
            <param name="address">变量地址</param>
            <param name="values">布尔数组</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.Int16[],System.Int32)">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.Int16,System.Int32)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.UInt16[],System.Int32)">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.UInt16,System.Int32)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.Int32[],System.Int32)">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.Int32,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.UInt32[],System.Int32)">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.UInt32,System.Int32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.Single[],System.Int32)">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.Single,System.Int32)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.Int64[],System.Int32)">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.Int64,System.Int32)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.UInt64[],System.Int32)">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.UInt64,System.Int32)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.Double[],System.Int32)">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.Double,System.Int32)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.Write(System.String,System.String,System.Int32)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.DeltaModbusSerial.WriteUnicodeString(System.String,System.String,System.Int32)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="P:xktComm.INetMessage.ProtocolHeadBytesLength">
            <summary>
            消息头的指令长度，第一次接受数据的长度<br />
            Instruction length of the message header, the length of the first received data
            </summary>
        </member>
        <member name="M:xktComm.INetMessage.GetContentLengthByHeadBytes">
            <summary>
            从当前的头子节文件中提取出接下来需要接收的数据长度<br />
            Extract the length of the data to be received from the current header file
            </summary>
            <returns>返回接下来的数据内容长度</returns>
        </member>
        <member name="M:xktComm.INetMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节的合法性<br />
            Check the legitimacy of the head subsection
            </summary>
            <param name="token">特殊的令牌，有些特殊消息的验证</param>
            <returns>是否成功的结果</returns>
        </member>
        <member name="M:xktComm.INetMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的消息标识<br />
            Get the message ID in the header subsection
            </summary>
            <returns>消息标识</returns>
        </member>
        <member name="P:xktComm.INetMessage.HeadBytes">
            <summary>
            消息头字节<br />
            Message header byte
            </summary>
        </member>
        <member name="P:xktComm.INetMessage.ContentBytes">
            <summary>
            消息内容字节<br />
            Message content byte
            </summary>
        </member>
        <member name="P:xktComm.INetMessage.SendBytes">
            <summary>
            发送的字节信息<br />
            Byte information sent
            </summary>
        </member>
        <member name="T:xktComm.KeyenceSerial">
            <summary>
            基恩士串口协议
            </summary>
        </member>
        <member name="F:xktComm.KeyenceSerial.MyCom">
            <summary>
            定义SerialPort对象
            </summary>
        </member>
        <member name="P:xktComm.KeyenceSerial.ReadTimeOut">
            <summary>
            读取超时时间
            </summary>
        </member>
        <member name="P:xktComm.KeyenceSerial.WriteTimeOut">
            <summary>
            写入超时时间
            </summary>
        </member>
        <member name="P:xktComm.KeyenceSerial.DtrEnable">
            <summary>
            Dtr使能标志
            </summary>
        </member>
        <member name="P:xktComm.KeyenceSerial.RtsEnable">
            <summary>
            Rts使能标志
            </summary>
        </member>
        <member name="P:xktComm.KeyenceSerial.ReceiveTimeOut">
            <summary>
            读取返回报文超时时间
            </summary>
        </member>
        <member name="P:xktComm.KeyenceSerial.DataFormat">
            <summary>
            字节顺序
            </summary>
        </member>
        <member name="F:xktComm.KeyenceSerial.InteractiveLock">
            <summary>
            互斥的锁对象
            </summary>
        </member>
        <member name="P:xktComm.KeyenceSerial.SleepTime">
            <summary>
            读取缓冲区的延时时间
            </summary>
        </member>
        <member name="F:xktComm.KeyenceSerial.Command1">
            <summary>
            更改模式
            </summary>
        </member>
        <member name="F:xktComm.KeyenceSerial.Command2">
            <summary>
            清除错误
            </summary>
        </member>
        <member name="M:xktComm.KeyenceSerial.Connect(System.Int32,System.String,System.Int32,System.IO.Ports.Parity,System.IO.Ports.StopBits)">
            <summary>
            打开串口
            </summary>
            <param name="iBaudRate">波特率</param>
            <param name="iPortName">串口号</param>
            <param name="iDataBits">数据位</param>
            <param name="iParity">校验位</param>
            <param name="iStopBits">停止位</param>    
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.KeyenceSerial.DisConnect">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:xktComm.KeyenceSerial.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="address"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.KeyenceSerial.SendAndReceive(System.String)">
            <summary>
            发送报文并接收返回值
            </summary>
            <param name="SendStr"></param>
            <returns></returns>
        </member>
        <member name="P:xktComm.MelsecFXLink.Station">
            <summary>
            PLC的站号信息
            </summary>
        </member>
        <member name="P:xktComm.MelsecFXLink.WaittingTime">
            <summary>
            报文等待时间，单位10ms，设置范围为0-15
            </summary>
        </member>
        <member name="P:xktComm.MelsecFXLink.SumCheck">
            <summary>
            是否启动和校验
            </summary>
        </member>
        <member name="M:xktComm.MelsecFXLink.Connect(System.Int32,System.String,System.Int32,System.IO.Ports.Parity,System.IO.Ports.StopBits)">
            <summary>
            打开串口
            </summary>
            <param name="iBaudRate">波特率</param>
            <param name="iPortName">串口号</param>
            <param name="iDataBits">数据位</param>
            <param name="iParity">校验位</param>
            <param name="iStopBits">停止位</param>
        </member>
        <member name="M:xktComm.MelsecFXLink.DisConnect">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="address"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.Int16[])">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.Int16)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.UInt16[])">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.UInt16)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.Int32[])">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.UInt32[])">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.UInt32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.Single[])">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.Single)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.Int64[])">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.Int64)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.UInt64[])">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.UInt64)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.Double[])">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.Double)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.Write(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.WriteUnicodeString(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.SendAndReceive(System.Byte[],System.Byte[]@)">
            <summary>
            通用发送报文并接受
            </summary>
            <param name="sendByte"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.StartPLC">
            <summary>
            启动PLC
            </summary>
            <returns>是否启动成功</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.StopPLC">
            <summary>
            停止PLC
            </summary>
            <returns>是否停止成功</returns>
        </member>
        <member name="M:xktComm.MelsecFXLink.BuildStop(System.Byte,System.Boolean,System.Byte)">
            <summary>
            创建启动PLC的报文信息
            </summary>
            <param name="station">站号信息</param>
            <param name="sumCheck">是否和校验</param>
            <param name="waitTime">等待时间</param>
            <returns>是否创建成功</returns>
        </member>
        <member name="M:xktComm.MT850H.OpenMyCom(System.Int32,System.String,System.Int32,System.IO.Ports.Parity,System.IO.Ports.StopBits)">
            <summary>
            打开串口
            </summary>
            <param name="iBaudRate">波特率</param>
            <param name="iPortName">串口号</param>
            <param name="iDataBits">数据位</param>
            <param name="iParity">校验位</param>
            <param name="iStopBits">停止位</param>
        </member>
        <member name="M:xktComm.MT850H.DisConnect">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:xktComm.MT850H.LinkStatus(System.String@)">
            <summary>
            测试连接状态byte
            </summary>
            <returns>如果0x00表示无错误，其它表示报错</returns>
        </member>
        <member name="M:xktComm.MT850H.ReadSingleReg(System.String)">
            <summary>
            
            </summary>
            <param name="iDevAdd"></param>
            <param name="iAddress"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.MT850H.SendData(System.Byte[],System.Byte[]@)">
            <summary>
            通用发送报文并接受
            </summary>
            <param name="sendByte"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.MT850H.GetByteArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            自定义截取字节数组
            </summary>
            <param name="dest">目标字节数组</param>
            <param name="offset">偏移</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.MT850H.CalcSumInverse(System.Byte[],System.Int32,System.Int32)">
            <summary>
            CheckSumInverse
            </summary>
            <param name="buffer">byte原数组</param>
            <param name="offset">开始位置</param>
            <param name="lenght">长度</param>
            <returns></returns>
        </member>
        <member name="T:xktComm.ModbusAsciiOverUDP">
            <summary>
            ModbusAsciiOverUDP通信库
            </summary>
        </member>
        <member name="P:xktComm.ModbusAsciiOverUDP.ConnectTimeOut">
            <summary>
            连接超时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusAsciiOverUDP.SendTimeOut">
            <summary>
            发送超时事件
            </summary>
        </member>
        <member name="P:xktComm.ModbusAsciiOverUDP.ReceiveTimeOut">
            <summary>
            读取返回报文超时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusAsciiOverUDP.DataFormat">
            <summary>
            字节顺序
            </summary>
        </member>
        <member name="F:xktComm.ModbusAsciiOverUDP.InteractiveLock">
            <summary>
            互斥的锁对象
            </summary>
        </member>
        <member name="P:xktComm.ModbusAsciiOverUDP.SleepTime">
            <summary>
            读取缓冲区的延时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusAsciiOverUDP.WaitTimes">
            <summary>
            接受返回报文等待次数，每次为10ms
            </summary>
        </member>
        <member name="P:xktComm.ModbusAsciiOverUDP.ReceiveBufferLength">
            <summary>
            接收缓冲区大小
            </summary>
        </member>
        <member name="P:xktComm.ModbusAsciiOverUDP.IpAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:xktComm.ModbusAsciiOverUDP.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.#ctor(System.String,System.Int32,xktComm.Common.DataFormat)">
            <summary>
            初始化相关参数
            </summary>
            <param name="ipAddress">IP地址</param>
            <param name="port">端口号</param>
            <param name="dataFormat">数据格式</param>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.ReadOutputStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输出线圈方法
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始地址</param>
            <param name="iLength">长度</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.ReadInputStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输入线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始地址</param>
            <param name="iLength">长度</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.ReadKeepReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取保持型寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="iLength">寄存器长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.ReadInputReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输入寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="iLength">寄存器长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.ForceCoil(System.Int32,System.Int32,System.Boolean)">
            <summary>
            强制单线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">线圈地址</param>
            <param name="SetValue">设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetSingleReg(System.Int32,System.Int32,System.Int16)">
            <summary>
            预置单个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址</param>
            <param name="SetValue">Short设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetSingleReg(System.Int32,System.Int32,System.UInt16)">
            <summary>
            预置单个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址</param>
            <param name="SetValue">UShort设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.ForceMultiCoil(System.Int32,System.Int32,System.Boolean[])">
            <summary>
            强制多线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始线圈地址</param>
            <param name="SetValue">设定值，布尔数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetBoolReg(System.Int32,System.String,System.Boolean)">
            <summary>
            预置布尔寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">布尔寄存器地址，以.进行分割</param>
            <param name="SetValue">设定布尔值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Byte[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">字节数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Single)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">浮点型数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int32数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.UInt32)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt32数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Single[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">浮点型数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Int32[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int32数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Int16[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int16数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt32数组</param>
            <returns>是否成功</returns> 
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.UInt16[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt16数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Int64)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int64数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.UInt64)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt64数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Double)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Double数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Int64[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int64数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.UInt64[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt64数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Double[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Double数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.SendAndReceive(System.Byte[],System.Byte[]@)">
            <summary>
            发送报文并接受
            </summary>
            <param name="SendByte"></param>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverUDP.Write(System.Int32,System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="devId"></param>
            <param name="address"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.ModbusAsciiOverTCP">
            <summary>
            ModbusAsciiOverTCP通信库
            </summary>
        </member>
        <member name="F:xktComm.ModbusAsciiOverTCP.tcpclient">
            <summary>
            定义SerialPort对象
            </summary>
        </member>
        <member name="P:xktComm.ModbusAsciiOverTCP.ConnectTimeOut">
            <summary>
            连接超时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusAsciiOverTCP.SendTimeOut">
            <summary>
            发送超时事件
            </summary>
        </member>
        <member name="P:xktComm.ModbusAsciiOverTCP.ReceiveTimeOut">
            <summary>
            读取返回报文超时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusAsciiOverTCP.DataFormat">
            <summary>
            字节顺序
            </summary>
        </member>
        <member name="F:xktComm.ModbusAsciiOverTCP.InteractiveLock">
            <summary>
            互斥的锁对象
            </summary>
        </member>
        <member name="P:xktComm.ModbusAsciiOverTCP.SleepTime">
            <summary>
            读取缓冲区的延时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusAsciiOverTCP.WaitTimes">
            <summary>
            接受返回报文等待次数，每次为10ms
            </summary>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.Connect(System.String,System.String)">
            <summary>
            建立Socket连接
            </summary>
            <param name="ip">IP地址</param>
            <param name="port">端口号</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.DisConnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.ReadOutputStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输出线圈方法
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始地址</param>
            <param name="iLength">长度</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.ReadInputStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输入线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始地址</param>
            <param name="iLength">长度</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.ReadKeepReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取保持型寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="iLength">寄存器长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.ReadInputReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输入寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="iLength">寄存器长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.ForceCoil(System.Int32,System.Int32,System.Boolean)">
            <summary>
            强制单线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">线圈地址</param>
            <param name="SetValue">设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetSingleReg(System.Int32,System.Int32,System.Int16)">
            <summary>
            预置单个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址</param>
            <param name="SetValue">Short设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetSingleReg(System.Int32,System.Int32,System.UInt16)">
            <summary>
            预置单个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址</param>
            <param name="SetValue">UShort设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.ForceMultiCoil(System.Int32,System.Int32,System.Boolean[])">
            <summary>
            强制多线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始线圈地址</param>
            <param name="SetValue">设定值，布尔数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetBoolReg(System.Int32,System.String,System.Boolean)">
            <summary>
            预置布尔寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">布尔寄存器地址，以.进行分割</param>
            <param name="SetValue">设定布尔值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Byte[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">字节数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Single)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">浮点型数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int32数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.UInt32)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt32数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Single[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">浮点型数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Int32[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int32数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Int16[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int16数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt32数组</param>
            <returns>是否成功</returns> 
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.UInt16[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt16数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Int64)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int64数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.UInt64)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt64数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Double)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Double数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Int64[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int64数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.UInt64[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt64数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Double[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Double数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.SendAndReceive(System.Byte[],System.Byte[]@)">
            <summary>
            发送报文并接收返回值
            </summary>
            <param name="SendByte"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusAsciiOverTCP.Write(System.Int32,System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="devId"></param>
            <param name="address"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.ModbusAscii">
            <summary>
            ModbusASCII通信库
            </summary>
        </member>
        <member name="F:xktComm.ModbusAscii.MyCom">
            <summary>
            定义SerialPort对象
            </summary>
        </member>
        <member name="P:xktComm.ModbusAscii.ReadTimeOut">
            <summary>
            读取超时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusAscii.WriteTimeOut">
            <summary>
            写入超时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusAscii.DtrEnable">
            <summary>
            Dtr使能标志
            </summary>
        </member>
        <member name="P:xktComm.ModbusAscii.RtsEnable">
            <summary>
            Rts使能标志
            </summary>
        </member>
        <member name="P:xktComm.ModbusAscii.ReceiveTimeOut">
            <summary>
            读取返回报文超时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusAscii.DataFormat">
            <summary>
            字节顺序
            </summary>
        </member>
        <member name="F:xktComm.ModbusAscii.InteractiveLock">
            <summary>
            互斥的锁对象
            </summary>
        </member>
        <member name="P:xktComm.ModbusAscii.SleepTime">
            <summary>
            读取缓冲区的延时时间
            </summary>
        </member>
        <member name="M:xktComm.ModbusAscii.Connect(System.Int32,System.String,System.Int32,System.IO.Ports.Parity,System.IO.Ports.StopBits)">
            <summary>
            打开串口
            </summary>
            <param name="iBaudRate">波特率</param>
            <param name="iPortName">串口号</param>
            <param name="iDataBits">数据位</param>
            <param name="iParity">校验位</param>
            <param name="iStopBits">停止位</param>
        </member>
        <member name="M:xktComm.ModbusAscii.DisConnect">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:xktComm.ModbusAscii.ReadOutputStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输出线圈方法
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始地址</param>
            <param name="iLength">长度</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusAscii.ReadInputStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输入线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始地址</param>
            <param name="iLength">长度</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusAscii.ReadKeepReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取保持型寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="iLength">寄存器长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.ReadInputReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输入寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="iLength">寄存器长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.ForceCoil(System.Int32,System.Int32,System.Boolean)">
            <summary>
            强制单线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">线圈地址</param>
            <param name="SetValue">设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetSingleReg(System.Int32,System.Int32,System.Int16)">
            <summary>
            预置单个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址</param>
            <param name="SetValue">Short设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetSingleReg(System.Int32,System.Int32,System.UInt16)">
            <summary>
            预置单个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址</param>
            <param name="SetValue">UShort设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.ForceMultiCoil(System.Int32,System.Int32,System.Boolean[])">
            <summary>
            强制多线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始线圈地址</param>
            <param name="SetValue">设定值，布尔数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetBoolReg(System.Int32,System.String,System.Boolean)">
            <summary>
            预置布尔寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">布尔寄存器地址，以.进行分割</param>
            <param name="SetValue">设定布尔值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetMultiReg(System.Int32,System.Int32,System.Byte[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">字节数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetMultiReg(System.Int32,System.Int32,System.Single)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">浮点型数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetMultiReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int32数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetMultiReg(System.Int32,System.Int32,System.UInt32)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt32数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetMultiReg(System.Int32,System.Int32,System.Single[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">浮点型数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetMultiReg(System.Int32,System.Int32,System.Int32[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int32数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetMultiReg(System.Int32,System.Int32,System.Int16[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int16数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetMultiReg(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt32数组</param>
            <returns>是否成功</returns> 
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetMultiReg(System.Int32,System.Int32,System.UInt16[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt16数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetMultiReg(System.Int32,System.Int32,System.Int64)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int64数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetMultiReg(System.Int32,System.Int32,System.UInt64)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt64数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetMultiReg(System.Int32,System.Int32,System.Double)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Double数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetMultiReg(System.Int32,System.Int32,System.Int64[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int64数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetMultiReg(System.Int32,System.Int32,System.UInt64[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt64数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.PreSetMultiReg(System.Int32,System.Int32,System.Double[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Double数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.SendAndReceive(System.Byte[],System.Byte[]@)">
            <summary>
            通用发送报文并接受
            </summary>
            <param name="sendByte">发送字节数组</param>
            <param name="response">返回字节数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusAscii.Write(System.Int32,System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="devId"></param>
            <param name="address"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.ModbusRtuOverTCP">
            <summary>
            ModbusRtuOverTCP通信库
            </summary>
        </member>
        <member name="F:xktComm.ModbusRtuOverTCP.tcpclient">
            <summary>
            定义SerialPort对象
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtuOverTCP.ConnectTimeOut">
            <summary>
            连接超时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtuOverTCP.SendTimeOut">
            <summary>
            发送超时事件
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtuOverTCP.ReceiveTimeOut">
            <summary>
            读取返回报文超时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtuOverTCP.DataFormat">
            <summary>
            字节顺序
            </summary>
        </member>
        <member name="F:xktComm.ModbusRtuOverTCP.InteractiveLock">
            <summary>
            互斥的锁对象
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtuOverTCP.SleepTime">
            <summary>
            读取缓冲区的延时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtuOverTCP.WaitTimes">
            <summary>
            接受返回报文等待次数，每次为10ms
            </summary>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.Connect(System.String,System.String)">
            <summary>
            建立Socket连接
            </summary>
            <param name="ip">IP地址</param>
            <param name="port">端口号</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.DisConnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.ReadOutputStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输出线圈方法
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始地址</param>
            <param name="iLength">长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.ReadInputStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输入线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始地址</param>
            <param name="iLength">长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.ReadKeepReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取保持型寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="iLength">寄存器长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.ReadInputRegBool(System.Int32,System.String,System.Boolean@)">
            <summary>
            输入寄存器读取布尔
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址，必须为"0.0"的形式</param>
            <param name="res">布尔</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.ReadInputRegBool(System.Int32,System.String,System.Int32,System.Boolean[]@)">
            <summary>
            输入寄存器读取布尔数组
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址，必须为"0.0"的形式</param>
            <param name="iLength">布尔长度</param>
            <param name="value">布尔数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.ReadInputRegShort(System.Int32,System.Int32,System.Int16@)">
            <summary>
            输入寄存器读取Short类型
            </summary>
            <param name="iDevAdd"></param>
            <param name="address"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.ReadInputRegUShort(System.Int32,System.Int32,System.UInt16@)">
            <summary>
            输入寄存器读取 UShort类型
            </summary>
            <param name="iDevAdd"></param>
            <param name="address"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.ReadInputReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输入寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">读取地址</param>
            <param name="iLength">长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.ForceCoil(System.Int32,System.Int32,System.Boolean)">
            <summary>
            强制单线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">线圈地址</param>
            <param name="SetValue">设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetSingleReg(System.Int32,System.Int32,System.Int16)">
            <summary>
            预置单个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址</param>
            <param name="SetValue">Short设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetSingleReg(System.Int32,System.Int32,System.UInt16)">
            <summary>
            预置单个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址</param>
            <param name="SetValue">UShort设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.ForceMultiCoil(System.Int32,System.Int32,System.Boolean[])">
            <summary>
            强制多线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始线圈地址</param>
            <param name="SetValue">设定值，布尔数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetBoolReg(System.Int32,System.String,System.Boolean)">
            <summary>
            预置布尔寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">布尔寄存器地址，以.进行分割</param>
            <param name="SetValue">设定布尔值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Byte[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">字节数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Single)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">浮点型数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int32数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.UInt32)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt32数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Single[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">浮点型数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Int32[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int32数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt32数组</param>
            <returns>是否成功</returns> 
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Int16[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int16数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.UInt16[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt16数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Int64)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int64数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.UInt64)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt64数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Double)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Double数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Int64[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int64数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.UInt64[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt64数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.PreSetMultiReg(System.Int32,System.Int32,System.Double[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Double数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.SendAndReceive(System.Byte[],System.Byte[]@)">
            <summary>
            发送报文并接收返回值
            </summary>
            <param name="SendByte"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverTCP.Write(System.Int32,System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="devId"></param>
            <param name="address"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.ModbusRtuOverUDP">
            <summary>
            ModbusRtuOverUDP通信库
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtuOverUDP.ConnectTimeOut">
            <summary>
            连接超时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtuOverUDP.SendTimeOut">
            <summary>
            发送超时事件
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtuOverUDP.ReceiveTimeOut">
            <summary>
            读取返回报文超时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtuOverUDP.DataFormat">
            <summary>
            字节顺序
            </summary>
        </member>
        <member name="F:xktComm.ModbusRtuOverUDP.InteractiveLock">
            <summary>
            互斥的锁对象
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtuOverUDP.SleepTime">
            <summary>
            读取缓冲区的延时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtuOverUDP.WaitTimes">
            <summary>
            接受返回报文等待次数，每次为10ms
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtuOverUDP.ReceiveBufferLength">
            <summary>
            接收缓冲区大小
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtuOverUDP.IpAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtuOverUDP.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.#ctor(System.String,System.Int32,xktComm.Common.DataFormat)">
            <summary>
            初始化相关参数
            </summary>
            <param name="ipAddress">IP地址</param>
            <param name="port">端口号</param>
            <param name="dataFormat">数据格式</param>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.ReadOutputStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输出线圈方法
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始地址</param>
            <param name="iLength">长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.ReadInputStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输入线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始地址</param>
            <param name="iLength">长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.ReadKeepReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取保持型寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="iLength">寄存器长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.ReadInputRegBool(System.Int32,System.String,System.Boolean@)">
            <summary>
            输入寄存器读取布尔
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址，必须为"0.0"的形式</param>
            <param name="res">布尔</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.ReadInputRegBool(System.Int32,System.String,System.Int32,System.Boolean[]@)">
            <summary>
            输入寄存器读取布尔数组
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址，必须为"0.0"的形式</param>
            <param name="iLength">布尔长度</param>
            <param name="value">布尔数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.ReadInputRegShort(System.Int32,System.Int32,System.Int16@)">
            <summary>
            输入寄存器读取Short类型
            </summary>
            <param name="iDevAdd"></param>
            <param name="address"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.ReadInputRegUShort(System.Int32,System.Int32,System.UInt16@)">
            <summary>
            输入寄存器读取 UShort类型
            </summary>
            <param name="iDevAdd"></param>
            <param name="address"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.ReadInputReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输入寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">读取地址</param>
            <param name="iLength">长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.ForceCoil(System.Int32,System.Int32,System.Boolean)">
            <summary>
            强制单线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">线圈地址</param>
            <param name="SetValue">设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetSingleReg(System.Int32,System.Int32,System.Int16)">
            <summary>
            预置单个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址</param>
            <param name="SetValue">Short设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetSingleReg(System.Int32,System.Int32,System.UInt16)">
            <summary>
            预置单个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址</param>
            <param name="SetValue">UShort设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.ForceMultiCoil(System.Int32,System.Int32,System.Boolean[])">
            <summary>
            强制多线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始线圈地址</param>
            <param name="SetValue">设定值，布尔数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetBoolReg(System.Int32,System.String,System.Boolean)">
            <summary>
            预置布尔寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">布尔寄存器地址，以.进行分割</param>
            <param name="SetValue">设定布尔值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Byte[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">字节数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Single)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">浮点型数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int32数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.UInt32)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt32数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Single[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">浮点型数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Int32[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int32数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt32数组</param>
            <returns>是否成功</returns> 
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Int16[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int16数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.UInt16[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt16数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Int64)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int64数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.UInt64)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt64数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Double)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Double数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Int64[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int64数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.UInt64[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt64数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.PreSetMultiReg(System.Int32,System.Int32,System.Double[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Double数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.SendAndReceive(System.Byte[],System.Byte[]@)">
            <summary>
            发送报文并接受
            </summary>
            <param name="SendByte"></param>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusRtuOverUDP.Write(System.Int32,System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="devId"></param>
            <param name="address"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.ModbusUdp">
            <summary>
            ModbusUdp通信库
            </summary>
        </member>
        <member name="P:xktComm.ModbusUdp.SendTimeOut">
            <summary>
            发送超时事件
            </summary>
        </member>
        <member name="P:xktComm.ModbusUdp.ReceiveTimeOut">
            <summary>
            接收超时事件
            </summary>
        </member>
        <member name="P:xktComm.ModbusUdp.DataFormat">
            <summary>
            字节大小端顺序
            </summary>
        </member>
        <member name="P:xktComm.ModbusUdp.WaitTimes">
            <summary>
            接受返回报文等待次数，每次为5ms
            </summary>
        </member>
        <member name="P:xktComm.ModbusUdp.SlaveAddress">
            <summary>
            从站地址
            </summary>
        </member>
        <member name="P:xktComm.ModbusUdp.ConnectTimeOut">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusUdp.IpAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:xktComm.ModbusUdp.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:xktComm.ModbusUdp.ReceiveBufferLength">
            <summary>
            接收缓冲区大小
            </summary>
        </member>
        <member name="M:xktComm.ModbusUdp.#ctor(System.String,System.Int32,xktComm.Common.DataFormat)">
            <summary>
            ModbusUdp构造方法
            </summary>
            <param name="ipAddress"></param>
            <param name="port"></param>
            <param name="dataFormat"></param>
        </member>
        <member name="M:xktComm.ModbusUdp.ReadOutputStatus(System.Int32,System.Int32)">
            <summary>
            读输出线圈  功能0x01
            </summary>
            <param name="iAddress"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.ReadInputStatus(System.Int32,System.Int32)">
            <summary>
            读输入线圈  功能0x02
            </summary>
            <param name="iAddress"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.ReadKeepReg(System.Int32,System.Int32)">
            <summary>
            读保持型寄存器 功能码0x03
            </summary>
            <param name="iAddress"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.ReadInputReg(System.Int32,System.Int32)">
            <summary>
            读输入寄存器 功能码0x04
            </summary>
            <param name="iAddress"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.ForceCoil(System.Int32,System.Boolean)">
            <summary>
            强制输出线圈 功能码0x05
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.PreSetSingleReg(System.Int32,System.Int16)">
            <summary>
            预置单个寄存器 功能码0x06
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.PreSetSingleReg(System.Int32,System.UInt16)">
            <summary>
            预置单个寄存器 功能码0x06
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:xktComm.ModbusUdp.PreSetMultiReg(System.Int32,System.Byte[])" -->
        <member name="M:xktComm.ModbusUdp.PreSetMultiReg(System.Int32,System.Single)">
            <summary>
            写入浮点型数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.PreSetMultiReg(System.Int32,System.Int32)">
            <summary>
            写入Int32型数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.PreSetMultiReg(System.Int32,System.UInt32)">
            <summary>
            写入UInt32型数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.PreSetMultiReg(System.Int32,System.Single[])">
            <summary>
            写入Float数组数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.PreSetMultiReg(System.Int32,System.Int32[])">
            <summary>
            写入Int32数组数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.PreSetMultiReg(System.Int32,System.Int16[])">
            <summary>
            写入Int16数组数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.PreSetMultiReg(System.Int32,System.UInt32[])">
            <summary>
            写入UInt32数组数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.PreSetMultiReg(System.Int32,System.UInt16[])">
            <summary>
            写入UInt16数组数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.PreSetMultiReg(System.Int32,System.Int64)">
            <summary>
            写入Int64类型数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.PreSetMultiReg(System.Int32,System.UInt64)">
            <summary>
            写入UInt64类型数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.PreSetMultiReg(System.Int32,System.Double)">
            <summary>
            写入Double类型数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.PreSetMultiReg(System.Int32,System.Int64[])">
            <summary>
            写入Int64数组数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.PreSetMultiReg(System.Int32,System.UInt64[])">
            <summary>
            写入UInt64数组数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.PreSetMultiReg(System.Int32,System.Double[])">
            <summary>
            写入Double数组数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.PreSetBoolReg(System.String,System.Boolean)">
            <summary>
            预置双字寄存器 功能码0x10
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:xktComm.ModbusUdp.ForceMultiCoil(System.Int32,System.Boolean[])" -->
        <member name="M:xktComm.ModbusUdp.SendAndReceive(System.Byte[],System.Byte[]@)">
            <summary>
            发送报文并接受
            </summary>
            <param name="SendByte"></param>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusUdp.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="address"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.OmronCipNet">
            <summary>
            欧姆龙CIP通信库
            </summary>
        </member>
        <member name="P:xktComm.OmronFinsUDP.ReceiveBufferLength">
            <summary>
            获取或设置一次接收时的数据长度，默认2KB数据长度，特殊情况的时候需要调整
            </summary>
        </member>
        <member name="P:xktComm.OmronFinsUDP.SA2">
            <summary>
            上位机的单元号地址
            </summary>
        </member>
        <member name="P:xktComm.OmronFinsUDP.SID">
            <summary>
            设备的标识号
            </summary>
        </member>
        <member name="M:xktComm.OmronFinsUDP.Write(System.String,System.Object,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="address"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.OmronFinsUDP.SendAndReceive(System.Byte[],System.Byte[]@)">
            <summary>
            发送报文并接受
            </summary>
            <param name="SendByte"></param>
            <param name="response">返回报文</param>
            <returns>返回</returns>
        </member>
        <member name="T:xktComm.KeyenceMcDataType">
            <summary>
            基恩士PLC常用的数据类型，此处包含了几个常用的类型
            </summary>
        </member>
        <member name="M:xktComm.KeyenceMcDataType.#ctor(System.Byte,System.Byte,System.String,System.Int32)">
            <summary>
            如果您清楚类型代号，可以根据值进行扩展
            </summary>
            <param name="code">数据类型的代号</param>
            <param name="type">0或1，默认为0</param>
            <param name="asciiCode">ASCII格式的类型信息</param>
            <param name="fromBase">指示地址的多少进制的，10或是16</param>
        </member>
        <member name="P:xktComm.KeyenceMcDataType.DataCode">
            <summary>
            类型的代号值
            </summary>
        </member>
        <member name="P:xktComm.KeyenceMcDataType.DataType">
            <summary>
            数据的类型，0代表按字，1代表按位
            </summary>
        </member>
        <member name="P:xktComm.KeyenceMcDataType.AsciiCode">
            <summary>
            当以ASCII格式通讯时的类型描述
            </summary>
        </member>
        <member name="P:xktComm.KeyenceMcDataType.FromBase">
            <summary>
            指示地址是10进制，还是16进制的
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.X">
            <summary>
            X输入寄存器
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.Y">
            <summary>
            Y输出寄存器
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.M">
            <summary>
            M中间寄存器
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.D">
            <summary>
            D数据寄存器
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.W">
            <summary>
            W链接寄存器
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.L">
            <summary>
            L锁存继电器
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.F">
            <summary>
            F报警器
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.V">
            <summary>
            V边沿继电器
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.B">
            <summary>
            B链接继电器
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.R">
            <summary>
            R文件寄存器
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.S">
            <summary>
            S步进继电器
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.Z">
            <summary>
            变址寄存器
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.TN">
            <summary>
            定时器的当前值
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.TS">
            <summary>
            定时器的触点
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.TC">
            <summary>
            定时器的线圈
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.SS">
            <summary>
            累计定时器的触点
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.SC">
            <summary>
            累计定时器的线圈
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.SN">
            <summary>
            累计定时器的当前值
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.CN">
            <summary>
            计数器的当前值
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.CS">
            <summary>
            计数器的触点
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.CC">
            <summary>
            计数器的线圈
            </summary>
        </member>
        <member name="F:xktComm.KeyenceMcDataType.ZR">
            <summary>
            文件寄存器ZR区
            </summary>
        </member>
        <member name="T:xktComm.KeyenceHelper">
            <summary>
            基恩士帮助类
            </summary>
        </member>
        <member name="M:xktComm.KeyenceHelper.KeyenceAnalysisAddress(System.String)">
            <summary>
            解析数据地址
            </summary>
            <param name="address">数据地址</param>
            <returns>解析值</returns>
        </member>
        <member name="M:xktComm.KeyenceHelper.BuildBytesFromData(System.Byte)">
            <summary>
            从字节构建一个ASCII格式的地址字节
            </summary>
            <param name="value">字节信息</param>
            <returns>ASCII格式的地址</returns>
        </member>
        <member name="M:xktComm.KeyenceHelper.BuildBytesFromData(System.Int16)">
            <summary>
            从short数据构建一个ASCII格式地址字节
            </summary>
            <param name="value">short值</param>
            <returns>ASCII格式的地址</returns>
        </member>
        <member name="M:xktComm.KeyenceHelper.BuildBytesFromData(System.UInt16)">
            <summary>
            从ushort数据构建一个ASCII格式地址字节
            </summary>
            <param name="value">ushort值</param>
            <returns>ASCII格式的地址</returns>
        </member>
        <member name="M:xktComm.KeyenceHelper.BuildBytesFromAddress(System.Int32,xktComm.KeyenceMcDataType)">
            <summary>
            从三菱的地址中构建MC协议的6字节的ASCII格式的地址
            </summary>
            <param name="address">三菱地址</param>
            <param name="type">三菱的数据类型</param>
            <returns>6字节的ASCII格式的地址</returns>
        </member>
        <member name="M:xktComm.KeyenceHelper.BuildBytesFromData(System.Byte[])">
            <summary>
            从字节数组构建一个ASCII格式的地址字节
            </summary>
            <param name="value">字节信息</param>
            <returns>ASCII格式的地址</returns>
        </member>
        <member name="M:xktComm.KeyenceHelper.TransBoolArrayToByteData(System.Byte[])">
            <summary>
            将0，1，0，1的字节数组压缩成三菱格式的字节数组来表示开关量的
            </summary>
            <param name="value">原始的数据字节</param>
            <returns>压缩过后的数据字节</returns>
        </member>
        <member name="M:xktComm.KeyenceHelper.FxCalculateCRC(System.Byte[])">
            <summary>
            计算Fx协议指令的和校验信息
            </summary>
            <param name="data">字节数据</param>
            <returns>校验之后的数据</returns>
        </member>
        <member name="M:xktComm.KeyenceHelper.CheckCRC(System.Byte[])">
            <summary>
            检查指定的和校验是否是正确的
            </summary>
            <param name="data">字节数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:xktComm.PanasonicMcNet.IsFx5U">
            <summary>
            设置是否为FX5U，FX5U的XY存储区为8进制
            </summary>
        </member>
        <member name="P:xktComm.PanasonicMcNet.NetworkNumber">
            <summary>
            网络号，通常为0
            </summary>
            <remarks>
            依据PLC的配置而配置，如果PLC配置了1，那么此处也填0，如果PLC配置了2，此处就填2，测试不通的话，继续测试0
            </remarks>
        </member>
        <member name="P:xktComm.PanasonicMcNet.NetworkStationNumber">
            <summary>
            网络站号，通常为0
            </summary>
            <remarks>
            依据PLC的配置而配置，如果PLC配置了1，那么此处也填0，如果PLC配置了2，此处就填2，测试不通的话，继续测试0
            </remarks>
        </member>
        <member name="P:xktComm.PanasonicMcNet.WaitTimes">
            <summary>
            接受返回报文等待次数，每次为5ms
            </summary>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Connect(System.String,System.Int32)">
            <summary>
            建立与PLC的连接
            </summary>
            <param name="Ip">IP地址</param>
            <param name="Port">CPU类型</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Read(System.String,System.UInt16)">
            <summary>
            从三菱PLC中读取想要的数据，返回读取结果
            </summary>
            <param name="address">读取地址，格式为"M100","D100","W1A0"</param>
            <param name="length">读取的数据长度，字最大值960，位最大值7168</param>
            <returns>带成功标志的结果数据对象</returns>
            <remarks>
            地址支持的列表如下：
            <list type="table">
              <listheader>
                <term>地址名称</term>
                <term>示例</term>
                <term>地址进制</term>
              </listheader>
              <item>
                <term>数据寄存器</term>
                <term>D1000,D2000</term>
                <term>10</term>
              </item>
              <item>
                <term>链接寄存器</term>
                <term>W100,W1A0</term>
                <term>16</term>
              </item>
              <item>
                <term>文件寄存器</term>
                <term>R100,R200</term>
                <term>10</term>
              </item>
              <item>
                <term>ZR文件寄存器</term>
                <term>ZR100,ZR2A0</term>
                <term>16</term>
              </item>
              <item>
                <term>变址寄存器</term>
                <term>Z100,Z200</term>
                <term>10</term>
              </item>
              <item>
                <term>定时器的值</term>
                <term>T100,T200</term>
                <term>10</term>
              </item>
              <item>
                <term>计数器的值</term>
                <term>C100,C200</term>
                <term>10</term>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:xktComm.PanasonicMcNet.ReadBool(System.String,System.UInt16)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <remarks>
            地址支持的列表如下：
            <list type="table">
              <listheader>
                <term>地址名称</term>
                <term>示例</term>
                <term>地址进制</term>
              </listheader>
              <item>
                <term>内部继电器</term>
                <term>M100,M200</term>
                <term>10</term>
              </item>
              <item>
                <term>输入继电器</term>
                <term>X100,X1A0</term>
                <term>16</term>
              </item>
              <item>
                <term>输出继电器</term>
                <term>Y100,Y1A0</term>
                <term>16</term>
              </item>
               <item>
                <term>锁存继电器</term>
                <term>L100,L200</term>
                <term>10</term>
              </item>
              <item>
                <term>报警器</term>
                <term>F100,F200</term>
                <term>10</term>
              </item>
              <item>
                <term>边沿继电器</term>
                <term>V100,V200</term>
                <term>10</term>
              </item>
              <item>
                <term>链接继电器</term>
                <term>B100,B1A0</term>
                <term>16</term>
              </item>
               <item>
                <term>步进继电器</term>
                <term>S100,S200</term>
                <term>10</term>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:xktComm.PanasonicMcNet.ReadBool(System.String)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>参照 <see cref="M:xktComm.PanasonicMcNet.ReadBool(System.String,System.UInt16)"/> 方法 </example>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <returns>结果</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.Boolean)">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据，长度为8的倍数</param>
            <example>
            详细请查看<see cref="M:xktComm.PanasonicMcNet.Write(System.String,System.Boolean[])"/>方法的示例
            </example>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，可以指定任意的长度</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.Int16[])">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.Int16)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.UInt16[])">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.UInt16)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.Int32[])">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.UInt32[])">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.UInt32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.Single[])">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.Single)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.Int64[])">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.Int64)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.UInt64[])">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.UInt64)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.Double[])">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.Double)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.Write(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.WriteUnicodeString(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.BuildReadCommand(System.String,System.UInt16,System.Byte,System.Byte)">
            <summary>
            根据类型地址长度确认需要读取的指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="length">长度</param>
            <param name="networkNumber">网络号</param>
            <param name="networkStationNumber">网络站号</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.BuildWriteCommand(System.String,System.Byte[],System.Byte,System.Byte)">
            <summary>
            根据类型地址以及需要写入的数据来生成指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值，对于写入位地址来说，应该传入{0x01,0x00,0x01} 通断通这样的数组</param>
            <param name="networkNumber">网络号</param>
            <param name="networkStationNumber">网络站号</param>
            <returns>解析后的指令</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.ExtractActualData(System.Byte[],System.Boolean)">
            <summary>
            从PLC反馈的数据中提取出实际的数据内容，需要传入反馈数据，是否位读取
            </summary>
            <param name="response">反馈的数据内容</param>
            <param name="isBit">是否位读取</param>
            <returns>解析后的结果对象</returns>
        </member>
        <member name="M:xktComm.PanasonicMcNet.SendAndReceive(System.Byte[])">
            <summary>
            发送报文并接收返回值
            </summary>
            <param name="SendByte"></param>
            <returns></returns>
        </member>
        <member name="P:xktComm.Mewtocol.Station">
            <summary>
            设备的目标站号
            </summary>
        </member>
        <member name="M:xktComm.Mewtocol.Connect(System.Int32,System.String,System.Int32,System.IO.Ports.Parity,System.IO.Ports.StopBits)">
            <summary>
            打开串口
            </summary>
            <param name="iBaudRate">波特率</param>
            <param name="iPortName">串口号</param>
            <param name="iDataBits">数据位</param>
            <param name="iParity">校验位</param>
            <param name="iStopBits">停止位</param>
        </member>
        <member name="M:xktComm.Mewtocol.DisConnect">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:xktComm.Mewtocol.Read(System.String,System.UInt16)">
            <summary>
            批量读取PLC的数据，以字为单位，具体的地址参考文档
            </summary>
            <param name="address">地址信息</param>
            <param name="length">数据长度</param>
            <returns>读取结果信息</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="address"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.Int16[])">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.Int16)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.UInt16[])">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.UInt16)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.Int32[])">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.UInt32[])">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.UInt32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.Single[])">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.Single)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.Int64[])">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.Int64)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.UInt64[])">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.UInt64)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.Double[])">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.Double)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Mewtocol.Write(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Mewtocol.WriteUnicodeString(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Mewtocol.GetErrorDescription(System.Int32)">
            <summary>
            根据错误码获取到错误描述
            </summary>
            <param name="err">错误代码</param>
            <returns>字符信息</returns>
        </member>
        <member name="M:xktComm.Mewtocol.SendAndReceive(System.Byte[],System.Byte[]@)">
            <summary>
            通用发送报文并接受
            </summary>
            <param name="sendByte"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="P:xktComm.Hostlink.ICF">
            <summary>
            Specifies whether or not there are network relays. Set “80” (ASCII: 38,30) 
            when sending an FINS command to a CPU Unit on a network.Set “00” (ASCII: 30,30) 
            when sending to a CPU Unit connected directly to the host computer.
            </summary>
        </member>
        <member name="P:xktComm.Hostlink.DA2">
            <summary>
            PLC的单元号地址
            </summary>
            <remarks>
            <note type="important">通常都为0</note>
            </remarks>
        </member>
        <member name="P:xktComm.Hostlink.SA2">
            <summary>
            上位机的单元号地址
            </summary>
        </member>
        <member name="P:xktComm.Hostlink.SID">
            <summary>
            设备的标识号
            </summary>
        </member>
        <member name="P:xktComm.Hostlink.UnitNumber">
            <summary>
            PLC设备的站号信息
            </summary>
        </member>
        <member name="M:xktComm.Hostlink.Connect(System.Int32,System.String,System.Int32,System.IO.Ports.Parity,System.IO.Ports.StopBits)">
            <summary>
            打开串口
            </summary>
            <param name="iBaudRate">波特率</param>
            <param name="iPortName">串口号</param>
            <param name="iDataBits">数据位</param>
            <param name="iParity">校验位</param>
            <param name="iStopBits">停止位</param>
        </member>
        <member name="M:xktComm.Hostlink.DisConnect">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="address"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.Int16[])">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.Int16)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.UInt16[])">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.UInt16)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.Int32[])">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.UInt32[])">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.UInt32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.Single[])">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.Single)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.Int64[])">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.Int64)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.UInt64[])">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.UInt64)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.Double[])">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.Double)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Hostlink.Write(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Hostlink.WriteUnicodeString(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.Hostlink.PackCommand(System.Byte[])">
            <summary>
            将普通的指令打包成完整的指令
            </summary>
            <param name="cmd">fins指令</param>
            <returns>完整的质量</returns>
        </member>
        <member name="M:xktComm.Hostlink.SendAndReceive(System.Byte[],System.Byte[]@)">
            <summary>
            通用发送报文并接受
            </summary>
            <param name="sendByte"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="P:xktComm.KeyenceMCBinary.NetworkNumber">
            <summary>
            网络号，通常为0
            </summary>
            <remarks>
            依据PLC的配置而配置，如果PLC配置了1，那么此处也填0，如果PLC配置了2，此处就填2，测试不通的话，继续测试0
            </remarks>
        </member>
        <member name="P:xktComm.KeyenceMCBinary.NetworkStationNumber">
            <summary>
            网络站号，通常为0
            </summary>
            <remarks>
            依据PLC的配置而配置，如果PLC配置了1，那么此处也填0，如果PLC配置了2，此处就填2，测试不通的话，继续测试0
            </remarks>
        </member>
        <member name="P:xktComm.KeyenceMCBinary.WaitTimes">
            <summary>
            接受返回报文等待次数，每次为5ms
            </summary>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Connect(System.String,System.Int32)">
            <summary>
            建立与PLC的连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Read(System.String,System.UInt16)">
            <summary>
            从三菱PLC中读取想要的数据，返回读取结果
            </summary>
            <param name="address">读取地址，格式为"M100","D100","W1A0"</param>
            <param name="length">读取的数据长度，字最大值960，位最大值7168</param>
            <returns>带成功标志的结果数据对象</returns>
            <remarks>
            地址支持的列表如下：
            <list type="table">
              <listheader>
                <term>地址名称</term>
                <term>示例</term>
                <term>地址进制</term>
              </listheader>
              <item>
                <term>数据寄存器</term>
                <term>D1000,D2000</term>
                <term>10</term>
              </item>
              <item>
                <term>链接寄存器</term>
                <term>W100,W1A0</term>
                <term>16</term>
              </item>
              <item>
                <term>文件寄存器</term>
                <term>R100,R200</term>
                <term>10</term>
              </item>
              <item>
                <term>ZR文件寄存器</term>
                <term>ZR100,ZR2A0</term>
                <term>16</term>
              </item>
              <item>
                <term>变址寄存器</term>
                <term>Z100,Z200</term>
                <term>10</term>
              </item>
              <item>
                <term>定时器的值</term>
                <term>T100,T200</term>
                <term>10</term>
              </item>
              <item>
                <term>计数器的值</term>
                <term>C100,C200</term>
                <term>10</term>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.ReadBool(System.String,System.UInt16)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <remarks>
            地址支持的列表如下：
            <list type="table">
              <listheader>
                <term>地址名称</term>
                <term>示例</term>
                <term>地址进制</term>
              </listheader>
              <item>
                <term>内部继电器</term>
                <term>M100,M200</term>
                <term>10</term>
              </item>
              <item>
                <term>输入继电器</term>
                <term>X100,X1A0</term>
                <term>16</term>
              </item>
              <item>
                <term>输出继电器</term>
                <term>Y100,Y1A0</term>
                <term>16</term>
              </item>
               <item>
                <term>锁存继电器</term>
                <term>L100,L200</term>
                <term>10</term>
              </item>
              <item>
                <term>报警器</term>
                <term>F100,F200</term>
                <term>10</term>
              </item>
              <item>
                <term>边沿继电器</term>
                <term>V100,V200</term>
                <term>10</term>
              </item>
              <item>
                <term>链接继电器</term>
                <term>B100,B1A0</term>
                <term>16</term>
              </item>
               <item>
                <term>步进继电器</term>
                <term>S100,S200</term>
                <term>10</term>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.ReadBool(System.String)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>参照 <see cref="M:xktComm.KeyenceMCBinary.ReadBool(System.String,System.UInt16)"/> 方法 </example>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            根据变量地址、变量值及类型写入
            </summary>
            <param name="address"></param>
            <param name="value"></param>
            <param name="vartype"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <returns>结果</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.Boolean)">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据，长度为8的倍数</param>
            <example>
            详细请查看<see cref="M:xktComm.KeyenceMCBinary.Write(System.String,System.Boolean[])"/>方法的示例
            </example>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，可以指定任意的长度</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.Int16[])">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.Int16)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.UInt16[])">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.UInt16)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.Int32[])">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.UInt32[])">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.UInt32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.Single[])">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.Single)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.Int64[])">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.Int64)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.UInt64[])">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.UInt64)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.Double[])">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.Double)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.Write(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.WriteUnicodeString(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.BuildReadCommand(System.String,System.UInt16,System.Byte,System.Byte)">
            <summary>
            根据类型地址长度确认需要读取的指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="length">长度</param>
            <param name="networkNumber">网络号</param>
            <param name="networkStationNumber">网络站号</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.BuildWriteCommand(System.String,System.Byte[],System.Byte,System.Byte)">
            <summary>
            根据类型地址以及需要写入的数据来生成指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值，对于写入位地址来说，应该传入{0x01,0x00,0x01} 通断通这样的数组</param>
            <param name="networkNumber">网络号</param>
            <param name="networkStationNumber">网络站号</param>
            <returns>解析后的指令</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.ExtractActualData(System.Byte[],System.Boolean)">
            <summary>
            从PLC反馈的数据中提取出实际的数据内容，需要传入反馈数据，是否位读取
            </summary>
            <param name="response">反馈的数据内容</param>
            <param name="isBit">是否位读取</param>
            <returns>解析后的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyenceMCBinary.SendAndReceive(System.Byte[])">
            <summary>
            发送报文并接收返回值
            </summary>
            <param name="SendByte"></param>
            <returns></returns>
        </member>
        <member name="P:xktComm.KeyencsMCAscii.NetworkNumber">
            <summary>
            网络号，通常为0
            </summary>
            <remarks>
            依据PLC的配置而配置，如果PLC配置了1，那么此处也填0，如果PLC配置了2，此处就填2，测试不通的话，继续测试0
            </remarks>
        </member>
        <member name="P:xktComm.KeyencsMCAscii.NetworkStationNumber">
            <summary>
            网络站号，通常为0
            </summary>
            <remarks>
            依据PLC的配置而配置，如果PLC配置了1，那么此处也填0，如果PLC配置了2，此处就填2，测试不通的话，继续测试0
            </remarks>
        </member>
        <member name="P:xktComm.KeyencsMCAscii.WaitTimes">
            <summary>
            接受返回报文等待次数，每次为5ms
            </summary>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Connect(System.String,System.Int32)">
            <summary>
            建立与PLC的连接
            </summary>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Read(System.String,System.UInt16)">
            <summary>
            从三菱PLC中读取想要的数据，返回读取结果
            </summary>
            <param name="address">读取地址，格式为"M100","D100","W1A0"</param>
            <param name="length">读取的数据长度，字最大值960，位最大值7168</param>
            <returns>带成功标志的结果数据对象</returns>
            <remarks>
            地址支持的列表如下：
            <list type="table">
              <listheader>
                <term>地址名称</term>
                <term>示例</term>
                <term>地址进制</term>
              </listheader>
              <item>
                <term>数据寄存器</term>
                <term>D1000,D2000</term>
                <term>10</term>
              </item>
              <item>
                <term>链接寄存器</term>
                <term>W100,W1A0</term>
                <term>16</term>
              </item>
              <item>
                <term>文件寄存器</term>
                <term>R100,R200</term>
                <term>10</term>
              </item>
              <item>
                <term>ZR文件寄存器</term>
                <term>ZR100,ZR2A0</term>
                <term>16</term>
              </item>
              <item>
                <term>变址寄存器</term>
                <term>Z100,Z200</term>
                <term>10</term>
              </item>
              <item>
                <term>定时器的值</term>
                <term>T100,T200</term>
                <term>10</term>
              </item>
              <item>
                <term>计数器的值</term>
                <term>C100,C200</term>
                <term>10</term>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.ReadBool(System.String,System.UInt16)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <remarks>
            地址支持的列表如下：
            <list type="table">
              <listheader>
                <term>地址名称</term>
                <term>示例</term>
                <term>地址进制</term>
              </listheader>
              <item>
                <term>内部继电器</term>
                <term>M100,M200</term>
                <term>10</term>
              </item>
              <item>
                <term>输入继电器</term>
                <term>X100,X1A0</term>
                <term>16</term>
              </item>
              <item>
                <term>输出继电器</term>
                <term>Y100,Y1A0</term>
                <term>16</term>
              </item>
               <item>
                <term>锁存继电器</term>
                <term>L100,L200</term>
                <term>10</term>
              </item>
              <item>
                <term>报警器</term>
                <term>F100,F200</term>
                <term>10</term>
              </item>
              <item>
                <term>边沿继电器</term>
                <term>V100,V200</term>
                <term>10</term>
              </item>
              <item>
                <term>链接继电器</term>
                <term>B100,B1A0</term>
                <term>16</term>
              </item>
               <item>
                <term>步进继电器</term>
                <term>S100,S200</term>
                <term>10</term>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.ReadBool(System.String)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>参照 <see cref="M:xktComm.KeyencsMCAscii.ReadBool(System.String,System.UInt16)"/> 方法 </example>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            根据变量地址、变量值及类型写入
            </summary>
            <param name="address"></param>
            <param name="value"></param>
            <param name="vartype"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <returns>结果</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.Boolean)">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据，长度为8的倍数</param>
            <example>
            详细请查看<see cref="M:xktComm.KeyencsMCAscii.Write(System.String,System.Boolean[])"/>方法的示例
            </example>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，可以指定任意的长度</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.Int16[])">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.Int16)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.UInt16[])">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.UInt16)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.Int32[])">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.UInt32[])">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.UInt32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.Single[])">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.Single)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.Int64[])">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.Int64)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.UInt64[])">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.UInt64)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.Double[])">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.Double)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.Write(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.WriteUnicodeString(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.BuildReadCommand(System.String,System.UInt16,System.Byte,System.Byte)">
            <summary>
            根据类型地址长度确认需要读取的报文
            </summary>
            <param name="address">起始地址</param>
            <param name="length">长度</param>
            <param name="networkNumber">网络号信息</param>
            <param name="networkStationNumber">网络站号信息</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.BuildWriteCommand(System.String,System.Byte[],System.Byte,System.Byte)">
            <summary>
            根据类型地址以及需要写入的数据来生成报文
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入数据的实际值</param>
            <param name="networkNumber">网络号</param>
            <param name="networkStationNumber">网络站号</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.ExtractActualData(System.Byte[],System.Boolean)">
            <summary>
            从PLC反馈的数据中提取出实际的数据内容，需要传入反馈数据，是否位读取
            </summary>
            <param name="response">反馈的数据内容</param>
            <param name="isBit">是否位读取</param>
            <returns>解析后的结果对象</returns>
        </member>
        <member name="M:xktComm.KeyencsMCAscii.SendAndReceive(System.Byte[])">
            <summary>
            发送报文并接收返回值
            </summary>
            <param name="SendByte"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.PLC.Keyence">
            <summary>
            基恩士网络通信库
            </summary>
        </member>
        <member name="M:xktComm.PLC.Keyence.#ctor(xktComm.Common.KeyenceProtocolType,xktComm.Common.DataFormat)">
            <summary>
            构造方法
            </summary>
            <param name="Protocol">协议类型</param>
            <param name="dataformat">数据格式：默认DCBA</param>
        </member>
        <member name="F:xktComm.PLC.Keyence.Protocol">
            <summary>
            协议类型
            </summary>
        </member>
        <member name="P:xktComm.PLC.Keyence.DataFormat">
            <summary>
            数据格式
            </summary>
        </member>
        <member name="P:xktComm.PLC.Keyence.ConnectTimeOut">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="M:xktComm.PLC.Keyence.Connect(System.String,System.Int32)">
            <summary>
            建立连接
            </summary>
            <param name="Ip">IP地址</param>
            <param name="Port">端口号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.DisConnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:xktComm.PLC.Keyence.ReadBytes(System.String,System.UInt16,System.Boolean)">
            <summary>
            读取字节数组
            </summary>
            <param name="startAddress">开始地址</param>
            <param name="length">读取长度</param>
            <param name="isBit">是否为位，默认为False，Link协议时才会用到</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Readbool(System.String,System.Boolean@)">
            <summary>
            读取布尔
            </summary>
            <param name="address">变量地址</param>
            <param name="value">读取数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Readshort(System.String,System.Int16@)">
            <summary>
            读取有符号16位整数
            </summary>
            <param name="address">变量地址</param>
            <param name="value">读取数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Readushort(System.String,System.UInt16@)">
            <summary>
            读取无符号16位整数
            </summary>
            <param name="address">变量地址</param>
            <param name="value">读取数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Readint(System.String,System.Int32@)">
            <summary>
            读取有符号32位整数
            </summary>
            <param name="address">变量地址</param>
            <param name="value">读取数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Readuint(System.String,System.UInt32@)">
            <summary>
            读取无符号32位整数
            </summary>
            <param name="address">变量地址</param>
            <param name="value">读取数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Readfloat(System.String,System.Single@)">
            <summary>
            读取32位浮点数
            </summary>
            <param name="address">变量地址</param>
            <param name="value">读取数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Readlong(System.String,System.Int64@)">
            <summary>
            读取有符号64位整数
            </summary>
            <param name="address">变量地址</param>
            <param name="value">读取数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Readulong(System.String,System.UInt64@)">
            <summary>
            读取无符号64位整数
            </summary>
            <param name="address">变量地址</param>
            <param name="value">读取数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Readdouble(System.String,System.Double@)">
            <summary>
            读取64位浮点数
            </summary>
            <param name="address">变量地址</param>
            <param name="value">读取数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Readstring(System.String,System.Int32,System.String@)">
            <summary>
            读取字符串
            </summary>
            <param name="address">变量地址</param>
            <param name="length">读取长度</param>
            <param name="value">读取数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="address">变量地址</param>
            <param name="value">写入数值</param>
            <param name="vartype">数据类型</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Write(System.String,System.Byte[])">
            <summary>
            写入字节数组
            </summary>
            <param name="address">变量地址</param>
            <param name="value">写入字节数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Write(System.String,System.Boolean,System.Boolean)">
            <summary>
            写入单个布尔
            </summary>
            <param name="address">变量地址</param>
            <param name="value">写入布尔数值</param>
            <param name="IsRegBool">是否为布尔寄存器，默认为False</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Write(System.String,System.Int16)">
            <summary>
            写入单个有符号16位整数
            </summary>
            <param name="address">变量地址</param>
            <param name="value">写入数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Write(System.String,System.UInt16)">
            <summary>
            写入单个无符号16位整数
            </summary>
            <param name="address">变量地址</param>
            <param name="value">写入数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Write(System.String,System.Int32)">
            <summary>
            写入单个有符号32位整数
            </summary>
            <param name="address">变量地址</param>
            <param name="value">写入数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Write(System.String,System.UInt32)">
            <summary>
            写入单个无符号32位整数
            </summary>
            <param name="address">变量地址</param>
            <param name="value">写入数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Write(System.String,System.Single)">
            <summary>
            写入单个32位浮点数
            </summary>
            <param name="address">变量地址</param>
            <param name="value">写入数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Write(System.String,System.Int64)">
            <summary>
            写入单个有符号64位整数
            </summary>
            <param name="address">变量地址</param>
            <param name="value">写入数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Write(System.String,System.UInt64)">
            <summary>
            写入单个无符号64位整数
            </summary>
            <param name="address">变量地址</param>
            <param name="value">写入数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Write(System.String,System.Double)">
            <summary>
            写入单个64位浮点数
            </summary>
            <param name="address">变量地址</param>
            <param name="value">写入数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.PLC.Keyence.Write(System.String,System.String)">
            <summary>
            写入单个字符串
            </summary>
            <param name="address">变量地址</param>
            <param name="value">写入数值</param>
            <returns>是否成功</returns>
        </member>
        <member name="F:xktComm.MelsecFxSerial.MyCom">
            <summary>
            定义SerialPort对象
            </summary>
        </member>
        <member name="P:xktComm.MelsecFxSerial.ReadTimeOut">
            <summary>
            读取超时时间
            </summary>
        </member>
        <member name="P:xktComm.MelsecFxSerial.WriteTimeOut">
            <summary>
            写入超时时间
            </summary>
        </member>
        <member name="P:xktComm.MelsecFxSerial.DtrEnable">
            <summary>
            Dtr使能标志
            </summary>
        </member>
        <member name="P:xktComm.MelsecFxSerial.RtsEnable">
            <summary>
            Rts使能标志
            </summary>
        </member>
        <member name="P:xktComm.MelsecFxSerial.ReceiveTimeOut">
            <summary>
            读取返回报文超时时间
            </summary>
        </member>
        <member name="P:xktComm.MelsecFxSerial.DataFormat">
            <summary>
            字节顺序
            </summary>
        </member>
        <member name="F:xktComm.MelsecFxSerial.InteractiveLock">
            <summary>
            互斥的锁对象
            </summary>
        </member>
        <member name="P:xktComm.MelsecFxSerial.SleepTime">
            <summary>
            读取缓冲区的延时时间
            </summary>
        </member>
        <member name="M:xktComm.MelsecFxSerial.Connect(System.Int32,System.String,System.Int32,System.IO.Ports.Parity,System.IO.Ports.StopBits)">
            <summary>
            打开串口
            </summary>
            <param name="iBaudRate">波特率</param>
            <param name="iPortName">串口号</param>
            <param name="iDataBits">数据位</param>
            <param name="iParity">校验位</param>
            <param name="iStopBits">停止位</param>    
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.MelsecFxSerial.DisConnect">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:xktComm.MelsecFxSerial.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="address"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.MelsecFxSerial.SendAndReceive(System.Byte[],System.Byte[]@)">
            <summary>
            通用发送报文并接受
            </summary>
            <param name="sendByte">发送字节数组</param>
            <param name="response">返回字节数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:xktComm.ByteTransformHelper">
            <summary>
            所有数据转换类的静态辅助方法
            Static helper method for all data conversion classes
            </summary>
        </member>
        <member name="M:xktComm.ByteTransformHelper.GetResultFromBytes``1(xktComm.XktResult{System.Byte[]},System.Func{System.Byte[],``0})">
            <summary>
            结果转换操作的基础方法，需要支持类型，及转换的委托
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="result">源</param>
            <param name="translator">实际转换的委托</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:xktComm.ByteTransformHelper.GetResultFromArray``1(xktComm.XktResult{``0[]})">
            <summary>
            结果转换操作的基础方法，需要支持类型，及转换的委托
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="result">源结果</param>
            <returns>转换结果</returns>
        </member>
        <member name="F:xktComm.Common.LinkDataType.UShort">
            <summary>
            16位无符号
            </summary>
        </member>
        <member name="F:xktComm.Common.LinkDataType.Short">
            <summary>
            16位有符号
            </summary>
        </member>
        <member name="F:xktComm.Common.LinkDataType.UInt">
            <summary>
            32位无符号
            </summary>
        </member>
        <member name="F:xktComm.Common.LinkDataType.Int">
            <summary>
            32位有符号
            </summary>
        </member>
        <member name="F:xktComm.Common.LinkDataType.Hex">
            <summary>
            16位16进制数
            </summary>
        </member>
        <member name="F:xktComm.Common.LinkDataType.None">
            <summary>
            默认
            </summary>
        </member>
        <member name="T:xktComm.Common.ComplexDataType">
            <summary>
            复杂数据类型
            </summary>
        </member>
        <member name="T:xktComm.Common.DataFormat">
            <summary>
            字节序
            </summary>
        </member>
        <member name="F:xktComm.Common.DataFormat.ABCD">
            <summary>
            按照顺序排序
            </summary>
        </member>
        <member name="F:xktComm.Common.DataFormat.BADC">
            <summary>
            按照单字反转
            </summary>
        </member>
        <member name="F:xktComm.Common.DataFormat.CDAB">
            <summary>
            按照双字反转
            </summary>
        </member>
        <member name="F:xktComm.Common.DataFormat.DCBA">
            <summary>
            按照倒序排序
            </summary>
        </member>
        <member name="T:xktComm.Common.SimpleHybirdLock">
            <summary>
            一个简单的混合线程同步锁，采用了基元用户加基元内核同步构造实现
            </summary>
        </member>
        <member name="M:xktComm.Common.SimpleHybirdLock.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="F:xktComm.Common.SimpleHybirdLock.m_waiters">
            <summary>
            基元用户模式构造同步锁
            </summary>
        </member>
        <member name="F:xktComm.Common.SimpleHybirdLock.m_waiterLock">
            <summary>
            基元内核模式构造同步锁
            </summary>
        </member>
        <member name="M:xktComm.Common.SimpleHybirdLock.Enter">
            <summary>
            获取锁
            </summary>
        </member>
        <member name="M:xktComm.Common.SimpleHybirdLock.Leave">
            <summary>
            离开锁
            </summary>
        </member>
        <member name="P:xktComm.Common.SimpleHybirdLock.IsWaitting">
            <summary>
            获取当前锁是否在等待当中
            </summary>
        </member>
        <member name="P:xktComm.DeviceAddressBase.Address">
            <summary>
            起始地址
            </summary>
        </member>
        <member name="M:xktComm.DeviceAddressBase.Parse(System.String)">
            <summary>
            解析字符串的地址
            </summary>
            <param name="address">地址信息</param>
        </member>
        <member name="M:xktComm.DeviceAddressBase.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
            <returns>字符串数据</returns>
        </member>
        <member name="T:xktComm.KeyenceLink">
            <summary>
            基恩士Link通信库
            </summary>
        </member>
        <member name="P:xktComm.KeyenceLink.SendTimeOut">
            <summary>
            发送超时事件
            </summary>
        </member>
        <member name="P:xktComm.KeyenceLink.ReceiveTimeOut">
            <summary>
            接收超时事件
            </summary>
        </member>
        <member name="P:xktComm.KeyenceLink.WaitTimes">
            <summary>
            接受返回报文等待次数，每次为5ms
            </summary>
        </member>
        <member name="M:xktComm.KeyenceLink.Connect(System.String,System.Int32)">
            <summary>
            建立与PLC的连接
            </summary>
            <param name="Ip">IP地址</param>
            <param name="Cpu">CPU类型</param>
            <param name="Rack">机架号</param>
            <param name="Slot">插槽号</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.KeyenceLink.SendAndReceive(System.String)">
            <summary>
            发送报文并接收返回值
            </summary>
            <param name="SendStr"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.KeyenceLink.SendAndReceive(System.Byte[])">
            <summary>
            发送报文并接收返回值
            </summary>
            <param name="SendByte"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.MelsecProtocolType">
            <summary>
            三菱MC协议类型
            </summary>
        </member>
        <member name="F:xktComm.MelsecProtocolType.MCBinary">
            <summary>
            MC二进制
            </summary>
        </member>
        <member name="F:xktComm.MelsecProtocolType.MCASCII">
            <summary>
            MC ASCII
            </summary>
        </member>
        <member name="F:xktComm.MelsecProtocolType.A1EBinary">
            <summary>
            MC A1E
            </summary>
        </member>
        <member name="T:xktComm.Melsec">
            <summary>
            三菱MC协议通信库
            </summary>
        </member>
        <member name="P:xktComm.Melsec.DataFormat">
            <summary>
            字节顺序
            </summary>
        </member>
        <member name="P:xktComm.Melsec.ConnectTimeOut">
            <summary>
            连接超时时间
            </summary>
        </member>
        <member name="M:xktComm.Melsec.#ctor(xktComm.MelsecProtocolType,System.Boolean,xktComm.Common.DataFormat)">
            <summary>
            构造方法，传递参数
            </summary>
            <param name="Protocol"></param>
            <param name="IsFX5U"></param>
            <param name="dataformat"></param>
        </member>
        <member name="M:xktComm.Melsec.Connect(System.String,System.Int32)">
            <summary>
            建立连接
            </summary>
            <param name="Ip">IP地址</param>
            <param name="Port">端口号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.Melsec.DisConnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:xktComm.Melsec.ReadBytes(System.String,System.UInt16)">
            <summary>
            读取字节数组
            </summary>
            <param name="startAddress">地址  D0  X0</param>
            <param name="length">长度  10</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.Melsec.Readbool(System.String,System.Boolean@)">
            <summary>
            读取单个布尔类型
            </summary>
            <param name="address">X0</param>
            <param name="value">返回值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.Melsec.Readshort(System.String,System.Int16@)">
            <summary>
            读取单个Short类型
            </summary>
            <param name="address">D0</param>
            <param name="value">返回值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.Melsec.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="address">写入地址</param>
            <param name="value">写入值</param>
            <param name="vartype">数据类型</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.Melsec.Write(System.String,System.Boolean)">
            <summary>
            单个写入方法
            </summary>
            <param name="address">地址</param>
            <param name="value">值</param>
            <returns>返回</returns>
        </member>
        <member name="P:xktComm.MelsecMC.IsFx5U">
            <summary>
            设置是否为FX5U，FX5U的XY存储区为8进制
            </summary>
        </member>
        <member name="P:xktComm.MelsecMC.NetworkNumber">
            <summary>
            网络号，通常为0
            </summary>
            <remarks>
            依据PLC的配置而配置，如果PLC配置了1，那么此处也填0，如果PLC配置了2，此处就填2，测试不通的话，继续测试0
            </remarks>
        </member>
        <member name="P:xktComm.MelsecMC.NetworkStationNumber">
            <summary>
            网络站号，通常为0
            </summary>
            <remarks>
            依据PLC的配置而配置，如果PLC配置了1，那么此处也填0，如果PLC配置了2，此处就填2，测试不通的话，继续测试0
            </remarks>
        </member>
        <member name="P:xktComm.MelsecMC.WaitTimes">
            <summary>
            接受返回报文等待次数，每次为5ms
            </summary>
        </member>
        <member name="P:xktComm.MelsecMC.ConnectTimeOut">
            <summary>
            连接超时时间
            </summary>
        </member>
        <member name="M:xktComm.MelsecMC.Connect(System.String,System.Int32)">
            <summary>
            建立与PLC的连接
            </summary>
            <param name="Ip">IP地址</param>
            <param name="Port">CPU类型</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.MelsecMC.ReadBool(System.String,System.UInt16)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <remarks>
            地址支持的列表如下：
            <list type="table">
              <listheader>
                <term>地址名称</term>
                <term>示例</term>
                <term>地址进制</term>
              </listheader>
              <item>
                <term>内部继电器</term>
                <term>M100,M200</term>
                <term>10</term>
              </item>
              <item>
                <term>输入继电器</term>
                <term>X100,X1A0</term>
                <term>16</term>
              </item>
              <item>
                <term>输出继电器</term>
                <term>Y100,Y1A0</term>
                <term>16</term>
              </item>
               <item>
                <term>锁存继电器</term>
                <term>L100,L200</term>
                <term>10</term>
              </item>
              <item>
                <term>报警器</term>
                <term>F100,F200</term>
                <term>10</term>
              </item>
              <item>
                <term>边沿继电器</term>
                <term>V100,V200</term>
                <term>10</term>
              </item>
              <item>
                <term>链接继电器</term>
                <term>B100,B1A0</term>
                <term>16</term>
              </item>
               <item>
                <term>步进继电器</term>
                <term>S100,S200</term>
                <term>10</term>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:xktComm.MelsecMC.ReadBool(System.String)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>参照 <see cref="M:xktComm.MelsecMC.ReadBool(System.String,System.UInt16)"/> 方法 </example>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            根据变量地址、变量值及类型写入
            </summary>
            <param name="address"></param>
            <param name="value"></param>
            <param name="vartype"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <returns>结果</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.Boolean)">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据，长度为8的倍数</param>
            <example>
            详细请查看<see cref="M:xktComm.MelsecMC.Write(System.String,System.Boolean[])"/>方法的示例
            </example>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，可以指定任意的长度</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.Int16[])">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.Int16)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.UInt16[])">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.UInt16)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.Int32[])">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.UInt32[])">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.UInt32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.Single[])">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.Single)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.Int64[])">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.Int64)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.UInt64[])">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.UInt64)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.Double[])">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.Double)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMC.Write(System.String,System.String,System.Text.Encoding)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMC.BuildReadCommand(System.String,System.UInt16,System.Byte,System.Byte)">
            <summary>
            根据类型地址长度确认需要读取的指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="length">长度</param>
            <param name="networkNumber">网络号</param>
            <param name="networkStationNumber">网络站号</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:xktComm.MelsecMC.BuildWriteCommand(System.String,System.Byte[],System.Byte,System.Byte)">
            <summary>
            根据类型地址以及需要写入的数据来生成指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值，对于写入位地址来说，应该传入{0x01,0x00,0x01} 通断通这样的数组</param>
            <param name="networkNumber">网络号</param>
            <param name="networkStationNumber">网络站号</param>
            <returns>解析后的指令</returns>
        </member>
        <member name="M:xktComm.MelsecMC.ExtractActualData(System.Byte[],System.Boolean)">
            <summary>
            从PLC反馈的数据中提取出实际的数据内容，需要传入反馈数据，是否位读取
            </summary>
            <param name="response">反馈的数据内容</param>
            <param name="isBit">是否位读取</param>
            <returns>解析后的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMC.SendAndReceive(System.Byte[])">
            <summary>
            发送报文并接收返回值
            </summary>
            <param name="SendByte"></param>
            <returns></returns>
        </member>
        <member name="P:xktComm.MelsecMCAscii.IsFx5U">
            <summary>
            设置是否为FX5U，FX5U的XY存储区为8进制
            </summary>
        </member>
        <member name="P:xktComm.MelsecMCAscii.NetworkNumber">
            <summary>
            网络号，通常为0
            </summary>
            <remarks>
            依据PLC的配置而配置，如果PLC配置了1，那么此处也填0，如果PLC配置了2，此处就填2，测试不通的话，继续测试0
            </remarks>
        </member>
        <member name="P:xktComm.MelsecMCAscii.NetworkStationNumber">
            <summary>
            网络站号，通常为0
            </summary>
            <remarks>
            依据PLC的配置而配置，如果PLC配置了1，那么此处也填0，如果PLC配置了2，此处就填2，测试不通的话，继续测试0
            </remarks>
        </member>
        <member name="P:xktComm.MelsecMCAscii.WaitTimes">
            <summary>
            接受返回报文等待次数，每次为5ms
            </summary>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Connect(System.String,System.Int32)">
            <summary>
            建立与PLC的连接
            </summary>
            <param name="Ip">IP地址</param>
            <param name="Port">CPU类型</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Read(System.String,System.UInt16)">
            <summary>
            从三菱PLC中读取想要的数据，返回读取结果
            </summary>
            <param name="address">读取地址，格式为"M100","D100","W1A0"</param>
            <param name="length">读取的数据长度，字最大值960，位最大值7168</param>
            <returns>带成功标志的结果数据对象</returns>
            <remarks>
            地址支持的列表如下：
            <list type="table">
              <listheader>
                <term>地址名称</term>
                <term>示例</term>
                <term>地址进制</term>
              </listheader>
              <item>
                <term>数据寄存器</term>
                <term>D1000,D2000</term>
                <term>10</term>
              </item>
              <item>
                <term>链接寄存器</term>
                <term>W100,W1A0</term>
                <term>16</term>
              </item>
              <item>
                <term>文件寄存器</term>
                <term>R100,R200</term>
                <term>10</term>
              </item>
              <item>
                <term>ZR文件寄存器</term>
                <term>ZR100,ZR2A0</term>
                <term>16</term>
              </item>
              <item>
                <term>变址寄存器</term>
                <term>Z100,Z200</term>
                <term>10</term>
              </item>
              <item>
                <term>定时器的值</term>
                <term>T100,T200</term>
                <term>10</term>
              </item>
              <item>
                <term>计数器的值</term>
                <term>C100,C200</term>
                <term>10</term>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:xktComm.MelsecMCAscii.ReadBool(System.String,System.UInt16)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <remarks>
            地址支持的列表如下：
            <list type="table">
              <listheader>
                <term>地址名称</term>
                <term>示例</term>
                <term>地址进制</term>
              </listheader>
              <item>
                <term>内部继电器</term>
                <term>M100,M200</term>
                <term>10</term>
              </item>
              <item>
                <term>输入继电器</term>
                <term>X100,X1A0</term>
                <term>16</term>
              </item>
              <item>
                <term>输出继电器</term>
                <term>Y100,Y1A0</term>
                <term>16</term>
              </item>
               <item>
                <term>锁存继电器</term>
                <term>L100,L200</term>
                <term>10</term>
              </item>
              <item>
                <term>报警器</term>
                <term>F100,F200</term>
                <term>10</term>
              </item>
              <item>
                <term>边沿继电器</term>
                <term>V100,V200</term>
                <term>10</term>
              </item>
              <item>
                <term>链接继电器</term>
                <term>B100,B1A0</term>
                <term>16</term>
              </item>
               <item>
                <term>步进继电器</term>
                <term>S100,S200</term>
                <term>10</term>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:xktComm.MelsecMCAscii.ReadBool(System.String)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>参照 <see cref="M:xktComm.MelsecMCAscii.ReadBool(System.String,System.UInt16)"/> 方法 </example>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            根据变量地址、变量值及类型写入
            </summary>
            <param name="address"></param>
            <param name="value"></param>
            <param name="vartype"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <returns>结果</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.Boolean)">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据，长度为8的倍数</param>
            <example>
            详细请查看<see cref="M:xktComm.MelsecMCAscii.Write(System.String,System.Boolean[])"/>方法的示例
            </example>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，可以指定任意的长度</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.Int16[])">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.Int16)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.UInt16[])">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.UInt16)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.Int32[])">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.UInt32[])">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.UInt32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.Single[])">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.Single)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.Int64[])">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.Int64)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.UInt64[])">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.UInt64)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.Double[])">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.Double)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.Write(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.WriteUnicodeString(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.BuildReadCommand(System.String,System.UInt16,System.Byte,System.Byte)">
            <summary>
            根据类型地址长度确认需要读取的报文
            </summary>
            <param name="address">起始地址</param>
            <param name="length">长度</param>
            <param name="networkNumber">网络号信息</param>
            <param name="networkStationNumber">网络站号信息</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.BuildWriteCommand(System.String,System.Byte[],System.Byte,System.Byte)">
            <summary>
            根据类型地址以及需要写入的数据来生成报文
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入数据的实际值</param>
            <param name="networkNumber">网络号</param>
            <param name="networkStationNumber">网络站号</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.ExtractActualData(System.Byte[],System.Boolean)">
            <summary>
            从PLC反馈的数据中提取出实际的数据内容，需要传入反馈数据，是否位读取
            </summary>
            <param name="response">反馈的数据内容</param>
            <param name="isBit">是否位读取</param>
            <returns>解析后的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecMCAscii.SendAndReceive(System.Byte[])">
            <summary>
            发送报文并接收返回值
            </summary>
            <param name="SendByte"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.ByteTransformBase">
            <summary>
            数据转换类的基础，提供了一些基础的方法实现.
            </summary>
        </member>
        <member name="M:xktComm.ByteTransformBase.#ctor">
            <summary>
            实例化一个默认的对象
            </summary>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransBool(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取出bool结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">位的索引</param>
            <returns>bool对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransBool(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取出bool数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">位的索引</param>
            <param name="length">bool长度</param>
            <returns>bool数组</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取byte结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>byte对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取byte数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>byte数组对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取short结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>short对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransInt16(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取short数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>short数组对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransUInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ushort结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ushort对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransUInt16(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取ushort数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>ushort数组对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取int结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>int对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取int数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>int数组对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransUInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取uint结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>uint对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransUInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取uint数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>uint数组对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取long结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>long对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransInt64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取long数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>long数组对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransUInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ulong结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ulong对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransUInt64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取ulong数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>ulong数组对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransSingle(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取float结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>float对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransSingle(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取float数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>float数组对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransDouble(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取double结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>double对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransDouble(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取double数组结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>double数组对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransString(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            从缓存中提取string结果，使用指定的编码
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <param name="length">byte数组长度</param>
            <param name="encoding">字符串的编码</param>
            <returns>string对象</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.Boolean)">
            <summary>
            bool变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.Boolean[])">
            <summary>
            bool数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.Byte)">
            <summary>
            byte变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.Int16)">
            <summary>
            short变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.Int16[])">
            <summary>
            short数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.UInt16)">
            <summary>
            ushort变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.UInt16[])">
            <summary>
            ushort数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.Int32)">
            <summary>
            int变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.Int32[])">
            <summary>
            int数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.UInt32)">
            <summary>
            uint变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.UInt32[])">
            <summary>
            uint数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.Int64)">
            <summary>
            long变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.Int64[])">
            <summary>
            long数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.UInt64)">
            <summary>
            ulong变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.UInt64[])">
            <summary>
            ulong数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.Single)">
            <summary>
            float变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.Single[])">
            <summary>
            float数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.Double)">
            <summary>
            double变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.Double[])">
            <summary>
            double数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.TransByte(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码字符串转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <param name="encoding">字符串的编码方式</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.ByteTransDataFormat2(System.Byte[],System.Int32)">
            <summary>
            反转多字节的数据信息
            </summary>
            <param name="value">数据字节</param>
            <param name="index">起始索引，默认值为0</param>
            <returns>实际字节信息</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.ByteTransDataFormat4(System.Byte[],System.Int32)">
            <summary>
            反转多字节的数据信息
            </summary>
            <param name="value">数据字节</param>
            <param name="index">起始索引，默认值为0</param>
            <returns>实际字节信息</returns>
        </member>
        <member name="M:xktComm.ByteTransformBase.ByteTransDataFormat8(System.Byte[],System.Int32)">
            <summary>
            反转多字节的数据信息
            </summary>
            <param name="value">数据字节</param>
            <param name="index">起始索引，默认值为0</param>
            <returns>实际字节信息</returns>
        </member>
        <member name="P:xktComm.ByteTransformBase.DataFormat">
            <summary>
            获取或设置数据解析的格式，默认DCBA，也即是无修改，可选ABCD,BADC，CDAB，DCBA格式，对于Modbus协议来说，默认ABCD
            </summary>
        </member>
        <member name="T:xktComm.ControlFactory">
            <summary>
            Summary description for FormControlFactory.
            </summary>
        </member>
        <member name="T:xktComm.CBFormCtrl">
            <summary>
            Summary description for CBFormCtrl.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:xktComm.ESD.Connect(System.String,System.Int32)" -->
        <member name="M:xktComm.ESD.GetbitValue(System.Byte,System.Int32)">
            <summary>
            根据字节获取位
            </summary>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ESD.SendAndReceive(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            发送报文并接受
            </summary>
            <param name="mSocket"></param>
            <param name="SendByte"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ESD.GetByteArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            自定义截取字节数组
            </summary>
            <param name="byteArr"></param>
            <param name="start"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.ModbusAddress">
            <summary>
            Modbus协议地址格式，可以携带站号，功能码，地址信息
            </summary>
        </member>
        <member name="M:xktComm.ModbusAddress.#ctor">
            <summary>
            实例化一个默认的对象
            </summary>
        </member>
        <member name="M:xktComm.ModbusAddress.#ctor(System.String)">
            <summary>
            实例化一个默认的对象，使用默认的地址初始化
            </summary>
            <param name="address">传入的地址信息，支持富地址，例如s=2;x=3;100</param>
        </member>
        <member name="M:xktComm.ModbusAddress.#ctor(System.String,System.Byte)">
            <summary>
            实例化一个默认的对象，使用默认的地址初始化
            </summary>
            <param name="address">传入的地址信息，支持富地址，例如s=2;x=3;100</param>
            <param name="function">默认的功能码信息</param>
        </member>
        <member name="M:xktComm.ModbusAddress.#ctor(System.String,System.Byte,System.Byte)">
            <summary>
            实例化一个默认的对象，使用默认的地址初始化
            </summary>
            <param name="address">传入的地址信息，支持富地址，例如s=2;x=3;100</param>
            <param name="station">站号信息</param>
            <param name="function">默认的功能码信息</param>
        </member>
        <member name="M:xktComm.ModbusAddress.#ctor(System.Byte,System.Byte,System.UInt16)">
            <summary>
            实例化一个默认的对象，使用默认的地址初始化
            </summary>
            <param name="station">站号信息</param>
            <param name="function">功能码信息</param>
            <param name="address">地址信息</param>
        </member>
        <member name="P:xktComm.ModbusAddress.Station">
            <summary>
            站号信息
            </summary>
        </member>
        <member name="P:xktComm.ModbusAddress.Function">
            <summary>
            功能码
            </summary>
        </member>
        <member name="M:xktComm.ModbusAddress.Parse(System.String)">
            <summary>
            解析Modbus的地址码
            </summary>
            <param name="address">地址数据信息</param>
        </member>
        <member name="M:xktComm.ModbusAddress.AddressAdd(System.Int32)">
            <summary>
            地址新增指定的数
            </summary>
            <param name="value">数据值信息</param>
            <returns>新增后的地址信息</returns>
        </member>
        <member name="M:xktComm.ModbusAddress.AddressAdd">
            <summary>
            地址新增1
            </summary>
            <returns>新增后的地址信息</returns>
        </member>
        <member name="M:xktComm.ModbusAddress.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
            <returns>地址表示形式</returns>
        </member>
        <member name="T:xktComm.ModbusInfo">
            <summary>
            Modbus协议相关的一些信息
            </summary>
        </member>
        <member name="F:xktComm.ModbusInfo.ReadCoil">
            <summary>
            读取线圈
            </summary>
        </member>
        <member name="F:xktComm.ModbusInfo.ReadDiscrete">
            <summary>
            读取离散量
            </summary>
        </member>
        <member name="F:xktComm.ModbusInfo.ReadRegister">
            <summary>
            读取寄存器
            </summary>
        </member>
        <member name="F:xktComm.ModbusInfo.ReadInputRegister">
            <summary>
            读取输入寄存器
            </summary>
        </member>
        <member name="F:xktComm.ModbusInfo.WriteOneCoil">
            <summary>
            写单个线圈
            </summary>
        </member>
        <member name="F:xktComm.ModbusInfo.WriteOneRegister">
            <summary>
            写单个寄存器
            </summary>
        </member>
        <member name="F:xktComm.ModbusInfo.WriteCoil">
            <summary>
            写多个线圈
            </summary>
        </member>
        <member name="F:xktComm.ModbusInfo.WriteRegister">
            <summary>
            写多个寄存器
            </summary>
        </member>
        <member name="F:xktComm.ModbusInfo.FunctionCodeNotSupport">
            <summary>
            不支持该功能码
            </summary>
        </member>
        <member name="F:xktComm.ModbusInfo.FunctionCodeOverBound">
            <summary>
            该地址越界
            </summary>
        </member>
        <member name="F:xktComm.ModbusInfo.FunctionCodeQuantityOver">
            <summary>
            读取长度超过最大值
            </summary>
        </member>
        <member name="F:xktComm.ModbusInfo.FunctionCodeReadWriteException">
            <summary>
            读写异常
            </summary>
        </member>
        <member name="M:xktComm.ModbusInfo.BuildReadModbusCommand(System.String,System.UInt16,System.Byte,System.Boolean,System.Byte)">
            <summary>
            构建Modbus读取数据的核心报文，需要指定地址，长度，站号，是否起始地址0，默认的功能码应该根据bool或是字来区分
            </summary>
            <param name="address">Modbus的富文本地址</param>
            <param name="length">读取的数据长度</param>
            <param name="station">默认的站号信息</param>
            <param name="isStartWithZero">起始地址是否从0开始</param>
            <param name="defaultFunction">默认的功能码</param>
            <returns>包含最终命令的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusInfo.BuildReadModbusCommand(xktComm.ModbusAddress,System.UInt16)">
            <summary>
            构建Modbus读取数据的核心报文，需要指定地址，长度，站号，是否起始地址0，默认的功能码应该根据bool或是字来区分
            </summary>
            <param name="mAddress">Modbus的富文本地址</param>
            <param name="length">读取的数据长度</param>
            <returns>包含最终命令的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusInfo.BuildWriteBoolModbusCommand(System.String,System.Boolean[],System.Byte,System.Boolean,System.Byte)">
            <summary>
            构建Modbus写入bool数据的核心报文，需要指定地址，长度，站号，是否起始地址0，默认的功能码
            </summary>
            <param name="address">Modbus的富文本地址</param>
            <param name="values">bool数组的信息</param>
            <param name="station">默认的站号信息</param>
            <param name="isStartWithZero">起始地址是否从0开始</param>
            <param name="defaultFunction">默认的功能码</param>
            <returns>包含最终命令的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusInfo.BuildWriteBoolModbusCommand(xktComm.ModbusAddress,System.Boolean[])">
            <summary>
            构建Modbus写入bool数据的核心报文，需要指定地址，长度，站号，是否起始地址0，默认的功能码
            </summary>
            <param name="mAddress">Modbus的富文本地址</param>
            <param name="values">bool数组的信息</param>
            <returns>包含最终命令的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusInfo.BuildWriteWordModbusCommand(System.String,System.Byte[],System.Byte,System.Boolean,System.Byte)">
            <summary>
            构建Modbus写入字数据的核心报文，需要指定地址，长度，站号，是否起始地址0，默认的功能码
            </summary>
            <param name="address">Modbus的富文本地址</param>
            <param name="values">bool数组的信息</param>
            <param name="station">默认的站号信息</param>
            <param name="isStartWithZero">起始地址是否从0开始</param>
            <param name="defaultFunction">默认的功能码</param>
            <returns>包含最终命令的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusInfo.BuildWriteWordModbusCommand(xktComm.ModbusAddress,System.Byte[])">
            <summary>
            构建Modbus写入字数据的核心报文，需要指定地址，长度，站号，是否起始地址0，默认的功能码
            </summary>
            <param name="mAddress">Modbus的富文本地址</param>
            <param name="values">bool数组的信息</param>
            <returns>包含最终命令的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusInfo.ExtractActualData(System.Byte[])">
            <summary>
            从返回的modbus的书内容中，提取出真实的数据，适用于写入和读取操作
            </summary>
            <param name="response">返回的核心modbus报文信息</param>
            <returns>结果数据内容</returns>
        </member>
        <member name="M:xktComm.ModbusInfo.PackCommandToTcp(System.Byte[],System.UInt16)">
            <summary>
            将modbus指令打包成Modbus-Tcp指令
            </summary>
            <param name="value">Modbus指令</param>
            <param name="id">消息的序号</param>
            <returns>Modbus-Tcp指令</returns>
        </member>
        <member name="M:xktComm.ModbusInfo.ExplodeTcpCommandToCore(System.Byte[])">
            <summary>
            将modbus-tcp的数据重新还原成modbus数据
            </summary>
            <param name="value">modbus-tcp的报文</param>
            <returns>modbus数据报文</returns>
        </member>
        <member name="M:xktComm.ModbusInfo.ExplodeRtuCommandToCore(System.Byte[])">
            <summary>
            将modbus-rtu的数据重新还原成modbus数据
            </summary>
            <param name="value">modbus-rtu的报文</param>
            <returns>modbus数据报文</returns>
        </member>
        <member name="M:xktComm.ModbusInfo.PackCommandToRtu(System.Byte[])">
            <summary>
            将modbus指令打包成Modbus-Rtu指令
            </summary>
            <param name="value">Modbus指令</param>
            <returns>Modbus-Rtu指令</returns>
        </member>
        <member name="M:xktComm.ModbusInfo.TransRtuToAsciiPackCommand(System.Byte[])">
            <summary>
            将一个modbus-rtu的数据报文，转换成modbus-ascii的数据报文
            </summary>
            <param name="value">modbus-rtu的完整报文，携带相关的校验码</param>
            <returns>可以用于直接发送的modbus-ascii的报文</returns>
        </member>
        <member name="M:xktComm.ModbusInfo.TransAsciiPackCommandToRtu(System.Byte[])">
            <summary>
            将一个modbus-ascii的数据报文，转换成的modbus核心数据报文
            </summary>
            <param name="value">modbus-ascii的完整报文，携带相关的校验码</param>
            <returns>可以用于直接发送的modbus的报文</returns>
        </member>
        <member name="M:xktComm.ModbusInfo.AnalysisAddress(System.String,System.Byte,System.Boolean,System.Byte)">
            <summary>
            分析Modbus协议的地址信息，该地址适应于tcp及rtu模式
            </summary>
            <param name="address">带格式的地址，比如"100"，"x=4;100"，"s=1;100","s=1;x=4;100"</param>
            <param name="defaultStation"></param>
            <param name="isStartWithZero">起始地址是否从0开始</param>
            <param name="defaultFunction">默认的功能码信息</param>
            <returns>转换后的地址信息</returns>
        </member>
        <member name="M:xktComm.ModbusInfo.GetDescriptionByErrorCode(System.Byte)">
            <summary>
            通过错误码来获取到对应的文本消息
            </summary>
            <param name="code">错误码</param>
            <returns>错误的文本描述</returns>
        </member>
        <member name="T:xktComm.ModBusMonitorAddress">
            <summary>
            服务器端提供的数据监视服务
            </summary>
        </member>
        <member name="P:xktComm.ModBusMonitorAddress.Address">
            <summary>
            本次数据监视的地址
            </summary>
        </member>
        <member name="E:xktComm.ModBusMonitorAddress.OnWrite">
            <summary>
            数据写入时触发的事件
            </summary>
        </member>
        <member name="E:xktComm.ModBusMonitorAddress.OnChange">
            <summary>
            数据改变时触发的事件
            </summary>
        </member>
        <member name="M:xktComm.ModBusMonitorAddress.SetValue(System.Int16)">
            <summary>
            强制设置触发事件
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:xktComm.ModBusMonitorAddress.SetChangeValue(System.Int16,System.Int16)">
            <summary>
            强制设置触发值变更事件
            </summary>
            <param name="before">变更前的值</param>
            <param name="after">变更后的值</param>
        </member>
        <member name="M:xktComm.ModbusTcpServer.#ctor">
            <summary>
            实例化一个Modbus Tcp的服务器，支持数据读写操作
            </summary>
        </member>
        <member name="P:xktComm.ModbusTcpServer.ByteTransform">
            <summary>
            系统的数据转换接口
            </summary>
        </member>
        <member name="P:xktComm.ModbusTcpServer.DataFormat">
            <summary>
            获取或设置数据解析的格式，默认ABCD，可选BADC，CDAB，DCBA格式
            </summary>
            <remarks>
            对于Int32,UInt32,float,double,Int64,UInt64类型来说，存在多地址的电脑情况，需要和服务器进行匹配
            </remarks>
        </member>
        <member name="P:xktComm.ModbusTcpServer.IsStringReverse">
            <summary>
            字符串数据是否按照字来反转
            </summary>
        </member>
        <member name="P:xktComm.ModbusTcpServer.Station">
            <summary>
            获取或设置服务器的站号信息，对于rtu模式，只有站号对了，才会反馈回数据信息。默认为1。
            </summary>
        </member>
        <member name="M:xktComm.ModbusTcpServer.SaveToBytes">
            <summary>
            将数据源的内容生成原始数据，等待缓存
            </summary>
            <returns>原始的数据内容</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.LoadFromBytes(System.Byte[])">
            <summary>
            从原始的数据复原数据
            </summary>
            <param name="content">原始的数据</param>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadCoil(System.String)">
            <summary>
            读取地址的线圈的通断情况
            </summary>
            <param name="address">起始地址，示例："100"</param>
            <returns><c>True</c>或是<c>False</c></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadCoil(System.String,System.UInt16)">
            <summary>
            批量读取地址的线圈的通断情况
            </summary>
            <param name="address">起始地址，示例："100"</param>
            <param name="length">读取长度</param>
            <returns><c>True</c>或是<c>False</c></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:xktComm.ModbusTcpServer.WriteCoil(System.String,System.Boolean)">
            <summary>
            写入线圈的通断值
            </summary>
            <param name="address">起始地址，示例："100"</param>
            <param name="data">是否通断</param>
            <returns><c>True</c>或是<c>False</c></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:xktComm.ModbusTcpServer.WriteCoil(System.String,System.Boolean[])">
            <summary>
            写入线圈数组的通断值
            </summary>
            <param name="address">起始地址，示例："100"</param>
            <param name="data">是否通断</param>
            <returns><c>True</c>或是<c>False</c></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadDiscrete(System.String)">
            <summary>
            读取地址的离散线圈的通断情况
            </summary>
            <param name="address">起始地址，示例："100"</param>
            <returns><c>True</c>或是<c>False</c></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadDiscrete(System.String,System.UInt16)">
            <summary>
            批量读取地址的离散线圈的通断情况
            </summary>
            <param name="address">起始地址，示例："100"</param>
            <param name="length">读取长度</param>
            <returns><c>True</c>或是<c>False</c></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:xktComm.ModbusTcpServer.WriteDiscrete(System.String,System.Boolean)">
            <summary>
            写入离散线圈的通断值
            </summary>
            <param name="address">起始地址，示例："100"</param>
            <param name="data">是否通断</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:xktComm.ModbusTcpServer.WriteDiscrete(System.String,System.Boolean[])">
            <summary>
            写入离散线圈数组的通断值
            </summary>
            <param name="address">起始地址，示例："100"</param>
            <param name="data">是否通断</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Read(System.String,System.UInt16)">
            <summary>
            读取自定义的寄存器的值。按照字为单位
            </summary>
            <param name="address">起始地址，示例："100"，"x=4;100"</param>
            <param name="length">数据长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns>byte数组值</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.Byte[])">
            <summary>
            写入自定义的数据到数据内存中去
            </summary>
            <param name="address">地址</param>
            <param name="value">数据值</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.Byte,System.Byte)">
            <summary>
            写入寄存器数据，指定字节数据
            </summary>
            <param name="address">起始地址，示例："100"，如果是输入寄存器："x=4;100"</param>
            <param name="high">高位数据</param>
            <param name="low">地位数据</param>
        </member>
        <member name="M:xktComm.ModbusTcpServer.CreateExceptionBack(System.Byte[],System.Byte)">
            <summary>
            创建特殊的功能标识，然后返回该信息
            </summary>
            <param name="modbusCore">modbus核心报文</param>
            <param name="error">错误码</param>
            <returns>携带错误码的modbus报文</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.CreateReadBack(System.Byte[],System.Byte[])">
            <summary>
            创建返回消息
            </summary>
            <param name="modbusCore">modbus核心报文</param>
            <param name="content">返回的实际数据内容</param>
            <returns>携带内容的modbus报文</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.CreateWriteBack(System.Byte[])">
            <summary>
            创建写入成功的反馈信号
            </summary>
            <param name="modbus">modbus核心报文</param>
            <returns>携带成功写入的信息</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ServerStart(System.Int32)">
            <summary>
            启动服务器的引擎
            </summary>
            <param name="port">指定一个端口号</param>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ServerClose">
            <summary>
            关闭服务器的引擎
            </summary>
        </member>
        <member name="M:xktComm.ModbusTcpServer.AsyncAcceptCallback(System.IAsyncResult)">
            <summary>
            异步传入的连接申请请求
            </summary>
            <param name="iar">异步对象</param>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ThreadPoolLogin(System.Object)">
            <summary>
            用于登录的回调方法
            </summary>
            <param name="obj">socket对象</param>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ThreadPoolLogin(System.Net.Sockets.Socket,System.Net.IPEndPoint)">
            <summary>
            用于登录的回调方法
            </summary>
            <param name="socket">socket对象</param>
            <param name="endPoint">远程的终结点</param>
        </member>
        <member name="F:xktComm.ModbusTcpServer.CoreSocket">
            <summary>
            通讯类的核心套接字
            </summary>
        </member>
        <member name="P:xktComm.ModbusTcpServer.Port">
            <summary>
            服务器的端口号
            </summary>
            <remarks>需要在服务器启动之前设置为有效</remarks>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadInt16(System.String)">
            <summary>
            读取设备的short类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadInt16(System.String,System.UInt16)">
            <summary>
            读取设备的short类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadUInt16(System.String)">
            <summary>
            读取设备的ushort数据类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadUInt16(System.String,System.UInt16)">
            <summary>
            读取设备的ushort类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadInt32(System.String)">
            <summary>
            读取设备的int类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadInt32(System.String,System.UInt16)">
            <summary>
            读取设备的int类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadUInt32(System.String)">
            <summary>
            读取设备的uint类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadUInt32(System.String,System.UInt16)">
            <summary>
            读取设备的uint类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadFloat(System.String)">
            <summary>
            读取设备的float类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadFloat(System.String,System.UInt16)">
            <summary>
            读取设备的float类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadInt64(System.String)">
            <summary>
            读取设备的long类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadInt64(System.String,System.UInt16)">
            <summary>
            读取设备的long类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadUInt64(System.String)">
            <summary>
            读取设备的ulong类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadUInt64(System.String,System.UInt16)">
            <summary>
            读取设备的ulong类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadDouble(System.String)">
            <summary>
            读取设备的double类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadDouble(System.String,System.UInt16)">
            <summary>
            读取设备的double类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadString(System.String,System.UInt16)">
            <summary>
            读取设备的字符串数据，编码为ASCII
            </summary>
            <param name="address">起始地址</param>
            <param name="length">地址长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.Int16[])">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.Int16)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.UInt16[])">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            </example>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.UInt16)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.Int32[])">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.UInt32[])">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.UInt32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.Single[])">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.Single)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.Int64[])">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.Int64)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.UInt64[])">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.UInt64)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.Double[])">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.Double)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.Write(System.String,System.String,System.Int32)">
            <summary>
            向设备中写入指定长度的字符串,超出截断，不够补0，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.WriteUnicodeString(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.WriteUnicodeString(System.String,System.String,System.Int32)">
            <summary>
            向设备中写入指定长度的字符串,超出截断，不够补0，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.AddSubcription(xktComm.ModBusMonitorAddress)">
            <summary>
            新增一个数据监视的任务，针对的是寄存器
            </summary>
            <param name="monitor">监视地址对象</param>
        </member>
        <member name="M:xktComm.ModbusTcpServer.RemoveSubcrption(xktComm.ModBusMonitorAddress)">
            <summary>
            移除一个数据监视的任务
            </summary>
            <param name="monitor"></param>
        </member>
        <member name="M:xktComm.ModbusTcpServer.OnRegisterBeforWrite(System.UInt16,System.Int16,System.Int16)">
            <summary>
            在数据变更后，进行触发是否产生订阅
            </summary>
            <param name="address">数据地址</param>
            <param name="before">修改之前的数</param>
            <param name="after">修改之后的数</param>
        </member>
        <member name="M:xktComm.ModbusTcpServer.CheckModbusMessageLegal(System.Byte[])">
            <summary>
            检测当前的Modbus接收的指定是否是合法的
            </summary>
            <param name="buffer">缓存数据</param>
            <returns>是否合格</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.ReadFromModbusCore(System.Byte[])">
            <summary>
            Modbus核心数据交互方法，允许重写自己来实现，报文只剩下核心的Modbus信息，去除了MPAB报头信息
            </summary>
            <param name="modbusCore">核心的Modbus报文</param>
            <returns>进行数据交互之后的结果</returns>
        </member>
        <member name="M:xktComm.ModbusTcpServer.StartSerialPort(System.String)">
            <summary>
            使用默认的参数进行初始化串口，9600波特率，8位数据位，无奇偶校验，1位停止位
            </summary>
            <param name="com">串口信息</param>
        </member>
        <member name="M:xktComm.ModbusTcpServer.StartSerialPort(System.String,System.Int32)">
            <summary>
            使用默认的参数进行初始化串口，8位数据位，无奇偶校验，1位停止位
            </summary>
            <param name="com">串口信息</param>
            <param name="baudRate">波特率</param>
        </member>
        <member name="M:xktComm.ModbusTcpServer.StartSerialPort(System.Action{System.IO.Ports.SerialPort})">
            <summary>
            使用自定义的初始化方法初始化串口的参数
            </summary>
            <param name="inni">初始化信息的委托</param>
        </member>
        <member name="M:xktComm.ModbusTcpServer.CloseSerialPort">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:xktComm.ModbusTcpServer.SerialPort_DataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            接收到串口数据的时候触发
            </summary>
            <param name="sender">串口对象</param>
            <param name="e">消息</param>
        </member>
        <member name="P:xktComm.ModbusTcpServer.IsStarted">
            <summary>
            服务器引擎是否启动
            </summary>
        </member>
        <member name="T:xktComm.ModbusTcpServer.DataReceivedDelegate">
            <summary>
            当接收到来自客户的数据信息时触发的对象，该数据可能来自tcp或是串口
            </summary>
            <param name="sender">本服务器对象</param>
            <param name="data">实际的数据信息</param>
        </member>
        <member name="E:xktComm.ModbusTcpServer.OnDataReceived">
            <summary>
            接收到数据的时候就行触发
            </summary>
        </member>
        <member name="T:xktComm.MonitorAddress">
            <summary>
            监视使用的数据缓存
            </summary>
        </member>
        <member name="F:xktComm.MonitorAddress.Address">
            <summary>
            地址
            </summary>
        </member>
        <member name="F:xktComm.MonitorAddress.ValueOrigin">
            <summary>
            原有的值
            </summary>
        </member>
        <member name="F:xktComm.MonitorAddress.ValueNew">
            <summary>
            新的值
            </summary>
        </member>
        <member name="M:xktComm.OmronFinsTCP.DisConnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:xktComm.OmronFinsTCP.Write(System.String,System.Object,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="address"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.OmronFinsTCP.SendAndReceive(System.Byte[],System.Byte[]@)">
            <summary>
            发送报文并接收返回值
            </summary>
            <param name="SendByte"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.FinsDataType">
            <summary>
            Fins协议的数据类型
            </summary>
        </member>
        <member name="T:xktComm.IByteTransform">
            <summary>
            支持转换器的基础接口
            </summary>
        </member>
        <member name="M:xktComm.IByteTransform.TransBool(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取出bool结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">位的索引</param>
            <returns>bool对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransBool(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取出bool数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">位的索引</param>
            <param name="length">bool长度</param>
            <returns>bool数组</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取byte结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>byte对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取byte数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取short结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>short对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransInt16(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取short数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>short数组对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransUInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ushort结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ushort对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransUInt16(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取ushort数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>ushort数组对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取int结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>int对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取int数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>int数组对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransUInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取uint结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>uint对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransUInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取uint数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>uint数组对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取long结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>long对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransInt64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取long数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>long数组对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransUInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ulong结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ulong对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransUInt64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取ulong数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>ulong数组对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransSingle(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取float结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>float对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransSingle(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取float数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransDouble(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取double结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>double对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransDouble(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取double数组结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransString(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            从缓存中提取string结果，使用指定的编码
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <param name="length">byte数组长度</param>
            <param name="encoding">字符串的编码</param>
            <returns>string对象</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.Boolean)">
            <summary>
            bool变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.Boolean[])">
            <summary>
            bool数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.Byte)">
            <summary>
            byte变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.Int16)">
            <summary>
            short变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.Int16[])">
            <summary>
            short数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.UInt16)">
            <summary>
            ushort变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.UInt16[])">
            <summary>
            ushort数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.Int32)">
            <summary>
            int变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.Int32[])">
            <summary>
            int数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.UInt32)">
            <summary>
            uint变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.UInt32[])">
            <summary>
            uint数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.Int64)">
            <summary>
            long变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.Int64[])">
            <summary>
            long数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.UInt64)">
            <summary>
            ulong变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.UInt64[])">
            <summary>
            ulong数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.Single)">
            <summary>
            float变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.Single[])">
            <summary>
            float数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.Double)">
            <summary>
            double变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.Double[])">
            <summary>
            double数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:xktComm.IByteTransform.TransByte(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码字符串转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <param name="encoding">字符串的编码方式</param>
            <returns>buffer数据</returns>
        </member>
        <member name="P:xktComm.IByteTransform.DataFormat">
            <summary>
            获取或设置数据解析的格式，默认ABCD，可选BADC，CDAB，DCBA格式
            </summary>
        </member>
        <member name="P:xktComm.MelsecA1E.WaitTimes">
            <summary>
            接受返回报文等待次数，每次为5ms
            </summary>
        </member>
        <member name="P:xktComm.MelsecA1E.PLCNumber">
            <summary>
            PLC编号
            </summary>
        </member>
        <member name="P:xktComm.MelsecA1E.ConnectTimeOut">
            <summary>
            接受返回报文等待次数，每次为10ms
            </summary>
        </member>
        <member name="M:xktComm.MelsecA1E.Connect(System.String,System.Int32)">
            <summary>
            建立与PLC的连接
            </summary>
            <param name="Ip">IP地址</param>
            <param name="Port">CPU类型</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Read(System.String,System.UInt16)">
            <summary>
            从三菱PLC中读取想要的数据，返回读取结果
            </summary>
            <param name="address">读取地址，格式为"M100","D100","W1A0"</param>
            <param name="length">读取的数据长度，字最大值960，位最大值7168</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.ReadBool(System.String,System.UInt16)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.ReadBool(System.String)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            根据变量地址、变量值及类型写入
            </summary>
            <param name="address"></param>
            <param name="value"></param>
            <param name="vartype"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.Boolean)">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="value">要写入的实际数据，长度为8的倍数</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，可以指定任意的长度</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.Int16[])">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.Int16)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.UInt16[])">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.UInt16)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.Int32[])">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.UInt32[])">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.UInt32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.Single[])">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.Single)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.Int64[])">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.Int64)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.UInt64[])">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.UInt64)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.Double[])">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.Double)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.Write(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.WriteUnicodeString(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.BuildReadCommand(System.String,System.UInt16,System.Byte)">
            <summary>
            根据类型地址长度确认需要读取的指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="length">长度</param>
            <param name="plcNumber">PLC编号</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.BuildWriteCommand(System.String,System.Byte[],System.Byte)">
            <summary>
            根据类型地址以及需要写入的数据来生成指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
            <param name="plcNumber">PLC编号</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.ExtractActualData(System.Byte[],System.Boolean)">
            <summary>
            从PLC反馈的数据中提取出实际的数据内容，需要传入反馈数据，是否位读取
            </summary>
            <param name="response">反馈的数据内容</param>
            <param name="isBit">是否位读取</param>
            <returns>解析后的结果对象</returns>
        </member>
        <member name="M:xktComm.MelsecA1E.SendAndReceive(System.Byte[])">
            <summary>
            发送报文并接受
            </summary>
            <param name="mSocket"></param>
            <param name="SendByte"></param>
            <returns></returns>
            <summary>
            发送报文并接收返回值
            </summary>
            <param name="SendByte"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.MelsecA1EDataType">
            <summary>
            三菱PLC的数据类型，此处包含了几个常用的类型
            </summary>
        </member>
        <member name="M:xktComm.MelsecA1EDataType.#ctor(System.Byte[],System.Byte,System.String,System.Int32)">
            <summary>
            如果您清楚类型代号，可以根据值进行扩展
            </summary>
            <param name="code">数据类型的代号</param>
            <param name="type">0或1，默认为0</param>
            <param name="asciiCode">ASCII格式的类型信息</param>
            <param name="fromBase">指示地址的多少进制的，10或是16</param>
        </member>
        <member name="P:xktComm.MelsecA1EDataType.DataCode">
            <summary>
            类型的代号值（软元件代码，用于区分软元件类型，如：D，R）
            </summary>
        </member>
        <member name="P:xktComm.MelsecA1EDataType.DataType">
            <summary>
            数据的类型，0代表按字，1代表按位
            </summary>
        </member>
        <member name="P:xktComm.MelsecA1EDataType.AsciiCode">
            <summary>
            当以ASCII格式通讯时的类型描述
            </summary>
        </member>
        <member name="P:xktComm.MelsecA1EDataType.FromBase">
            <summary>
            指示地址是10进制，还是16进制的
            </summary>
        </member>
        <member name="F:xktComm.MelsecA1EDataType.X">
            <summary>
            X输入寄存器
            </summary>
        </member>
        <member name="F:xktComm.MelsecA1EDataType.Y">
            <summary>
            Y输出寄存器
            </summary>
        </member>
        <member name="F:xktComm.MelsecA1EDataType.M">
            <summary>
            M中间寄存器
            </summary>
        </member>
        <member name="F:xktComm.MelsecA1EDataType.S">
            <summary>
            S状态寄存器
            </summary>
        </member>
        <member name="F:xktComm.MelsecA1EDataType.D">
            <summary>
            D数据寄存器
            </summary>
        </member>
        <member name="F:xktComm.MelsecA1EDataType.R">
            <summary>
            R文件寄存器
            </summary>
        </member>
        <member name="M:xktComm.MelsecHelper.McA1EAnalysisAddress(System.String)">
            <summary>
            解析A1E协议数据地址
            </summary>
            <param name="address">数据地址</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.MelsecHelper.McAnalysisAddress(System.String,System.Boolean)">
            <summary>
            解析数据地址
            </summary>
            <param name="address">数据地址</param>
            <returns>解析值</returns>
        </member>
        <member name="M:xktComm.MelsecHelper.PanasonicAnalysisAddress(System.String)">
            <summary>
            解析数据地址
            </summary>
            <param name="address">数据地址</param>
            <returns>解析值</returns>
        </member>
        <member name="M:xktComm.MelsecHelper.BuildBytesFromData(System.Byte)">
            <summary>
            从字节构建一个ASCII格式的地址字节
            </summary>
            <param name="value">字节信息</param>
            <returns>ASCII格式的地址</returns>
        </member>
        <member name="M:xktComm.MelsecHelper.BuildBytesFromData(System.Int16)">
            <summary>
            从short数据构建一个ASCII格式地址字节
            </summary>
            <param name="value">short值</param>
            <returns>ASCII格式的地址</returns>
        </member>
        <member name="M:xktComm.MelsecHelper.BuildBytesFromData(System.UInt16)">
            <summary>
            从ushort数据构建一个ASCII格式地址字节
            </summary>
            <param name="value">ushort值</param>
            <returns>ASCII格式的地址</returns>
        </member>
        <member name="M:xktComm.MelsecHelper.BuildBytesFromAddress(System.Int32,xktComm.MelsecMcDataType)">
            <summary>
            从三菱的地址中构建MC协议的6字节的ASCII格式的地址
            </summary>
            <param name="address">三菱地址</param>
            <param name="type">三菱的数据类型</param>
            <returns>6字节的ASCII格式的地址</returns>
        </member>
        <member name="M:xktComm.MelsecHelper.BuildBytesFromData(System.Byte[])">
            <summary>
            从字节数组构建一个ASCII格式的地址字节
            </summary>
            <param name="value">字节信息</param>
            <returns>ASCII格式的地址</returns>
        </member>
        <member name="M:xktComm.MelsecHelper.TransBoolArrayToByteData(System.Byte[])">
            <summary>
            将0，1，0，1的字节数组压缩成三菱格式的字节数组来表示开关量的
            </summary>
            <param name="value">原始的数据字节</param>
            <returns>压缩过后的数据字节</returns>
        </member>
        <member name="M:xktComm.MelsecHelper.FxCalculateCRC(System.Byte[])">
            <summary>
            计算Fx协议指令的和校验信息
            </summary>
            <param name="data">字节数据</param>
            <returns>校验之后的数据</returns>
        </member>
        <member name="M:xktComm.MelsecHelper.CheckCRC(System.Byte[])">
            <summary>
            检查指定的和校验是否是正确的
            </summary>
            <param name="data">字节数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:xktComm.MelsecMcDataType">
            <summary>
            三菱PLC的数据类型，此处包含了几个常用的类型
            </summary>
        </member>
        <member name="M:xktComm.MelsecMcDataType.#ctor(System.Byte,System.Byte,System.String,System.Int32)">
            <summary>
            如果您清楚类型代号，可以根据值进行扩展
            </summary>
            <param name="code">数据类型的代号</param>
            <param name="type">0或1，默认为0</param>
            <param name="asciiCode">ASCII格式的类型信息</param>
            <param name="fromBase">指示地址的多少进制的，10或是16</param>
        </member>
        <member name="P:xktComm.MelsecMcDataType.DataCode">
            <summary>
            类型的代号值
            </summary>
        </member>
        <member name="P:xktComm.MelsecMcDataType.DataType">
            <summary>
            数据的类型，0代表按字，1代表按位
            </summary>
        </member>
        <member name="P:xktComm.MelsecMcDataType.AsciiCode">
            <summary>
            当以ASCII格式通讯时的类型描述
            </summary>
        </member>
        <member name="P:xktComm.MelsecMcDataType.FromBase">
            <summary>
            指示地址是10进制，还是16进制的
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.X">
            <summary>
            X输入寄存器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.Y">
            <summary>
            Y输出寄存器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.X5U">
            <summary>
            X输入寄存器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.Y5U">
            <summary>
            Y输出寄存器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.M">
            <summary>
            M中间寄存器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.D">
            <summary>
            D数据寄存器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.W">
            <summary>
            W链接寄存器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.L">
            <summary>
            L锁存继电器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.F">
            <summary>
            F报警器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.V">
            <summary>
            V边沿继电器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.B">
            <summary>
            B链接继电器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.R">
            <summary>
            R文件寄存器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.S">
            <summary>
            S步进继电器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.Z">
            <summary>
            变址寄存器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.TN">
            <summary>
            定时器的当前值
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.TS">
            <summary>
            定时器的触点
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.TC">
            <summary>
            定时器的线圈
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.SS">
            <summary>
            累计定时器的触点
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.SC">
            <summary>
            累计定时器的线圈
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.SN">
            <summary>
            累计定时器的当前值
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.CN">
            <summary>
            计数器的当前值
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.CS">
            <summary>
            计数器的触点
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.CC">
            <summary>
            计数器的线圈
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.ZR">
            <summary>
            文件寄存器ZR区
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.Panasonic_X">
            <summary>
            输入继电器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.Panasonic_Y">
            <summary>
            输出继电器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.Panasonic_L">
            <summary>
            链接继电器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.Panasonic_R">
            <summary>
            内部继电器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.Panasonic_DT">
            <summary>
            数据存储器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.Panasonic_LD">
            <summary>
            链接存储器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.Panasonic_TN">
            <summary>
            计时器（当前值）
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.Panasonic_TS">
            <summary>
            计时器（接点）
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.Panasonic_CN">
            <summary>
            计数器（当前值）
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.Panasonic_CS">
            <summary>
            计数器（接点）
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.Panasonic_SM">
            <summary>
            特殊链接继电器
            </summary>
        </member>
        <member name="F:xktComm.MelsecMcDataType.Panasonic_SD">
            <summary>
            特殊链接存储器
            </summary>
        </member>
        <member name="M:xktComm.OPCUA.#ctor">
            <summary>
            默认的构造函数，实例化一个新的OPC UA类
            </summary>
        </member>
        <member name="M:xktComm.OPCUA.Connect(System.String)">
            <summary>
            Creates a new session.
            </summary>
            <returns>The new session object.</returns>
        </member>
        <member name="M:xktComm.OPCUA.Disconnect">
            <summary>
            Disconnects from the server.
            </summary>
        </member>
        <member name="M:xktComm.OPCUA.UpdateStatus(System.Boolean,System.DateTime,System.String,System.Object[])">
            <summary>
            Report the client status
            </summary>
            <param name="error">Whether the status represents an error.</param>
            <param name="time">The time associated with the status.</param>
            <param name="status">The status message.</param>
            <param name="args">Arguments used to format the status message.</param>
        </member>
        <member name="M:xktComm.OPCUA.Session_KeepAlive(Opc.Ua.Client.Session,Opc.Ua.Client.KeepAliveEventArgs)">
            <summary>
            Handles a keep alive event from a session.
            </summary>
        </member>
        <member name="M:xktComm.OPCUA.Server_ReconnectComplete(System.Object,System.EventArgs)">
            <summary>
            Handles a reconnect event complete from the reconnect handler.
            </summary>
        </member>
        <member name="M:xktComm.OPCUA.SetLogPathName(System.String,System.Boolean)">
            <summary>
            设置OPC客户端的日志输出
            </summary>
            <param name="filePath">完整的文件路径</param>
            <param name="deleteExisting">是否删除原文件</param>
        </member>
        <member name="P:xktComm.OPCUA.OpcUaName">
            <summary>
            a name of application name show on server
            </summary>
        </member>
        <member name="P:xktComm.OPCUA.UseSecurity">
            <summary>
            Whether to use security when connecting.
            </summary>
        </member>
        <member name="P:xktComm.OPCUA.UserIdentity">
            <summary>
            The user identity to use when creating the session.
            </summary>
        </member>
        <member name="P:xktComm.OPCUA.Session">
            <summary>
            The currently active session. 
            </summary>
        </member>
        <member name="P:xktComm.OPCUA.Connected">
            <summary>
            Indicate the connect status
            </summary>
        </member>
        <member name="P:xktComm.OPCUA.ReconnectPeriod">
            <summary>
            The number of seconds between reconnect attempts (0 means reconnect is disabled).
            </summary>
        </member>
        <member name="E:xktComm.OPCUA.KeepAliveComplete">
            <summary>
            Raised when a good keep alive from the server arrives.
            </summary>
        </member>
        <member name="E:xktComm.OPCUA.ReconnectStarting">
            <summary>
            Raised when a reconnect operation starts.
            </summary>
        </member>
        <member name="E:xktComm.OPCUA.ReconnectComplete">
            <summary>
            Raised when a reconnect operation completes.
            </summary>
        </member>
        <member name="E:xktComm.OPCUA.ConnectComplete">
            <summary>
            Raised after successfully connecting to or disconnecing from a server.
            </summary>
        </member>
        <member name="E:xktComm.OPCUA.OpcStatusChange">
            <summary>
            Raised after the client status change
            </summary>
        </member>
        <member name="P:xktComm.OPCUA.AppConfig">
            <summary>
            配置信息
            </summary>
        </member>
        <member name="M:xktComm.OPCUA.ReadNode(Opc.Ua.NodeId)">
            <summary>
            Read a value node from server
            </summary>
            <param name="nodeId">node id</param>
            <returns>DataValue</returns>
        </member>
        <member name="M:xktComm.OPCUA.ReadNode``1(System.String)">
            <summary>
            Read a value node from server
            </summary>
            <typeparam name="T">type of value</typeparam>
            <param name="tag">node id</param>
            <returns>实际值</returns>
        </member>
        <member name="M:xktComm.OPCUA.ReadNodeAsync``1(System.String)">
            <summary>
            Read a tag asynchronously
            </summary>
            <typeparam name="T">The type of tag to read</typeparam>
            <param name="tag">tag值</param>
            <returns>The value retrieved from the OPC</returns>
        </member>
        <member name="M:xktComm.OPCUA.ReadNodes(Opc.Ua.NodeId[])">
            <summary>
            read several value nodes from server
            </summary>
            <param name="nodeIds">all NodeIds</param>
            <returns>all values</returns>
        </member>
        <member name="M:xktComm.OPCUA.ReadNodes``1(System.String[])">
            <summary>
            read several value nodes from server
            </summary>
            <param name="tags">所以的节点数组信息</param>
            <returns>all values</returns>
        </member>
        <member name="M:xktComm.OPCUA.WriteNode``1(System.String,``0)">
            <summary>
            write a note to server(you should use try catch)
            </summary>
            <typeparam name="T">The type of tag to write on</typeparam>
            <param name="tag">节点名称</param>
            <param name="value">值</param>
            <returns>if success True,otherwise False</returns>
        </member>
        <member name="M:xktComm.OPCUA.WriteNodeAsync``1(System.String,``0)">
            <summary>
            Write a value on the specified opc tag asynchronously
            </summary>
            <typeparam name="T">The type of tag to write on</typeparam>
            <param name="tag">The fully-qualified identifier of the tag. You can specify a subfolder by using a comma delimited name. E.g: the tag `foo.bar` writes on the tag `bar` on the folder `foo`</param>
            <param name="value">The value for the item to write</param>
        </member>
        <member name="M:xktComm.OPCUA.Write(System.String,System.String,xktComm.Common.DataType,System.Boolean)">
            <summary>
            通用写入方法
            </summary>
            <param name="address">变量名称</param>
            <param name="value">数值</param>
            <param name="dataType">数据类型</param>
            <param name="IsAsync">是否异步</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.OPCUA.WriteNodes(System.String[],System.Object[])">
            <summary>
            所有的节点都写入成功，返回<c>True</c>，否则返回<c>False</c>
            </summary>
            <param name="tags">节点名称数组</param>
            <param name="values">节点的值数据</param>
            <returns>所有的是否都写入成功</returns>
        </member>
        <member name="M:xktComm.OPCUA.DeleteExsistNode(System.String)">
            <summary>
            删除一个节点的操作，除非服务器配置允许，否则引发异常，成功返回<c>True</c>，否则返回<c>False</c>
            </summary>
            <param name="tag">节点文本描述</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.OPCUA.AddNewNode(Opc.Ua.NodeId)">
            <summary>
            新增一个节点数据
            </summary>
            <param name="parent">父节点tag名称</param>
        </member>
        <member name="M:xktComm.OPCUA.AddSubscription(System.String,System.String,System.Action{System.String,Opc.Ua.Client.MonitoredItem,Opc.Ua.Client.MonitoredItemNotificationEventArgs})">
            <summary>
            新增一个订阅，需要指定订阅的关键字，订阅的tag名，以及回调方法
            </summary>
            <param name="key">关键字</param>
            <param name="tag">tag</param>
            <param name="callback">回调方法</param>
        </member>
        <member name="M:xktComm.OPCUA.AddSubscription(System.String,System.String[],System.Action{System.String,Opc.Ua.Client.MonitoredItem,Opc.Ua.Client.MonitoredItemNotificationEventArgs})">
            <summary>
            新增一批订阅，需要指定订阅的关键字，订阅的tag名数组，以及回调方法
            </summary>
            <param name="key">关键字</param>
            <param name="tags">节点名称数组</param>
            <param name="callback">回调方法</param>
        </member>
        <member name="M:xktComm.OPCUA.RemoveSubscription(System.String)">
            <summary>
            移除订阅消息，如果该订阅消息是批量的，也直接移除
            </summary>
            <param name="key">订阅关键值</param>
        </member>
        <member name="M:xktComm.OPCUA.RemoveAllSubscription">
            <summary>
            移除所有的订阅消息
            </summary>
        </member>
        <member name="M:xktComm.OPCUA.ReadHistoryRawDataValues(System.String,System.DateTime,System.DateTime,System.UInt32,System.Boolean)">
            <summary>
            read History data
            </summary>
            <param name="tag">节点的索引</param>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
            <param name="count">读取的个数</param>
            <param name="containBound">是否包含边界</param>
            <returns>读取的数据列表</returns>
        </member>
        <member name="M:xktComm.OPCUA.ReadHistoryRawDataValues``1(System.String,System.DateTime,System.DateTime,System.UInt32,System.Boolean)">
            <summary>
            读取一连串的历史数据，并将其转化成指定的类型
            </summary>
            <param name="tag">节点的索引</param>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
            <param name="count">读取的个数</param>
            <param name="containBound">是否包含边界</param>
            <returns>读取的数据列表</returns>
        </member>
        <member name="M:xktComm.OPCUA.BrowseNodeReference(System.String)">
            <summary>
            浏览一个节点的引用
            </summary>
            <param name="tag">节点值</param>
            <returns>引用节点描述</returns>
        </member>
        <member name="M:xktComm.OPCUA.ReadNoteAttributes(System.String)">
            <summary>
            读取一个节点的所有属性
            </summary>
            <param name="tag">节点信息</param>
            <returns>节点的特性值</returns>
        </member>
        <member name="M:xktComm.OPCUA.ReadNoteDataValueAttributes(System.String)">
            <summary>
            读取一个节点的所有属性
            </summary>
            <param name="tag">节点值</param>
            <returns>所有的数据</returns>
        </member>
        <member name="M:xktComm.OPCUA.CallMethodByNodeId(System.String,System.String,System.Object[])">
            <summary>
            call a server method
            </summary>
            <param name="tagParent">方法的父节点tag</param>
            <param name="tag">方法的节点tag</param>
            <param name="args">传递的参数</param>
            <returns>输出的结果值</returns>
        </member>
        <member name="M:xktComm.OPCUA.DoConnectComplete(System.Object)">
            <summary>
            Raises the connect complete event on the main GUI thread.
            </summary>
        </member>
        <member name="T:xktComm.OpcUaStatusEventArgs">
            <summary>
            OPC UA的状态更新消息
            </summary>
        </member>
        <member name="P:xktComm.OpcUaStatusEventArgs.Error">
            <summary>
            是否异常
            </summary>
        </member>
        <member name="P:xktComm.OpcUaStatusEventArgs.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:xktComm.OpcUaStatusEventArgs.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="M:xktComm.OpcUaStatusEventArgs.ToString">
            <summary>
            转化为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:xktComm.OpcNodeAttribute">
            <summary>
            读取属性过程中用于描述的
            </summary>
        </member>
        <member name="P:xktComm.OpcNodeAttribute.Name">
            <summary>
            属性的名称
            </summary>
        </member>
        <member name="P:xktComm.OpcNodeAttribute.Type">
            <summary>
            属性的类型描述
            </summary>
        </member>
        <member name="P:xktComm.OpcNodeAttribute.StatusCode">
            <summary>
            操作结果状态描述
            </summary>
        </member>
        <member name="P:xktComm.OpcNodeAttribute.Value">
            <summary>
            属性的值，如果读取错误，返回文本描述
            </summary>
        </member>
        <member name="M:xktComm.FormUtils.GetAccessLevelDisplayText(System.Byte)">
            <summary>
            Gets the display text for the access level attribute.
            </summary>
            <param name="accessLevel">The access level.</param>
            <returns>The access level formatted as a string.</returns>
        </member>
        <member name="M:xktComm.FormUtils.GetEventNotifierDisplayText(System.Byte)">
            <summary>
            Gets the display text for the event notifier attribute.
            </summary>
            <param name="accessLevel">The event notifier.</param>
            <returns>The event notifier formatted as a string.</returns>
        </member>
        <member name="M:xktComm.FormUtils.GetValueRankDisplayText(System.Int32)">
            <summary>
            Gets the display text for the value rank attribute.
            </summary>
            <param name="accessLevel">The value rank.</param>
            <returns>The value rank formatted as a string.</returns>
        </member>
        <member name="M:xktComm.FormUtils.GetAttributeDisplayText(Opc.Ua.Client.Session,System.UInt32,Opc.Ua.Variant)">
            <summary>
            Gets the display text for the specified attribute.
            </summary>
            <param name="session">The currently active session.</param>
            <param name="attributeId">The id of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <returns>The attribute formatted as a string.</returns>
        </member>
        <member name="M:xktComm.FormUtils.DiscoverServers(Opc.Ua.ApplicationConfiguration)">
            <summary>
            Discovers the servers on the local machine.
            </summary>
            <param name="configuration">The configuration.</param>
            <returns>A list of server urls.</returns>
        </member>
        <member name="M:xktComm.FormUtils.SelectEndpoint(System.String,System.Boolean)">
            <summary>
            Finds the endpoint that best matches the current settings.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="useSecurity">if set to <c>true</c> select an endpoint that uses security.</param>
            <returns>The best available endpoint.</returns>
        </member>
        <member name="M:xktComm.FormUtils.Browse(Opc.Ua.Client.Session,Opc.Ua.BrowseDescriptionCollection,System.Boolean)">
            <summary>
            Browses the address space and returns the references found.
            </summary>
            <param name="session">The session.</param>
            <param name="nodesToBrowse">The set of browse operations to perform.</param>
            <param name="throwOnError">if set to <c>true</c> a exception will be thrown on an error.</param>
            <returns>
            The references found. Null if an error occurred.
            </returns>
        </member>
        <member name="M:xktComm.FormUtils.FindEventType(Opc.Ua.Client.MonitoredItem,Opc.Ua.EventFieldList)">
            <summary>
            Finds the type of the event for the notification.
            </summary>
            <param name="monitoredItem">The monitored item.</param>
            <param name="notification">The notification.</param>
            <returns>The NodeId of the EventType.</returns>
        </member>
        <member name="M:xktComm.FormUtils.Browse(Opc.Ua.Client.Session,Opc.Ua.BrowseDescription,System.Boolean)">
            <summary>
            Browses the address space and returns the references found.
            </summary>
            <param name="session">The session.</param>
            <param name="nodeToBrowse">The NodeId for the starting node.</param>
            <param name="throwOnError">if set to <c>true</c> a exception will be thrown on an error.</param>
            <returns>
            The references found. Null if an error occurred.
            </returns>
        </member>
        <member name="M:xktComm.FormUtils.BrowseSuperTypes(Opc.Ua.Client.Session,Opc.Ua.NodeId,System.Boolean)">
            <summary>
            Browses the address space and returns all of the supertypes of the specified type node.
            </summary>
            <param name="session">The session.</param>
            <param name="typeId">The NodeId for a type node in the address space.</param>
            <param name="throwOnError">if set to <c>true</c> a exception will be thrown on an error.</param>
            <returns>
            The references found. Null if an error occurred.
            </returns>
        </member>
        <member name="M:xktComm.FormUtils.ConstructEvent(Opc.Ua.Client.Session,Opc.Ua.Client.MonitoredItem,Opc.Ua.EventFieldList,System.Collections.Generic.Dictionary{Opc.Ua.NodeId,System.Type},System.Collections.Generic.Dictionary{Opc.Ua.NodeId,Opc.Ua.NodeId})">
            <summary>
            Constructs an event object from a notification.
            </summary>
            <param name="session">The session.</param>
            <param name="monitoredItem">The monitored item that produced the notification.</param>
            <param name="notification">The notification.</param>
            <param name="knownEventTypes">The known event types.</param>
            <param name="eventTypeMappings">Mapping between event types and known event types.</param>
            <returns>
            The event object. Null if the notification is not a valid event type.
            </returns>
        </member>
        <member name="M:xktComm.FormUtils.TranslateBrowsePaths(Opc.Ua.Client.Session,Opc.Ua.NodeId,Opc.Ua.NamespaceTable,System.String[])">
            <summary>
            Returns the node ids for a set of relative paths.
            </summary>
            <param name="session">An open session with the server to use.</param>
            <param name="startNodeId">The starting node for the relative paths.</param>
            <param name="namespacesUris">The namespace URIs referenced by the relative paths.</param>
            <param name="relativePaths">The relative paths.</param>
            <returns>A collection of local nodes.</returns>
        </member>
        <member name="M:xktComm.FormUtils.CollectFieldsForType(Opc.Ua.Client.Session,Opc.Ua.NodeId,Opc.Ua.SimpleAttributeOperandCollection,System.Collections.Generic.List{Opc.Ua.NodeId})">
            <summary>
            Collects the fields for the type.
            </summary>
            <param name="session">The session.</param>
            <param name="eventTypeId">The type id.</param>
            <param name="fields">The fields.</param>
            <param name="fieldNodeIds">The node id for the declaration of the field.</param>
        </member>
        <member name="M:xktComm.FormUtils.CollectFieldsForInstance(Opc.Ua.Client.Session,Opc.Ua.NodeId,Opc.Ua.SimpleAttributeOperandCollection,System.Collections.Generic.List{Opc.Ua.NodeId})">
            <summary>
            Collects the fields for the instance.
            </summary>
            <param name="session">The session.</param>
            <param name="eventTypeId">The instance id.</param>
            <param name="fields">The fields.</param>
            <param name="fieldNodeIds">The node id for the declaration of the field.</param>
        </member>
        <member name="M:xktComm.FormUtils.CollectFields(Opc.Ua.Client.Session,Opc.Ua.NodeId,Opc.Ua.QualifiedNameCollection,Opc.Ua.SimpleAttributeOperandCollection,System.Collections.Generic.List{Opc.Ua.NodeId},System.Collections.Generic.Dictionary{Opc.Ua.NodeId,Opc.Ua.QualifiedNameCollection})">
            <summary>
            Collects the fields for the instance node.
            </summary>
            <param name="session">The session.</param>
            <param name="nodeId">The node id.</param>
            <param name="parentPath">The parent path.</param>
            <param name="fields">The event fields.</param>
            <param name="fieldNodeIds">The node id for the declaration of the field.</param>
            <param name="foundNodes">The table of found nodes.</param>
        </member>
        <member name="M:xktComm.FormUtils.ContainsPath(Opc.Ua.SimpleAttributeOperandCollection,Opc.Ua.QualifiedNameCollection)">
            <summary>
            Determines whether the specified select clause contains the browse path.
            </summary>
            <param name="selectClause">The select clause.</param>
            <param name="browsePath">The browse path.</param>
            <returns>
            	<c>true</c> if the specified select clause contains path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:xktComm.XktResult">
            <summary>
            操作结果的类，只带有成功标志和错误信息 -> The class that operates the result, with only success flags and error messages
            </summary>
            <remarks>
            当 <see cref="P:xktComm.XktResult.IsSuccess"/> 为 True 时，忽略 <see cref="P:xktComm.XktResult.Message"/> 及 <see cref="P:xktComm.XktResult.ErrorCode"/> 的值
            </remarks>
        </member>
        <member name="M:xktComm.XktResult.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:xktComm.XktResult.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:xktComm.XktResult.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:xktComm.XktResult.IsSuccess">
            <summary>
            指示本次访问是否成功
            </summary>
        </member>
        <member name="P:xktComm.XktResult.Message">
            <summary>
            具体的错误描述
            </summary>
        </member>
        <member name="P:xktComm.XktResult.ErrorCode">
            <summary>
            具体的错误代码
            </summary>
        </member>
        <member name="M:xktComm.XktResult.CopyErrorFromOther``1(``0)">
            <summary>
            从另一个结果类中拷贝错误信息
            </summary>
            <typeparam name="TResult">支持结果类及派生类</typeparam>
            <param name="result">结果类及派生类的对象</param>
        </member>
        <member name="M:xktComm.XktResult.CreateFailedResult">
            <summary>
            创建并返回一个失败的结果对象
            </summary>
            <returns>失败的结果对象</returns>
        </member>
        <member name="M:xktComm.XktResult.CreateFailedResult``1(xktComm.XktResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="result">之前的结果对象</param>
            <returns>带默认泛型对象的失败结果类</returns>
        </member>
        <member name="M:xktComm.XktResult.CreateFailedResult``2(xktComm.XktResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <param name="result">之前的结果对象</param>
            <returns>带默认泛型对象的失败结果类</returns>
        </member>
        <member name="M:xktComm.XktResult.CreateFailedResult``3(xktComm.XktResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <param name="result">之前的结果对象</param>
            <returns>带默认泛型对象的失败结果类</returns>
        </member>
        <member name="M:xktComm.XktResult.CreateFailedResult``4(xktComm.XktResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <typeparam name="T4">目标数据类型四</typeparam>
            <param name="result">之前的结果对象</param>
            <returns>带默认泛型对象的失败结果类</returns>
        </member>
        <member name="M:xktComm.XktResult.CreateFailedResult``5(xktComm.XktResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <typeparam name="T4">目标数据类型四</typeparam>
            <typeparam name="T5">目标数据类型五</typeparam>
            <param name="result">之前的结果对象</param>
            <returns>带默认泛型对象的失败结果类</returns>
        </member>
        <member name="M:xktComm.XktResult.CreateSuccessResult">
            <summary>
            创建并返回一个成功的结果对象
            </summary>
            <returns>结果对象</returns>
        </member>
        <member name="M:xktComm.XktResult.CreateSuccessResult``1(``0)">
            <summary>
            创建并返回一个成功的结果对象，并带有一个参数对象
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">类型的值对象</param>
            <returns>结果对象</returns>
        </member>
        <member name="M:xktComm.XktResult.CreateSuccessResult``2(``0,``1)">
            <summary>
            创建并返回一个成功的结果对象，并带有两个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <returns>结果对象</returns>
        </member>
        <member name="M:xktComm.XktResult.CreateSuccessResult``3(``0,``1,``2)">
            <summary>
            创建并返回一个成功的结果对象，并带有三个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <returns>结果对象</returns>
        </member>
        <member name="M:xktComm.XktResult.CreateSuccessResult``4(``0,``1,``2,``3)">
            <summary>
            创建并返回一个成功的结果对象，并带有四个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <param name="value4">类型四对象</param>
            <returns>结果对象</returns>
        </member>
        <member name="M:xktComm.XktResult.CreateSuccessResult``5(``0,``1,``2,``3,``4)">
            <summary>
            创建并返回一个成功的结果对象，并带有五个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="T5">第五个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <param name="value4">类型四对象</param>
            <param name="value5">类型五对象</param>
            <returns>结果对象</returns>
        </member>
        <member name="T:xktComm.XktResult`1">
            <summary>
            操作结果的泛型类，允许带一个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T">泛型类</typeparam>
        </member>
        <member name="M:xktComm.XktResult`1.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:xktComm.XktResult`1.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:xktComm.XktResult`1.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:xktComm.XktResult`1.Content">
            <summary>
            用户自定义的泛型数据
            </summary>
        </member>
        <member name="T:xktComm.XktResult`2">
            <summary>
            操作结果的泛型类，允许带两个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
        </member>
        <member name="M:xktComm.XktResult`2.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:xktComm.XktResult`2.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:xktComm.XktResult`2.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:xktComm.XktResult`2.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:xktComm.XktResult`2.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="T:xktComm.XktResult`3">
            <summary>
            操作结果的泛型类，允许带三个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
        </member>
        <member name="M:xktComm.XktResult`3.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:xktComm.XktResult`3.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:xktComm.XktResult`3.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:xktComm.XktResult`3.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:xktComm.XktResult`3.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:xktComm.XktResult`3.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="T:xktComm.XktResult`4">
            <summary>
            操作结果的泛型类，允许带四个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
        </member>
        <member name="M:xktComm.XktResult`4.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:xktComm.XktResult`4.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:xktComm.XktResult`4.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:xktComm.XktResult`4.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:xktComm.XktResult`4.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:xktComm.XktResult`4.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:xktComm.XktResult`4.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="T:xktComm.XktResult`5">
            <summary>
            操作结果的泛型类，允许带五个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
        </member>
        <member name="M:xktComm.XktResult`5.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:xktComm.XktResult`5.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:xktComm.XktResult`5.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:xktComm.XktResult`5.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:xktComm.XktResult`5.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:xktComm.XktResult`5.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:xktComm.XktResult`5.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:xktComm.XktResult`5.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="T:xktComm.ReverseWordTransform">
            <summary>
            按照字节错位的数据转换类
            </summary>
        </member>
        <member name="M:xktComm.ReverseWordTransform.#ctor(xktComm.Common.DataFormat)">
            <summary>
            使用指定的数据解析来实例化对象
            </summary>
            <param name="dataFormat">数据规则</param>
        </member>
        <member name="M:xktComm.ReverseWordTransform.ReverseBytesByWord(System.Byte[],System.Int32,System.Int32)">
            <summary>
            按照字节错位的方法
            </summary>
            <param name="buffer">实际的字节数据</param>
            <param name="index">起始字节位置</param>
            <param name="length">数据长度</param>
            <returns>处理过的数据信息</returns>
        </member>
        <member name="P:xktComm.ReverseWordTransform.IsStringReverse">
            <summary>
            字符串数据是否按照字来反转
            </summary>
        </member>
        <member name="M:xktComm.ReverseWordTransform.TransString(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            从缓存中提取string结果，使用指定的编码
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <param name="length">byte数组长度</param>
            <param name="encoding">字符串的编码</param>
            <returns>string对象</returns>
        </member>
        <member name="M:xktComm.ReverseWordTransform.TransByte(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码字符串转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <param name="encoding">字符串的编码方式</param>
            <returns>buffer数据</returns>
        </member>
        <member name="T:xktComm.SoftBasic">
            <summary>
            一个软件基础类，提供常用的一些静态方法 ->
            A software-based class that provides some common static methods
            </summary>
        </member>
        <member name="M:xktComm.SoftBasic.ArrayFormat``1(``0[])">
            <summary>
            将数组格式化为显示的字符串的信息，支持所有的类型对象
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="array">数组信息</param>
            <returns>最终显示的信息</returns>
        </member>
        <member name="M:xktComm.SoftBasic.AddArrayData``1(``0[]@,``0[],System.Int32)">
            <summary>
            将数组格式化为显示的字符串的信息，支持所有的类型对象
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="array">数组信息</param>
            <returns>最终显示的信息</returns>
        </member>
        <member name="M:xktComm.SoftBasic.ArrayExpandToLength``1(``0[],System.Int32)">
            <summary>
            将一个数组进行扩充到指定长度，或是缩短到指定长度 ->
            Extend an array to a specified length, or shorten to a specified length or fill
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="data">原先数据的数据</param>
            <param name="length">新数组的长度</param>
            <returns>新数组长度信息</returns>
        </member>
        <member name="M:xktComm.SoftBasic.ArrayExpandToLengthEven``1(``0[])">
            <summary>
            将一个数组进行扩充到偶数长度 ->
            Extend an array to even lengths
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="data">原先数据的数据</param>
            <returns>新数组长度信息</returns>
        </member>
        <member name="M:xktComm.SoftBasic.ArraySplitByLength``1(``0[],System.Int32)">
            <summary>
            将指定的数据按照指定长度进行分割，例如int[10]，指定长度4，就分割成int[4],int[4],int[2]，然后拼接list
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="array">等待分割的数组</param>
            <param name="length">指定的长度信息</param>
            <returns>分割后结果内容</returns>
        </member>
        <member name="M:xktComm.SoftBasic.SplitIntegerToArray(System.Int32,System.Int32)">
            <summary>
            将整数进行有效的拆分成数组
            </summary>
            <param name="integer">整数信息</param>
            <param name="everyLength">单个的数组长度</param>
            <returns>拆分后的数组长度</returns>
        </member>
        <member name="M:xktComm.SoftBasic.IsTwoBytesEquel(System.Byte[],System.Byte[])">
            <summary>
            判断两个字节的指定部分是否相同 ->
            Determines whether the specified portion of a two-byte is the same
            </summary>
            <param name="b1">第一个字节</param>
            <param name="b2">第二个字节</param>
            <returns>返回是否相等</returns>
        </member>
        <member name="M:xktComm.SoftBasic.IsByteTokenEquel(System.Byte[],System.Guid)">
            <summary>
            判断两个数据的令牌是否相等 ->
            Determines whether the tokens of two data are equal
            </summary>
            <param name="head">字节数据</param>
            <param name="token">GUID数据</param>
            <returns>返回是否相等</returns>
        </member>
        <member name="M:xktComm.SoftBasic.IsTwoTokenEquel(System.Guid,System.Guid)">
            <summary>
            判断两个数据的令牌是否相等 ->
            Determines whether the tokens of two data are equal
            </summary>
            <param name="token1">第一个令牌</param>
            <param name="token2">第二个令牌</param>
            <returns>返回是否相等</returns>
        </member>
        <member name="M:xktComm.SoftBasic.GetEnumFromString``1(System.String)">
            <summary>
            从字符串的枚举值数据转换成真实的枚举值数据 ->
            Convert enumeration value data from strings to real enumeration value data
            </summary>
            <typeparam name="TEnum">枚举的类型值</typeparam>
            <param name="value">枚举的字符串的数据值</param>
            <returns>真实的枚举值</returns>
        </member>
        <member name="M:xktComm.SoftBasic.ShowExceptionMessage(System.Exception)">
            <summary>
            显示一个完整的错误信息 ->
            Displays a complete error message
            </summary>
            <param name="ex">异常对象</param>
            <remarks>调用本方法可以显示一个异常的详细信息</remarks>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:xktComm.SoftBasic.ShowExceptionMessage(System.String,System.Exception)">
            <summary>
            显示一个完整的错误信息，和额外的字符串描述信息 ->
            Displays a complete error message, and additional string description information
            </summary>
            <param name="extraMsg">额外的描述信息</param>
            <remarks>调用本方法可以显示一个异常的详细信息</remarks>
            <param name="ex">异常对象</param>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:xktComm.SoftBasic.GetExceptionMessage(System.Exception)">
            <summary>
            获取一个异常的完整错误信息 ->
            Gets the complete error message for an exception
            </summary>
            <param name="ex">异常对象</param>
            <returns>完整的字符串数据</returns>
            <remarks>获取异常的完整信息</remarks>
            <exception cref="T:System.NullReferenceException">ex不能为空</exception>
        </member>
        <member name="M:xktComm.SoftBasic.GetExceptionMessage(System.String,System.Exception)">
            <summary>
            获取一个异常的完整错误信息，和额外的字符串描述信息 ->
            Gets the complete error message for an exception, and additional string description information
            </summary>
            <param name="extraMsg">额外的信息</param>
            <param name="ex">异常对象</param>
            <returns>完整的字符串数据</returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:xktComm.SoftBasic.ByteToHexString(System.String)">
            <summary>
            字符串数据转化成16进制表示的字符串 ->
            String data into a string of 16 binary representations
            </summary>
            <param name="InString">输入的字符串数据</param>
            <returns>返回的字符串</returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:xktComm.SoftBasic.BytesToAsciiBytes(System.Byte[])">
            <summary>
            将原始的byte数组转换成ascii格式的byte数组 ->
            Converts the original byte array to an ASCII-formatted byte array
            </summary>
            <param name="inBytes">等待转换的byte数组</param>
            <returns>转换后的数组</returns>
        </member>
        <member name="M:xktComm.SoftBasic.AsciiBytesToBytes(System.Byte[])">
            <summary>
            将ascii格式的byte数组转换成原始的byte数组 ->
            Converts an ASCII-formatted byte array to the original byte array
            </summary>
            <param name="inBytes">等待转换的byte数组</param>
            <returns>转换后的数组</returns>
        </member>
        <member name="M:xktComm.SoftBasic.BuildAsciiBytesFrom(System.Byte)">
            <summary>
            从字节构建一个ASCII格式的数据内容
            </summary>
            <param name="value">数据</param>
            <returns>ASCII格式的字节数组</returns>
        </member>
        <member name="M:xktComm.SoftBasic.BuildAsciiBytesFrom(System.Int16)">
            <summary>
            从short构建一个ASCII格式的数据内容
            </summary>
            <param name="value">数据</param>
            <returns>ASCII格式的字节数组</returns>
        </member>
        <member name="M:xktComm.SoftBasic.BuildAsciiBytesFrom(System.UInt16)">
            <summary>
            从ushort构建一个ASCII格式的数据内容
            </summary>
            <param name="value">数据</param>
            <returns>ASCII格式的字节数组</returns>
        </member>
        <member name="M:xktComm.SoftBasic.BuildAsciiBytesFrom(System.Byte[])">
            <summary>
            从字节数组构建一个ASCII格式的数据内容
            </summary>
            <param name="value">字节信息</param>
            <returns>ASCII格式的地址</returns>
        </member>
        <member name="M:xktComm.SoftBasic.BytesArraySelectBegin(System.Byte[],System.Int32)">
            <summary>
            选择一个byte数组的前面的几个byte数据信息
            </summary>
            <param name="value">原始的数据信息</param>
            <param name="length">数据的长度</param>
            <returns>选择的前面的几个数据信息</returns>
        </member>
        <member name="T:xktComm.SoftBuffer">
            <summary>
            一个线程安全的缓存数据块，支持批量动态修改，添加，并获取快照
            </summary>
            <remarks>
            这个类可以实现什么功能呢，就是你有一个大的数组，作为你的应用程序的中间数据池，允许你往byte[]数组里存放指定长度的子byte[]数组，也允许从里面拿数据，
            这些操作都是线程安全的，当然，本类扩展了一些额外的方法支持，也可以直接赋值或获取基本的数据类型对象。
            </remarks>
        </member>
        <member name="M:xktComm.SoftBuffer.#ctor">
            <summary>
            使用默认的大小初始化缓存空间
            </summary>
        </member>
        <member name="M:xktComm.SoftBuffer.#ctor(System.Int32)">
            <summary>
            使用指定的容量初始化缓存数据块
            </summary>
            <param name="capacity">初始化的容量</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetBool(System.Boolean,System.Int32)">
            <summary>
            设置指定的位置的数据块，如果超出，则丢弃数据
            </summary>
            <param name="value">bool值</param>
            <param name="destIndex">目标存储的索引</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:xktComm.SoftBuffer.SetBool(System.Boolean[],System.Int32)">
            <summary>
            设置指定的位置的数据块，如果超出，则丢弃数据
            </summary>
            <param name="value">bool数组值</param>
            <param name="destIndex">目标存储的索引</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:xktComm.SoftBuffer.GetBool(System.Int32)">
            <summary>
            获取指定的位置的bool值，如果超出，则引发异常
            </summary>
            <param name="destIndex">目标存储的索引</param>
            <returns>获取索引位置的bool数据值</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:xktComm.SoftBuffer.GetBool(System.Int32,System.Int32)">
            <summary>
            获取指定位置的bool数组值，如果超过，则引发异常
            </summary>
            <param name="destIndex">目标存储的索引</param>
            <param name="length">读取的数组长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns>bool数组值</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.SetBytes(System.Byte[],System.Int32)">
            <summary>
            设置指定的位置的数据块，如果超出，则丢弃数据
            </summary>
            <param name="data">数据块信息</param>
            <param name="destIndex">目标存储的索引</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            设置指定的位置的数据块，如果超出，则丢弃数据
            </summary>
            <param name="data">数据块信息</param>
            <param name="destIndex">目标存储的索引</param>
            <param name="length">准备拷贝的数据长度</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetBytes(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            设置指定的位置的数据块，如果超出，则丢弃数据
            </summary>
            <param name="data">数据块信息</param>
            <param name="sourceIndex">Data中的起始位置</param>
            <param name="destIndex">目标存储的索引</param>
            <param name="length">准备拷贝的数据长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:xktComm.SoftBuffer.GetBytes(System.Int32,System.Int32)">
            <summary>
            获取内存指定长度的数据信息
            </summary>
            <param name="index">起始位置</param>
            <param name="length">数组长度</param>
            <returns>返回实际的数据信息</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetBytes">
            <summary>
            获取内存所有的数据信息
            </summary>
            <returns>实际的数据信息</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.Byte,System.Int32)">
            <summary>
            设置byte类型的数据到缓存区
            </summary>
            <param name="value">byte数值</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.Int16[],System.Int32)">
            <summary>
            设置short类型的数据到缓存区
            </summary>
            <param name="values">short数组</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.Int16,System.Int32)">
            <summary>
            设置short类型的数据到缓存区
            </summary>
            <param name="value">short数值</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.UInt16[],System.Int32)">
            <summary>
            设置ushort类型的数据到缓存区
            </summary>
            <param name="values">ushort数组</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.UInt16,System.Int32)">
            <summary>
            设置ushort类型的数据到缓存区
            </summary>
            <param name="value">ushort数值</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.Int32[],System.Int32)">
            <summary>
            设置int类型的数据到缓存区
            </summary>
            <param name="values">int数组</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.Int32,System.Int32)">
            <summary>
            设置int类型的数据到缓存区
            </summary>
            <param name="value">int数值</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.UInt32[],System.Int32)">
            <summary>
            设置uint类型的数据到缓存区
            </summary>
            <param name="values">uint数组</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.UInt32,System.Int32)">
            <summary>
            设置uint类型的数据到缓存区
            </summary>
            <param name="value">uint数值</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.Single[],System.Int32)">
            <summary>
            设置float类型的数据到缓存区
            </summary>
            <param name="values">float数组</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.Single,System.Int32)">
            <summary>
            设置float类型的数据到缓存区
            </summary>
            <param name="value">float数值</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.Int64[],System.Int32)">
            <summary>
            设置long类型的数据到缓存区
            </summary>
            <param name="values">long数组</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.Int64,System.Int32)">
            <summary>
            设置long类型的数据到缓存区
            </summary>
            <param name="value">long数值</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.UInt64[],System.Int32)">
            <summary>
            设置ulong类型的数据到缓存区
            </summary>
            <param name="values">ulong数组</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.UInt64,System.Int32)">
            <summary>
            设置ulong类型的数据到缓存区
            </summary>
            <param name="value">ulong数值</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.Double[],System.Int32)">
            <summary>
            设置double类型的数据到缓存区
            </summary>
            <param name="values">double数组</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.SetValue(System.Double,System.Int32)">
            <summary>
            设置double类型的数据到缓存区
            </summary>
            <param name="value">double数值</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:xktComm.SoftBuffer.GetByte(System.Int32)">
            <summary>
            获取byte类型的数据
            </summary>
            <param name="index">索引位置</param>
            <returns>byte数值</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetInt16(System.Int32,System.Int32)">
            <summary>
            获取short类型的数组到缓存区
            </summary>
            <param name="index">索引位置</param>
            <param name="length">数组长度</param>
            <returns>short数组</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetInt16(System.Int32)">
            <summary>
            获取short类型的数据到缓存区
            </summary>
            <param name="index">索引位置</param>
            <returns>short数据</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetUInt16(System.Int32,System.Int32)">
            <summary>
            获取ushort类型的数组到缓存区
            </summary>
            <param name="index">索引位置</param>
            <param name="length">数组长度</param>
            <returns>ushort数组</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetUInt16(System.Int32)">
            <summary>
            获取ushort类型的数据到缓存区
            </summary>
            <param name="index">索引位置</param>
            <returns>ushort数据</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetInt32(System.Int32,System.Int32)">
            <summary>
            获取int类型的数组到缓存区
            </summary>
            <param name="index">索引位置</param>
            <param name="length">数组长度</param>
            <returns>int数组</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetInt32(System.Int32)">
            <summary>
            获取int类型的数据到缓存区
            </summary>
            <param name="index">索引位置</param>
            <returns>int数据</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetUInt32(System.Int32,System.Int32)">
            <summary>
            获取uint类型的数组到缓存区
            </summary>
            <param name="index">索引位置</param>
            <param name="length">数组长度</param>
            <returns>uint数组</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetUInt32(System.Int32)">
            <summary>
            获取uint类型的数据到缓存区
            </summary>
            <param name="index">索引位置</param>
            <returns>uint数据</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetSingle(System.Int32,System.Int32)">
            <summary>
            获取float类型的数组到缓存区
            </summary>
            <param name="index">索引位置</param>
            <param name="length">数组长度</param>
            <returns>float数组</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetSingle(System.Int32)">
            <summary>
            获取float类型的数据到缓存区
            </summary>
            <param name="index">索引位置</param>
            <returns>float数据</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetInt64(System.Int32,System.Int32)">
            <summary>
            获取long类型的数组到缓存区
            </summary>
            <param name="index">索引位置</param>
            <param name="length">数组长度</param>
            <returns>long数组</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetInt64(System.Int32)">
            <summary>
            获取long类型的数据到缓存区
            </summary>
            <param name="index">索引位置</param>
            <returns>long数据</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetUInt64(System.Int32,System.Int32)">
            <summary>
            获取ulong类型的数组到缓存区
            </summary>
            <param name="index">索引位置</param>
            <param name="length">数组长度</param>
            <returns>ulong数组</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetUInt64(System.Int32)">
            <summary>
            获取ulong类型的数据到缓存区
            </summary>
            <param name="index">索引位置</param>
            <returns>ulong数据</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetDouble(System.Int32,System.Int32)">
            <summary>
            获取double类型的数组到缓存区
            </summary>
            <param name="index">索引位置</param>
            <param name="length">数组长度</param>
            <returns>ulong数组</returns>
        </member>
        <member name="M:xktComm.SoftBuffer.GetDouble(System.Int32)">
            <summary>
            获取double类型的数据到缓存区
            </summary>
            <param name="index">索引位置</param>
            <returns>double数据</returns>
        </member>
        <member name="P:xktComm.SoftBuffer.ByteTransform">
            <summary>
            获取或设置当前的数据缓存类的解析规则
            </summary>
        </member>
        <member name="M:xktComm.SoftBuffer.Dispose(System.Boolean)">
            <summary>
            释放当前的对象
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:xktComm.SoftBuffer.Dispose">
            <summary>
            释放当前的对象
            </summary>
        </member>
        <member name="T:xktComm.SoftCRC16">
            <summary>
            用于CRC16验证的类，提供了标准的验证方法
            </summary>
            <remarks>
            本类提供了几个静态的方法，用来进行CRC16码的计算和验证的，多项式码可以自己指定配置，但是预置的寄存器为0xFF 0xFF
            </remarks>
        </member>
        <member name="M:xktComm.SoftCRC16.CheckCRC16(System.Byte[])">
            <summary>
            来校验对应的接收数据的CRC校验码，默认多项式码为0xA001
            </summary>
            <param name="value">需要校验的数据，带CRC校验码</param>
            <returns>返回校验成功与否</returns>
        </member>
        <member name="M:xktComm.SoftCRC16.CheckCRC16(System.Byte[],System.Byte,System.Byte)">
            <summary>
            指定多项式码来校验对应的接收数据的CRC校验码
            </summary>
            <param name="value">需要校验的数据，带CRC校验码</param>
            <param name="CH">多项式码高位</param>
            <param name="CL">多项式码低位</param>
            <returns>返回校验成功与否</returns>
        </member>
        <member name="M:xktComm.SoftCRC16.CRC16(System.Byte[])">
            <summary>
            获取对应的数据的CRC校验码，默认多项式码为0xA001
            </summary>
            <param name="value">需要校验的数据，不包含CRC字节</param>
            <returns>返回带CRC校验码的字节数组，可用于串口发送</returns>
        </member>
        <member name="M:xktComm.SoftCRC16.CRC16(System.Byte[],System.Byte,System.Byte)">
            <summary>
            通过指定多项式码来获取对应的数据的CRC校验码
            </summary>
            <param name="value">需要校验的数据，不包含CRC字节</param>
            <param name="CL">多项式码地位</param>
            <param name="CH">多项式码高位</param>
            <returns>返回带CRC校验码的字节数组，可用于串口发送</returns>
        </member>
        <member name="T:xktComm.SoftLRC">
            <summary>
            用于LRC验证的类，提供了标准的验证方法
            </summary>
        </member>
        <member name="M:xktComm.SoftLRC.LRC(System.Byte[])">
            <summary>
            获取对应的数据的LRC校验码
            </summary>
            <param name="value">需要校验的数据，不包含LRC字节</param>
            <returns>返回带LRC校验码的字节数组，可用于串口发送</returns>
        </member>
        <member name="M:xktComm.SoftLRC.CheckLRC(System.Byte[])">
            <summary>
            检查对应的数据是否符合LRC的验证
            </summary>
            <param name="value">等待校验的数据，是否正确</param>
            <returns>是否校验成功</returns>
        </member>
        <member name="T:xktComm.ShortLib">
            <summary>
            Short转换类
            </summary>
        </member>
        <member name="M:xktComm.ShortLib.GetShortFromByteArray(System.Byte[],System.Int32,xktComm.Common.DataFormat)">
            <summary>
            字节数组中截取转成16位整型
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ShortLib.GetShortArrayFromByteArray(System.Byte[],xktComm.Common.DataFormat)">
            <summary>
            将字节数组中截取转成16位整型数组
            </summary>
            <param name="source"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ShortLib.GetShortArrayFromString(System.String,System.Char)">
            <summary>
            将字符串转转成16位整型数组
            </summary>
            <param name="val"></param>
            <param name="spilt"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ShortLib.SetbitValueFromShort(System.Int16,System.Int32,System.Boolean,xktComm.Common.DataFormat)">
            <summary>
            设置16位整型某个位
            </summary>
            <param name="value"></param>
            <param name="bit"></param>
            <param name="val"></param>
            <param name="dataFormat"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ShortLib.SetbitValueFrom2ByteArray(System.Byte[],System.Int32,System.Boolean,xktComm.Common.DataFormat)">
            <summary>
            设置字节数组某个位
            </summary>
            <param name="bt"></param>
            <param name="bit"></param>
            <param name="val"></param>
            <param name="dataFormat"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.daddafdd">
            <summary>
            系统授权
            </summary>
        </member>
        <member name="T:xktComm.Regedit">
            <summary>
            注册表
            </summary>
        </member>
        <member name="M:xktComm.Regedit.GetData(System.String,System.String)">
            <summary>
            读取数据
            </summary>
            <param name="node">节点</param>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.Regedit.AddItem(System.String,System.String,System.Object)">
            <summary>
            写入值
            </summary>
            <param name="node">节点</param>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="P:xktComm.SiemensPPI.Station">
            <summary>
            西门子PLC的站号信息
            </summary>
        </member>
        <member name="M:xktComm.SiemensPPI.Connect(System.Int32,System.String,System.Int32,System.IO.Ports.Parity,System.IO.Ports.StopBits)">
            <summary>
            打开串口
            </summary>
            <param name="iBaudRate">波特率</param>
            <param name="iPortName">串口号</param>
            <param name="iDataBits">数据位</param>
            <param name="iParity">校验位</param>
            <param name="iStopBits">停止位</param>
        </member>
        <member name="M:xktComm.SiemensPPI.DisConnect">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:xktComm.SiemensPPI.Read(System.String,xktComm.Common.DataType)">
            <summary>
            根据变量地址及类型读取单个变量
            </summary>
            <param name="variable"></param>
            <param name="VarType"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.SiemensPPI.ReadBytes(System.String,System.UInt16)">
            <summary>
            从西门子的PLC中读取数据信息，地址为"M100","AI100","I0","Q0","V100","S100"等，详细请参照API文档
            </summary>
            <param name="address">西门子的地址数据信息</param>
            <param name="length">数据长度</param>
            <returns>带返回结果的结果对象</returns>
        </member>
        <member name="M:xktComm.SiemensPPI.ReadBool(System.String,System.UInt16)">
            <summary>
            读取布尔
            </summary>
            <param name="address"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.SiemensPPI.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            根据变量地址、变量值及类型写入
            </summary>
            <param name="variable"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.SiemensPPI.Start">
            <summary>
            启动西门子PLC为RUN模式
            </summary>
            <returns>是否启动成功</returns>
        </member>
        <member name="M:xktComm.SiemensPPI.Stop">
            <summary>
            停止西门子PLC，切换为Stop模式
            </summary>
            <returns>是否停止成功</returns>
        </member>
        <member name="M:xktComm.SiemensPPI.SendAndReceive(System.Byte[],System.Byte[]@)">
            <summary>
            通用发送报文并接受
            </summary>
            <param name="sendByte"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.StringLib">
            <summary>
            字符串转换类
            </summary>
        </member>
        <member name="M:xktComm.StringLib.GetStringFromByteArrayByBitConvert(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将字节数组转换成字符串
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.StringLib.GetStringFromByteArray(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            将字节数组转换成带编码格式字符串
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.StringLib.GetStringFromByteArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将字节数组转换成带编码格式字符串
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.StringLib.GetHexStringFromByteArray(System.Byte[],System.Int32,System.Int32,System.Char)">
            <summary>
            将字节数组转换成带16进制字符串
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.StringLib.GetHexStringFromByteArray(System.Byte[],System.Char)">
            <summary>
            将字节数组转换成带16进制字符串
            </summary>
            <param name="source"></param>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.StringLib.GetSiemensStringFromByteArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将字节数组转换成西门子字符串
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.StringLib.GetStringFromBitArray(System.Boolean[],System.Boolean,System.Char)">
            <summary>
            布尔数组转换成字符串
            </summary>
            <param name="source"></param>
            <param name="IsTrueFormat"></param>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.StringLib.GetStringFromBitArray(System.Boolean[],System.Int32,System.Int32,System.Boolean,System.Char)">
            <summary>
            布尔数组转换成字符串
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="IsTrueFormat"></param>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.StringLib.GetStringFromValueArray``1(``0[],System.Char)">
            <summary>
            各种类型数组转换成字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.Tools.DataValidate">
            <summary>
            通用验证类
            </summary>
        </member>
        <member name="M:xktComm.Tools.DataValidate.IsInteger(System.String)">
            <summary>
            验证整数
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.Tools.DataValidate.IsEmail(System.String)">
            <summary>
            验证是否是Email
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.Tools.DataValidate.IsIdentityCard(System.String)">
            <summary>
            验证身份证
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.Tools.DataGridViewStyle">
            <summary>
            设置DataGridView的样式
            </summary>
        </member>
        <member name="M:xktComm.Tools.DataGridViewStyle.DgvStyle1(System.Windows.Forms.DataGridView)">
            <summary>
            普通的样式
            </summary>        
        </member>
        <member name="M:xktComm.Tools.DataGridViewStyle.DgvStyle2(System.Windows.Forms.DataGridView)">
            <summary>
            凹凸样式
            </summary>
            需要手动设置this.RowTemplate.DividerHeight = 2;    
        </member>
        <member name="M:xktComm.Tools.DataGridViewStyle.DgvStyle3(System.Windows.Forms.DataGridView)">
            <summary>
            参数设置
            </summary>        
        </member>
        <member name="M:xktComm.Tools.DataGridViewStyle.DgvStyle4(System.Windows.Forms.DataGridView)">
            <summary>
            数据报表
            </summary>        
        </member>
        <member name="M:xktComm.Tools.DataGridViewStyle.DgvStyle5(System.Windows.Forms.DataGridView)">
            <summary>
            故障报警
            </summary>
            <param name="dgv"></param>
        </member>
        <member name="M:xktComm.Tools.DataGridViewStyle.DgvStyle6(System.Windows.Forms.DataGridView)">
            <summary>
            报警记录
            </summary>        
        </member>
        <member name="M:xktComm.Tools.DataGridViewStyle.DgvStyle7(System.Windows.Forms.DataGridView)">
            <summary>
            实时报警
            </summary>
            <param name="dgv"></param>
        </member>
        <member name="M:xktComm.Tools.DataGridViewStyle.DgvRowPostPaint(System.Windows.Forms.DataGridView,System.Windows.Forms.DataGridViewRowPostPaintEventArgs)">
            <summary>
            给DataGridView添加行号
            </summary>
            <param name="dgv"></param>
            <param name="e"></param>
        </member>
        <member name="T:xktComm.ByteArray">
            <summary>
            字节集合类
            </summary>
        </member>
        <member name="P:xktComm.ByteArray.array">
            <summary>
            属性，返回字节数组
            </summary>
        </member>
        <member name="M:xktComm.ByteArray.Clear">
            <summary>
            清空字节数组
            </summary>
        </member>
        <member name="M:xktComm.ByteArray.Add(System.Byte)">
            <summary>
            添加一个字节
            </summary>
            <param name="item">字节</param>
        </member>
        <member name="M:xktComm.ByteArray.Add(System.Byte[])">
            <summary>
            添加一个字节数组
            </summary>
            <param name="items">字节数组</param>
        </member>
        <member name="M:xktComm.ByteArray.Add(xktComm.ByteArray)">
            <summary>
            添加一个ByteArray对象
            </summary>
            <param name="byteArray">ByteArray对象</param>
        </member>
        <member name="T:xktComm.ModbusRtu">
            <summary>
            ModbusRTU通信库
            </summary>
        </member>
        <member name="F:xktComm.ModbusRtu.MyCom">
            <summary>
            定义SerialPort对象
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtu.ReadTimeOut">
            <summary>
            读取超时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtu.WriteTimeOut">
            <summary>
            写入超时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtu.DtrEnable">
            <summary>
            Dtr使能标志
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtu.RtsEnable">
            <summary>
            Rts使能标志
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtu.ReceiveTimeOut">
            <summary>
            读取返回报文超时时间
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtu.DataFormat">
            <summary>
            字节顺序
            </summary>
        </member>
        <member name="F:xktComm.ModbusRtu.InteractiveLock">
            <summary>
            互斥的锁对象
            </summary>
        </member>
        <member name="P:xktComm.ModbusRtu.SleepTime">
            <summary>
            读取缓冲区的延时时间
            </summary>
        </member>
        <member name="M:xktComm.ModbusRtu.Connect(System.Int32,System.String,System.Int32,System.IO.Ports.Parity,System.IO.Ports.StopBits)">
            <summary>
            打开串口
            </summary>
            <param name="iBaudRate">波特率</param>
            <param name="iPortName">串口号</param>
            <param name="iDataBits">数据位</param>
            <param name="iParity">校验位</param>
            <param name="iStopBits">停止位</param>    
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.DisConnect">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:xktComm.ModbusRtu.ReadOutputStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输出线圈方法
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始地址</param>
            <param name="iLength">长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.ReadInputStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输入线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始地址</param>
            <param name="iLength">长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.ReadKeepReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取保持型寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="iLength">寄存器长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.ReadInputRegBool(System.Int32,System.String,System.Boolean@)">
            <summary>
            输入寄存器读取布尔
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址，必须为"0.0"的形式</param>
            <param name="res">布尔</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.ReadInputRegBool(System.Int32,System.String,System.Int32,System.Boolean[]@)">
            <summary>
            输入寄存器读取布尔数组
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址，必须为"0.0"的形式</param>
            <param name="iLength">布尔长度</param>
            <param name="value">布尔数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.ReadInputRegShort(System.Int32,System.Int32,System.Int16@)">
            <summary>
            输入寄存器读取Short类型
            </summary>
            <param name="iDevAdd"></param>
            <param name="address"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusRtu.ReadInputRegUShort(System.Int32,System.Int32,System.UInt16@)">
            <summary>
            输入寄存器读取 UShort类型
            </summary>
            <param name="iDevAdd"></param>
            <param name="address"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusRtu.ReadInputReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取输入寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">读取地址</param>
            <param name="iLength">长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.ForceCoil(System.Int32,System.Int32,System.Boolean)">
            <summary>
            强制单线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">线圈地址</param>
            <param name="SetValue">设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetSingleReg(System.Int32,System.Int32,System.Int16)">
            <summary>
            预置单个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址</param>
            <param name="SetValue">Short设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetSingleReg(System.Int32,System.Int32,System.UInt16)">
            <summary>
            预置单个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">寄存器地址</param>
            <param name="SetValue">UShort设定值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.ForceMultiCoil(System.Int32,System.Int32,System.Boolean[])">
            <summary>
            强制多线圈
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始线圈地址</param>
            <param name="SetValue">设定值，布尔数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetBoolReg(System.Int32,System.String,System.Boolean)">
            <summary>
            预置布尔寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">布尔寄存器地址，以.进行分割</param>
            <param name="SetValue">设定布尔值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetMultiReg(System.Int32,System.Int32,System.Byte[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">字节数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetMultiReg(System.Int32,System.Int32,System.Single)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">浮点型数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetMultiReg(System.Int32,System.Int32,System.Int32)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int32数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetMultiReg(System.Int32,System.Int32,System.UInt32)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt32数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetMultiReg(System.Int32,System.Int32,System.Single[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">浮点型数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetMultiReg(System.Int32,System.Int32,System.Int32[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int32数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetMultiReg(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt32数组</param>
            <returns>是否成功</returns> 
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetMultiReg(System.Int32,System.Int32,System.Int16[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int16数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetMultiReg(System.Int32,System.Int32,System.UInt16[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt16数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetMultiReg(System.Int32,System.Int32,System.Int64)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int64数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetMultiReg(System.Int32,System.Int32,System.UInt64)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt64数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetMultiReg(System.Int32,System.Int32,System.Double)">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Double数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetMultiReg(System.Int32,System.Int32,System.Int64[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Int64数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetMultiReg(System.Int32,System.Int32,System.UInt64[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">UInt64数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.PreSetMultiReg(System.Int32,System.Int32,System.Double[])">
            <summary>
            预置多个寄存器
            </summary>
            <param name="iDevAdd">从站地址</param>
            <param name="iAddress">起始寄存器地址</param>
            <param name="SetValue">Double数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.SendAndReceive(System.Byte[],System.Byte[]@)">
            <summary>
            通用发送报文并接受
            </summary>
            <param name="sendByte">发送字节数组</param>
            <param name="response">返回字节数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.ModbusRtu.Write(System.Int32,System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="devId"></param>
            <param name="address"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.ModbusTcp">
            <summary>
            ModbusTcp通信库
            </summary>
        </member>
        <member name="P:xktComm.ModbusTcp.SendTimeOut">
            <summary>
            发送超时事件
            </summary>
        </member>
        <member name="P:xktComm.ModbusTcp.ReceiveTimeOut">
            <summary>
            接收超时事件
            </summary>
        </member>
        <member name="P:xktComm.ModbusTcp.DataFormat">
            <summary>
            字节大小端顺序
            </summary>
        </member>
        <member name="P:xktComm.ModbusTcp.WaitTimes">
            <summary>
            接受返回报文等待次数，每次为10ms
            </summary>
        </member>
        <member name="P:xktComm.ModbusTcp.SleepTime">
            <summary>
            接受返回报文等待次数，每次为10ms
            </summary>
        </member>
        <member name="P:xktComm.ModbusTcp.SlaveAddress">
            <summary>
            从站地址
            </summary>
        </member>
        <member name="P:xktComm.ModbusTcp.ConnectTimeOut">
            <summary>
            连接超时时间
            </summary>
        </member>
        <member name="M:xktComm.ModbusTcp.Connect(System.String,System.String)">
            <summary>
            建立Socket连接
            </summary>
            <param name="ip">IP地址</param>
            <param name="port">端口号</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.DisConnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:xktComm.ModbusTcp.ReadOutputStatus(System.Int32,System.Int32)">
            <summary>
            读输出线圈  功能0x01
            </summary>
            <param name="iAddress"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.ReadInputStatus(System.Int32,System.Int32)">
            <summary>
            读输入线圈  功能0x02
            </summary>
            <param name="iAddress"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.ReadKeepReg(System.Int32,System.Int32)">
            <summary>
            读保持型寄存器 功能码0x03
            </summary>
            <param name="iAddress"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.ReadInputReg(System.Int32,System.Int32)">
            <summary>
            读输入寄存器 功能码0x04
            </summary>
            <param name="iAddress"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.ForceCoil(System.Int32,System.Boolean)">
            <summary>
            强制输出线圈 功能码0x05
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetSingleReg(System.Int32,System.Int16)">
            <summary>
            预置单个寄存器 功能码0x06
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetSingleReg(System.Int32,System.UInt16)">
            <summary>
            预置单个寄存器 功能码0x06
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetMultiReg(System.Int32,System.Byte[])">
            <summary>
            预置写入字节数组 功能码0x10
            <param name="iAddress">寄存器地址</param>
            <param name="SetValue">字节数组</param>
            <returns>是否成功</returns>
            </summary>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetMultiReg(System.Int32,System.Single)">
            <summary>
            写入浮点型数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetMultiReg(System.Int32,System.Int32)">
            <summary>
            写入Int32型数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetMultiReg(System.Int32,System.UInt32)">
            <summary>
            写入UInt32型数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetMultiReg(System.Int32,System.Single[])">
            <summary>
            写入Float数组数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetMultiReg(System.Int32,System.Int32[])">
            <summary>
            写入Int32数组数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetMultiReg(System.Int32,System.Int16[])">
            <summary>
            写入Int16数组数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetMultiReg(System.Int32,System.UInt32[])">
            <summary>
            写入UInt32数组数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetMultiReg(System.Int32,System.UInt16[])">
            <summary>
            写入UInt16数组数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetMultiReg(System.Int32,System.Int64)">
            <summary>
            写入Int64类型数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetMultiReg(System.Int32,System.UInt64)">
            <summary>
            写入UInt64类型数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetMultiReg(System.Int32,System.Double)">
            <summary>
            写入Double类型数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetMultiReg(System.Int32,System.Int64[])">
            <summary>
            写入Int64数组数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetMultiReg(System.Int32,System.UInt64[])">
            <summary>
            写入UInt64数组数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetMultiReg(System.Int32,System.Double[])">
            <summary>
            写入Double数组数据
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.PreSetBoolReg(System.String,System.Boolean)">
            <summary>
            预置双字寄存器 功能码0x10
            </summary>
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.ForceMultiCoil(System.Int32,System.Boolean[])">
            <summary>
            强制多线圈  功能码0x0F
            <param name="iAddress"></param>
            <param name="SetValue"></param>
            <returns></returns>
            </summary>
        </member>
        <member name="M:xktComm.ModbusTcp.SendAndReceive(System.Byte[],System.Byte[]@)">
            <summary>
            发送报文并接收返回值
            </summary>
            <param name="SendByte"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ModbusTcp.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="address"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="P:xktComm.OpcDaAutoAsyncEventArgs.GroupHandle">
            <summary>
            Opc组句柄
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoAsyncEventArgs.Count">
            <summary>
            项组长度
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoAsyncEventArgs.Values">
            <summary>
            项组值
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoAsyncEventArgs.Errors">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoAsyncEventArgs.ClientItemsHandle">
            <summary>
            项组句柄
            </summary>
        </member>
        <member name="T:xktComm.OPCDAMethod">
            <summary>
            通信方式
            </summary>
        </member>
        <member name="F:xktComm.OPCDAMethod.Sync">
            <summary>
            同步方式
            </summary>
        </member>
        <member name="F:xktComm.OPCDAMethod.Async">
            <summary>
            异步方式
            </summary>
        </member>
        <member name="F:xktComm.OPCDAMethod.Subscribe">
            <summary>
            订阅方式
            </summary>
        </member>
        <member name="T:xktComm.OpcDaAuto">
            <summary>
            OPCDAAuto通信类
            </summary>
        </member>
        <member name="F:xktComm.OpcDaAuto._opcGroups">
            <summary>
            OPCDAAuto通信组
            </summary>
        </member>
        <member name="E:xktComm.OpcDaAuto.OnDataChanged">
            <summary>
            数据变化完成事件
            </summary>
        </member>
        <member name="E:xktComm.OpcDaAuto.OnReadCompleted">
            <summary>
            异步读取数据完成事件
            </summary>
        </member>
        <member name="M:xktComm.OpcDaAuto.Connect(System.String,System.String)">
            <summary>
            连接OPC服务器
            </summary>
            <param name="ServerName"></param>
            <param name="ServerNode"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.OpcDaAuto.AddOpcGroup(System.Collections.Generic.List{xktComm.OpcDaAutoGroup})">
            <summary>
            添加OPC通信组
            </summary>
            <param name="opcGroups">通信组</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.OpcDaAuto.DisConnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:xktComm.OpcDaAuto.AsyncRead">
            <summary>
            异步读取
            </summary>
        </member>
        <member name="M:xktComm.OpcDaAuto.SyncRead">
            <summary>
            同步读取
            </summary>
            <returns></returns>
        </member>
        <member name="M:xktComm.OpcDaAuto.AsyncWrite(System.Object,System.Int32,System.Int32)">
            <summary>
            异步写单个数据
            </summary>
            <param name="value">值</param>
            <param name="groupHandle">组ID</param>
            <param name="clientHandle">项ID</param>
        </member>
        <member name="M:xktComm.OpcDaAuto.Write(System.String,System.Int32,System.Int32,xktComm.Common.DataType,System.Boolean)">
            <summary>
            通用写入方法
            </summary>
            <param name="value">数值</param>
            <param name="groupHandle">组句柄</param>
            <param name="clientHandle">变量句柄</param>
            <param name="dataType">数据类型</param>
            <param name="IsAsync">是否异步</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.OpcDaAuto.SyncWrite(System.Object,System.Int32,System.Int32)">
            <summary>
            同步写单个数据
            </summary>
            <param name="value">值</param>
            <param name="groupHandle">组ID</param>
            <param name="clientHandle">项ID</param>
        </member>
        <member name="M:xktComm.OpcDaAuto.GetOpcGroup(System.Int32)">
            <summary>
            根据OPC句柄获取OPC组对象索引
            </summary>
            <param name="groupHandle">OPC组对象</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.OpcDaAuto.GetOPCServers(System.String)">
            <summary>
            获取所有的服务器名称
            </summary>
            <param name="ServerNode"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.OpcDaAuto.GetOPCBrower">
            <summary>
            获取所有的OPC变量
            </summary>
            <returns></returns>
        </member>
        <member name="F:xktComm.OpcDaAutoGroup.ServerGroupHandle">
            <summary>
            输出参数,服务器为新创建的组对象产生的句柄
            </summary>
        </member>
        <member name="F:xktComm.OpcDaAutoGroup.RevisedUpdateRate">
            <summary>
            输出参数，服务器返回给客户端的实际使用的数据更新率
            </summary>
        </member>
        <member name="F:xktComm.OpcDaAutoGroup.Group">
            <summary>
            输出参数，用来存储返回的接口指针。如果函数操作出现任务失败，此参数将返回NULL。
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoGroup.IsActive">
            <summary>
            组对象是否激活
            1为激活，0为未激活,默认激活
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoGroup.OnRead">
            <summary>
            组是否采用异步读方式
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoGroup.ItemCount">
            <summary>
            项的个数
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoGroup.RequestedUpdateRate">
            <summary>
            客户端指定的数据变化率
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoGroup.GroupName">
            <summary>
            OPC组名称
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoGroup.ClientGroupHandle">
            <summary>
            客户端程序为组对象提供的句柄
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoGroup.TimeBias">
            <summary>
            指向Long类型的指针
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoGroup.PercendDeadBand">
            <summary>
            一个项对象的值变化的百分比，可能引发客户端程序的订阅回调。
            此参数只应用于组对象中有模拟dwEUType(工程单位)类型的项对象。指针为NULL表示0.0
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoGroup.LCID">
            <summary>
            当用于组对象上的操作的返回值为文本类型时，服务器使用的语言
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoGroup.OpcDaAutoItems">
            <summary>
            OPC项数组
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoGroup.OpcDaGroup">
            <summary>
            OPC通信组
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoItem.Name">
            <summary>
            项名称
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoItem.AccessPath">
            <summary>
            项对象的访问路径
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoItem.ItemID">
            <summary>
            项对象的ItemIDea，唯一标识该数据项
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoItem.IsActive">
            <summary>
            项对象的激活状态
            1为激活，0为未激活，默认激活
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoItem.ClientHandle">
            <summary>
            项对象的客户端句柄
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoItem.RequestedDataType">
            <summary>
            OPC项的数据类型
            VbBoolean:11，VbByte:17,VbDecimal:14,VbDouble:5,Vbinteger:2,VbLong:3,VbSingle:4,VbString:8
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoItem.Value">
            <summary>
            OPC项的值
            </summary>
        </member>
        <member name="P:xktComm.OpcDaAutoItem.ServerHandle">
            <summary>
            OPC项的服务器句柄
            </summary>
        </member>
        <member name="T:xktComm.OpcDaCustomAsync">
            <summary>
            Opc自定义接口-异步管理类
            <author name="lm" date="2012.3.14"/>
            </summary>
        </member>
        <member name="F:xktComm.OpcDaCustomAsync.iOpcServer">
            <summary>
            OPC服务器对象
            </summary>
        </member>
        <member name="F:xktComm.OpcDaCustomAsync.transactionID">
            <summary>
            事务ID
            </summary>
        </member>
        <member name="F:xktComm.OpcDaCustomAsync.opcServerName">
            <summary>
            OPC服务器名称
            </summary>
        </member>
        <member name="F:xktComm.OpcDaCustomAsync._iopcAsyncIo2">
            <summary>
            OPC服务器IP地址
            </summary>
        </member>
        <member name="F:xktComm.OpcDaCustomAsync.opcServerIPAddress">
            <summary>
            OPC服务器IP地址
            </summary>
        </member>
        <member name="F:xktComm.OpcDaCustomAsync.opcDaCustomGroups">
            <summary>
            Opc组列表
            </summary>
        </member>
        <member name="F:xktComm.OpcDaCustomAsync.IConnectionPointContainer">
            <summary>
            连接指针容器
            </summary>
        </member>
        <member name="F:xktComm.OpcDaCustomAsync.IConnectionPoint">
            <summary>
            连接指针
            </summary>
        </member>
        <member name="F:xktComm.OpcDaCustomAsync.IOPCGroupStateMgt">
            <summary>
            Opc组管理器
            </summary>
        </member>
        <member name="E:xktComm.OpcDaCustomAsync.OnWriteCompleted">
            <summary>
            异步写入数据完成事件
            </summary>
        </member>
        <member name="E:xktComm.OpcDaCustomAsync.OnReadCompleted">
            <summary>
            异步读取数据完成事件
            </summary>
        </member>
        <member name="M:xktComm.OpcDaCustomAsync.Connect(System.String,System.String)">
            <summary>
            连接Opc服务器
            </summary>
            <returns></returns>
        </member>
        <member name="M:xktComm.OpcDaCustomAsync.AddOpcGroup">
            <summary>
            添加Opc组
            </summary>
        </member>
        <member name="M:xktComm.OpcDaCustomAsync.AddOpcGroup(xktComm.OpcDaCustomGroup)">
            <summary>
            添加Opc项
            </summary>
            <param name="opcGroup"></param>
        </member>
        <member name="M:xktComm.OpcDaCustomAsync.InitIoInterfaces(xktComm.OpcDaCustomGroup)">
            <summary>
            初始化IO接口
            </summary>
            <param name="opcGroup"></param>
        </member>
        <member name="M:xktComm.OpcDaCustomAsync.ActiveDataChanged(OpcRcw.Da.IOPCGroupStateMgt)">
            <summary>
            激活订阅回调事件
            </summary>
        </member>
        <member name="M:xktComm.OpcDaCustomAsync.AddOpcItem(xktComm.OpcDaCustomGroup)">
            <summary>
            添加Opc项
            </summary>
            <param name="opcGroup"></param>
        </member>
        <member name="M:xktComm.OpcDaCustomAsync.AsyncRead">
            <summary>
            异步读取信息
            </summary>
        </member>
        <member name="M:xktComm.OpcDaCustomAsync.Write(System.Object[],System.Int32[],System.Int32[]@,xktComm.OpcDaCustomGroup)">
            <summary>
            异步写入数据
            </summary>
            <param name="values">要写入的值</param>
            <param name="serverHandle">要写入的项的服务器句柄</param>
            <param name="errors">错误信息，等于表示写入成功，否则写入失败</param>
            <param name="opcGroup">要写入的Opc组</param>
        </member>
        <member name="M:xktComm.OpcDaCustomAsync.OnDataChange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Object[],System.Int16[],OpcRcw.Da.FILETIME[],System.Int32[])">
            <summary>
            数据订阅事件
            </summary>
            <param name="dwTransid"></param>
            <param name="hGroup"></param>
            <param name="hrMasterquality"></param>
            <param name="hrMastererror"></param>
            <param name="dwCount"></param>
            <param name="phClientItems"></param>
            <param name="pvValues"></param>
            <param name="pwQualities"></param>
            <param name="pftTimeStamps"></param>
            <param name="pErrors"></param>
        </member>
        <member name="M:xktComm.OpcDaCustomAsync.OnCancelComplete(System.Int32,System.Int32)">
            <summary>
            取消事件
            </summary>
            <param name="dwTransid"></param>
            <param name="hGroup"></param>
        </member>
        <member name="M:xktComm.OpcDaCustomAsync.OnWriteComplete(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            写入数据完成事件
            </summary>
            <param name="dwTransid"></param>
            <param name="hGroup"></param>
            <param name="hrMastererr"></param>
            <param name="dwCount"></param>
            <param name="pClienthandles"></param>
            <param name="pErrors"></param>
        </member>
        <member name="M:xktComm.OpcDaCustomAsync.OnReadComplete(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Object[],System.Int16[],OpcRcw.Da.FILETIME[],System.Int32[])">
            <summary>
            读取数据完成事件
            </summary>
            <param name="dwTransid"></param>
            <param name="hGroup"></param>
            <param name="hrMasterquality"></param>
            <param name="hrMastererror"></param>
            <param name="dwCount">要读取的组的项的个数</param>
            <param name="phClientItems"></param>
            <param name="pvValues">项值列表</param>
            <param name="pwQualities"></param>
            <param name="pftTimeStamps"></param>
            <param name="pErrors">项错误列表</param>
        </member>
        <member name="P:xktComm.OpcDaCustomAsyncEventArgs.GroupHandle">
            <summary>
            Opc组句柄
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomAsyncEventArgs.Count">
            <summary>
            项组长度
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomAsyncEventArgs.Values">
            <summary>
            项组值
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomAsyncEventArgs.Errors">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomAsyncEventArgs.ClientItemsHandle">
            <summary>
            项组句柄
            </summary>
        </member>
        <member name="T:xktComm.OpcDaCustomGroup">
            <summary>
            自定义接口OPC组对象
            </summary>
        </member>
        <member name="F:xktComm.OpcDaCustomGroup.ServerGroupHandle">
            <summary>
            输出参数,服务器为新创建的组对象产生的句柄
            </summary>
        </member>
        <member name="F:xktComm.OpcDaCustomGroup.RevisedUpdateRate">
            <summary>
            输出参数，服务器返回给客户端的实际使用的数据更新率
            </summary>
        </member>
        <member name="F:xktComm.OpcDaCustomGroup.Riid">
            <summary>
            引用参数，客户端想要的组对象的接口类型(如 IIDIOPCItemMgt)
            </summary>
        </member>
        <member name="F:xktComm.OpcDaCustomGroup.Group">
            <summary>
            输出参数，用来存储返回的接口指针。如果函数操作出现任务失败，此参数将返回NULL。
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomGroup.IsActive">
            <summary>
            组对象是否激活
            1为激活，0为未激活,默认激活
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomGroup.OnRead">
            <summary>
            组是否采用异步读方式
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomGroup.ItemCount">
            <summary>
            项的个数
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomGroup.RequestedUpdateRate">
            <summary>
            客户端指定的数据变化率
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomGroup.GroupName">
            <summary>
            OPC组名称
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomGroup.ClientGroupHandle">
            <summary>
            客户端程序为组对象提供的句柄
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomGroup.TimeBias">
            <summary>
            指向Long类型的指针
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomGroup.PercendDeadBand">
            <summary>
            一个项对象的值变化的百分比，可能引发客户端程序的订阅回调。
            此参数只应用于组对象中有模拟dwEUType(工程单位)类型的项对象。指针为NULL表示0.0
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomGroup.LCID">
            <summary>
            当用于组对象上的操作的返回值为文本类型时，服务器使用的语言
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomGroup.OpcDaCustomItems">
            <summary>
            OPC项数组
            </summary>
        </member>
        <member name="T:xktComm.OpcDaCustomItem">
            <summary>
            自定义接口Opc项
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomItem.Name">
            <summary>
            项名称
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomItem.AccessPath">
            <summary>
            项对象的访问路径
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomItem.ItemID">
            <summary>
            项对象的ItemIDea，唯一标识该数据项
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomItem.IsActive">
            <summary>
            项对象的激活状态
            1为激活，0为未激活，默认激活
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomItem.ClientHandle">
            <summary>
            项对象的客户端句柄
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomItem.RequestedDataType">
            <summary>
            OPC项的数据类型
            VbBoolean:11，VbByte:17,VbDecimal:14,VbDouble:5,Vbinteger:2,VbLong:3,VbSingle:4,VbString:8
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomItem.Value">
            <summary>
            OPC项的值
            </summary>
        </member>
        <member name="P:xktComm.OpcDaCustomItem.ServerHandle">
            <summary>
            OPC项的服务器句柄
            </summary>
        </member>
        <member name="M:xktComm.OpcHelper.ShowValue(xktComm.OpcDaCustomAsyncEventArgs,System.Int32,System.Int32)">
            <summary>
            显示数据
            </summary>
            <param name="e"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.OpcHelper.ShowValue(xktComm.OpcDaAutoAsyncEventArgs,System.Int32,System.Int32)">
            <summary>
            显示数据
            </summary>
            <param name="e"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.OpcHelper.ShowValue(xktComm.OpcDaAutoAsyncEventArgs,System.Int32)">
            <summary>
            显示数据
            </summary>
            <param name="e"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:xktComm.OpcdaCustom._opcDaCustomAsync">
            <summary>
            Opc异步接口类
            </summary>
        </member>
        <member name="E:xktComm.OpcdaCustom.OnReadCompleted">
            <summary>
            异步读取数据完成事件
            </summary>
        </member>
        <member name="E:xktComm.OpcdaCustom.OnDataChanged">
            <summary>
            数据变化完成事件
            </summary>
        </member>
        <member name="F:xktComm.OpcdaCustom._opcGroups">
            <summary>
            Opc组列表
            </summary>
            
        </member>
        <member name="P:xktComm.OpcdaCustom.IsSubscribe">
            <summary>
            是否开启订阅
            </summary>
        </member>
        <member name="M:xktComm.OpcdaCustom.Connect(System.String,System.String)">
            <summary>
            连接Opc服务器
            </summary>
            <returns></returns>
        </member>
        <member name="M:xktComm.OpcdaCustom.AsyncWrite(System.Object,System.Int32,System.Int32)">
            <summary>
            写单个数据
            </summary>
            <param name="value">值</param>
            <param name="groupHandle">组ID</param>
            <param name="clientHandle">项ID</param>
        </member>
        <member name="M:xktComm.OpcdaCustom.Write(System.String,System.Int32,System.Int32,xktComm.Common.DataType)">
            <summary>
            通用写入方法
            </summary>
            <param name="value">数值</param>
            <param name="groupHandle">组句柄</param>
            <param name="clientHandle">变量句柄</param>
            <param name="dataType">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.OpcdaCustom.ReadCompleted(System.Object,xktComm.OpcDaCustomAsyncEventArgs)">
            <summary>
            异步读取数据完成事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:xktComm.OpcdaCustom.AsyncRead">
            <summary>
            异步读取控制模式数据
            </summary>
        </member>
        <member name="M:xktComm.OpcdaCustom.GetOpcGroup(System.Int32)">
            <summary>
            根据OPC句柄获取OPC组对象
            </summary>
            <param name="groupHandle">OPC组对象</param>
            <returns></returns>
        </member>
        <member name="P:xktComm.OpenProtocol.SendTimeOut">
            <summary>
            发送超时事件
            </summary>
        </member>
        <member name="P:xktComm.OpenProtocol.ReceiveTimeOut">
            <summary>
            接收超时事件
            </summary>
        </member>
        <member name="P:xktComm.OpenProtocol.WaitTimes">
            <summary>
            接受返回报文等待次数，每次为10ms
            </summary>
        </member>
        <member name="P:xktComm.OpenProtocol.SleepTime">
            <summary>
            接受返回报文等待次数，每次为10ms
            </summary>
        </member>
        <member name="P:xktComm.OpenProtocol.ConnectTimeOut">
            <summary>
            连接超时时间
            </summary>
        </member>
        <member name="M:xktComm.OpenProtocol.Connect(System.String,System.Int32)">
            <summary>
            建立与PLC的连接
            </summary>
            <param name="Ip">IP地址</param>
            <param name="Port">插槽号</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.OpenProtocol.DisConnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:xktComm.OpenProtocol.CommStop">
            <summary>
            停止通讯
            </summary>
            <returns></returns>
        </member>
        <member name="M:xktComm.OpenProtocol.SubLastTightingResultData">
            <summary>
            订阅最后一次拧紧信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:xktComm.OpenProtocol.SendAndReceive(System.Byte[])">
            <summary>
            发送报文并接收返回值
            </summary>
            <param name="SendByte"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:xktComm.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:xktComm.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:xktComm.Properties.Resources.HResultLUT">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="T:xktComm.SiemensS7">
            <summary>
            西门子S7通信库
            </summary>
        </member>
        <member name="P:xktComm.SiemensS7.MaxPDUSize">
            MaxPDUSize
        </member>
        <member name="P:xktComm.SiemensS7.WaitTimes">
            <summary>
            接受返回报文等待次数，每次为5ms
            </summary>
        </member>
        <member name="M:xktComm.SiemensS7.Connect(System.String,xktComm.Common.CPU_Type,System.Int32,System.Int32)">
            <summary>
            建立与PLC的连接
            </summary>
            <param name="Ip">IP地址</param>
            <param name="Cpu">CPU类型</param>
            <param name="Rack">机架号</param>
            <param name="Slot">插槽号</param>
            <returns></returns>
        </member>
        <member name="M:xktComm.SiemensS7.DisConnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:xktComm.SiemensS7.GetCOTPConnectionRequest(xktComm.Common.CPU_Type,System.Int32,System.Int32)">
            <summary>
            获取COTP报文
            </summary>
            <param name="Cpu"></param>
            <param name="Rack"></param>
            <param name="Slot"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.SiemensS7.GetS7ConnectionSetup(xktComm.Common.CPU_Type)">
            <summary>
            获取S7ConnectionSetup报文
            </summary>
            <param name="Cpu"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.SiemensS7.ReadBytesWithSingleRequest(xktComm.Common.StoreType,System.Int32,System.Int32,System.Int32)">
            <summary>
            读取指定存储区的指定长度字节
            </summary>
            <param name="StoreType"></param>
            <param name="DB"></param>
            <param name="StartByteAdr"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.SiemensS7.Write(System.String,System.Object)">
            <summary>
            根据变量地址写入值
            </summary>
            <param name="variable"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.SiemensS7.Write(System.String,System.String,xktComm.Common.DataType)">
            <summary>
            根据变量地址、变量值及类型写入
            </summary>
            <param name="variable"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.SiemensS7.SendAndReceive(System.Byte[])">
            <summary>
            发送报文并接收返回值
            </summary>
            <param name="SendByte"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.SiemensS7.SendAndReceiveWithoutLock(System.Byte[])">
            <summary>
            发送报文并接受
            </summary>
            <param name="SendByte"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.SiemensS7.WriteMultipleVars(System.Collections.Generic.List{xktComm.SiemensVar})">
            <summary>
            写入多个变量，可以不连续，不支持布尔
            </summary>
            <param name="SiemensVar"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.SiemensS7.ReadMultipleVars(System.Collections.Generic.List{xktComm.SiemensVar})">
            <summary>
            读取多个变量
            </summary>
            <param name="SiemensVar"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.SiemensS7.WriteMultipleVars(System.Collections.Generic.List{xktComm.SiemensGroup})">
            <summary>
            写入多个通信组，不支持布尔
            </summary>
            <param name="SiemensGroup"></param>
            <returns></returns>
        </member>
        <member name="P:xktComm.S7Message.ProtocolHeadBytesLength">
            <inheritdoc cref="P:xktComm.INetMessage.ProtocolHeadBytesLength"/>
        </member>
        <member name="P:xktComm.S7Message.HeadBytes">
            <inheritdoc cref="P:xktComm.INetMessage.HeadBytes"/>
        </member>
        <member name="P:xktComm.S7Message.ContentBytes">
            <inheritdoc cref="P:xktComm.INetMessage.ContentBytes"/>
        </member>
        <member name="M:xktComm.S7Message.CheckHeadBytesLegal(System.Byte[])">
            <inheritdoc cref="M:xktComm.INetMessage.CheckHeadBytesLegal(System.Byte[])"/>
        </member>
        <member name="M:xktComm.S7Message.GetContentLengthByHeadBytes">
            <inheritdoc cref="M:xktComm.INetMessage.GetContentLengthByHeadBytes"/>
        </member>
        <member name="M:xktComm.S7Message.GetHeadBytesIdentity">
            <inheritdoc cref="M:xktComm.INetMessage.GetHeadBytesIdentity"/>
        </member>
        <member name="P:xktComm.S7Message.SendBytes">
            <inheritdoc cref="P:xktComm.INetMessage.SendBytes"/>
        </member>
        <member name="T:xktComm.SiemensGroup">
            <summary>
            通信组
            </summary>
        </member>
        <member name="T:xktComm.SiemensVar">
            <summary>
            通信变量
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:xktComm.VD.Connect(System.String,System.Int32)" -->
        <member name="M:xktComm.VD.GetbitValue(System.Byte,System.Int32)">
            <summary>
            根据字节获取位
            </summary>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.VD.SendAndReceive(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            发送报文并接受
            </summary>
            <param name="mSocket"></param>
            <param name="SendByte"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.VD.GetByteArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            自定义截取字节数组
            </summary>
            <param name="byteArr"></param>
            <param name="start"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.UIntLib">
            <summary>
            UInt转换类
            </summary>
        </member>
        <member name="M:xktComm.UIntLib.GetUIntFromByteArray(System.Byte[],System.Int32,xktComm.Common.DataFormat)">
            <summary>
            字节数组中截取转成32位无符号整型
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.UIntLib.GetUIntArrayFromByteArray(System.Byte[],xktComm.Common.DataFormat)">
            <summary>
            将字节数组中截取转成32位无符号整型数组
            </summary>
            <param name="source"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.UIntLib.GetUIntArrayFromString(System.String,System.Char)">
            <summary>
            将字符串转转成32位无符号整型数组
            </summary>
            <param name="val"></param>
            <param name="spilt"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.ULongLib">
            <summary>
            ULong转换类
            </summary>
        </member>
        <member name="M:xktComm.ULongLib.GetULongFromByteArray(System.Byte[],System.Int32,xktComm.Common.DataFormat)">
            <summary>
            字节数组中截取转成64位整型
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ULongLib.GetULongArrayFromByteArray(System.Byte[],xktComm.Common.DataFormat)">
            <summary>
            将字节数组中截取转成64位整型数组
            </summary>
            <param name="source"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.ULongLib.GetULongArrayFromString(System.String,System.Char)">
            <summary>
            将字符串转转成64位整型数组
            </summary>
            <param name="val"></param>
            <param name="spilt"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.UShortLib">
            <summary>
            UShort转换类
            </summary>
        </member>
        <member name="M:xktComm.UShortLib.GetUShortFromByteArray(System.Byte[],System.Int32,xktComm.Common.DataFormat)">
            <summary>
            字节数组中截取转成16位无符号整型
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.UShortLib.GetUShortArrayFromByteArray(System.Byte[],xktComm.Common.DataFormat)">
            <summary>
            将字节数组中截取转成16位无符号整型数组
            </summary>
            <param name="source"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.UShortLib.GetUShortArrayFromString(System.String,System.Char)">
            <summary>
            将字符串转转成16位无符号整型数组
            </summary>
            <param name="val"></param>
            <param name="spilt"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.UShortLib.SetbitValueFromUShort(System.UInt16,System.Int32,System.Boolean,xktComm.Common.DataFormat)">
            <summary>
            设置UShort中的某个位
            </summary>
            <param name="value"></param>
            <param name="bit"></param>
            <param name="val"></param>
            <param name="dataFormat"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.UShortLib.SetbitValueFrom2ByteArray(System.Byte[],System.Int32,System.Boolean,xktComm.Common.DataFormat)">
            <summary>
            设置2个字节的数组中的某个位
            </summary>
            <param name="bt"></param>
            <param name="bit"></param>
            <param name="val"></param>
            <param name="dataFormat"></param>
            <returns></returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Readbool(System.String,System.Boolean@,System.Int32)">
            <summary>
            读取布尔变量
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.ReadBytes(System.String,System.UInt16,System.Int32)">
            <summary>
            读取字节数组
            </summary>
            <param name="address">变量地址</param>
            <param name="length">长度</param>
            <param name="SlaveID">从站地址</param>
            <returns>带字节数组的结果</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Readshort(System.String,System.Int16@,System.Int32)">
            <summary>
            读取Short类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Readushort(System.String,System.UInt16@,System.Int32)">
            <summary>
            读取UShort类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Readint(System.String,System.Int32@,System.Int32)">
            <summary>
            读取Int类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Readuint(System.String,System.UInt32@,System.Int32)">
            <summary>
            读取UInt类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Readfloat(System.String,System.Single@,System.Int32)">
            <summary>
            读取Float类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Readlong(System.String,System.Int64@,System.Int32)">
            <summary>
            读取Int64类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Readulong(System.String,System.UInt64@,System.Int32)">
            <summary>
            读取UInt64类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Readdouble(System.String,System.Double@,System.Int32)">
            <summary>
            读取Double类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Readstring(System.String,System.UInt16,System.String@,System.Int32)">
            <summary>
            读取String类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="length">长度</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.String,xktComm.Common.DataType,System.Int32)">
            <summary>
            通用写入的方法
            </summary>
            <param name="address">Modbus地址</param>
            <param name="value">设定值</param>
            <param name="vartype">数据类型</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.WriteBoolReg(System.String,System.Boolean,System.Int32)">
            <summary>
            给布尔寄存器赋值
            </summary>
            <param name="address">布尔寄存器地址</param>
            <param name="value">设定值</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.Byte[],System.Int32)">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>结果</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.Boolean,System.Int32)">
            <summary>
            布尔线圈写入数值
            </summary>
            <param name="address">变量地址</param>
            <param name="value">布尔数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.Boolean[],System.Int32)">
            <summary>
            布尔数组线圈写入数值
            </summary>
            <param name="address">变量地址</param>
            <param name="values">布尔数组</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.Int16[],System.Int32)">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.Int16,System.Int32)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.UInt16[],System.Int32)">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.UInt16,System.Int32)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.Int32[],System.Int32)">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.Int32,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.UInt32[],System.Int32)">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.UInt32,System.Int32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.Single[],System.Int32)">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.Single,System.Int32)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.Int64[],System.Int32)">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.Int64,System.Int32)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.UInt64[],System.Int32)">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.UInt64,System.Int32)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.Double[],System.Int32)">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.Double,System.Int32)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.Write(System.String,System.String,System.Int32)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.WriteUnicodeString(System.String,System.String,System.Int32)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.InovanceModbus.AnlysisAddress(System.String)">
            <summary>
            解析汇川PLC的地址，返回的第一个数据为解析之后的读取地址，第二个数据位是否为布尔还是寄存器
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.InovanceDataType">
            <summary>
            汇川PLC数据类型
            </summary>
        </member>
        <member name="M:xktComm.InovanceDataType.#ctor(System.Int32)">
            <summary>
            汇川PLC数据类型
            </summary>
            <param name="fromBase"></param>
        </member>
        <member name="P:xktComm.InovanceDataType.FromBase">
            <summary>
            指示地址是10进制，还是16进制的
            </summary>
        </member>
        <member name="F:xktComm.InovanceDataType.X">
            <summary>
            X输入寄存器
            </summary>
        </member>
        <member name="F:xktComm.InovanceDataType.Y">
            <summary>
            Y输出寄存器
            </summary>
        </member>
        <member name="F:xktComm.InovanceDataType.M">
            <summary>
            M中间寄存器
            </summary>
        </member>
        <member name="F:xktComm.InovanceDataType.S">
            <summary>
            S状态寄存器
            </summary>
        </member>
        <member name="F:xktComm.InovanceDataType.T">
            <summary>
            T状态寄存器
            </summary>
        </member>
        <member name="F:xktComm.InovanceDataType.C">
            <summary>
            C状态寄存器
            </summary>
        </member>
        <member name="F:xktComm.InovanceDataType.D">
            <summary>
            D数据寄存器
            </summary>
        </member>
        <member name="F:xktComm.InovanceDataType.TR">
            <summary>
            TD数据寄存器
            </summary>
        </member>
        <member name="F:xktComm.InovanceDataType.CR">
            <summary>
            CD数据寄存器
            </summary>
        </member>
        <member name="T:xktComm.XinjeXCModbus">
            <summary>
            信捷XC系列Modbus通信库
            </summary>
        </member>
        <member name="T:xktComm.XinjeXCModbus.OutputCoilOffset">
            <summary>
            线圈偏移
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCModbus.OutputCoilOffset.M">
            <summary>
            M存储区
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCModbus.OutputCoilOffset.X">
            <summary>
            X存储区
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCModbus.OutputCoilOffset.Y">
            <summary>
            Y存储区
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCModbus.OutputCoilOffset.S">
            <summary>
            S存储区
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCModbus.OutputCoilOffset.M2">
            <summary>
            M2存储区
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCModbus.OutputCoilOffset.T">
            <summary>
            T存储区
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCModbus.OutputCoilOffset.C">
            <summary>
            C存储区
            </summary>
        </member>
        <member name="T:xktComm.XinjeXCModbus.OutputRegOffset">
            <summary>
            寄存器偏移
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCModbus.OutputRegOffset.D">
            <summary>
            D存储区
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCModbus.OutputRegOffset.TD">
            <summary>
            TD存储区
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCModbus.OutputRegOffset.CD">
            <summary>
            CD存储区
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCModbus.OutputRegOffset.D2">
            <summary>
            D2存储区
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCModbus.OutputRegOffset.FD">
            <summary>
            FD存储区
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCModbus.OutputRegOffset.FD2">
            <summary>
            FD2存储区
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCModbus.OutputRegOffset.ED">
            <summary>
            ED存储区
            </summary>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Readbool(System.String,System.Boolean@,System.Int32)">
            <summary>
            读取布尔变量
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.ReadBytes(System.String,System.UInt16,System.Int32)">
            <summary>
            读取字节数组
            </summary>
            <param name="address">变量地址</param>
            <param name="length">长度</param>
            <param name="SlaveID">从站地址</param>
            <returns>带字节数组的结果</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Readshort(System.String,System.Int16@,System.Int32)">
            <summary>
            读取Short类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Readushort(System.String,System.UInt16@,System.Int32)">
            <summary>
            读取UShort类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Readint(System.String,System.Int32@,System.Int32)">
            <summary>
            读取Int类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Readuint(System.String,System.UInt32@,System.Int32)">
            <summary>
            读取UInt类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Readfloat(System.String,System.Single@,System.Int32)">
            <summary>
            读取Float类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Readlong(System.String,System.Int64@,System.Int32)">
            <summary>
            读取Int64类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Readulong(System.String,System.UInt64@,System.Int32)">
            <summary>
            读取UInt64类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Readdouble(System.String,System.Double@,System.Int32)">
            <summary>
            读取Double类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Readstring(System.String,System.UInt16,System.String@,System.Int32)">
            <summary>
            读取String类型数据
            </summary>
            <param name="address">变量地址</param>
            <param name="length">长度</param>
            <param name="value">变量数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.String,xktComm.Common.DataType,System.Int32)">
            <summary>
            通用写入的方法
            </summary>
            <param name="address">Modbus地址</param>
            <param name="value">设定值</param>
            <param name="vartype">数据类型</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.WriteBoolReg(System.String,System.Boolean,System.Int32)">
            <summary>
            给布尔寄存器赋值
            </summary>
            <param name="address">布尔寄存器地址</param>
            <param name="value">设定值</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.Byte[],System.Int32)">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>结果</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.Boolean,System.Int32)">
            <summary>
            布尔线圈写入数值
            </summary>
            <param name="address">变量地址</param>
            <param name="value">布尔数值</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.Boolean[],System.Int32)">
            <summary>
            布尔数组线圈写入数值
            </summary>
            <param name="address">变量地址</param>
            <param name="values">布尔数组</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.Int16[],System.Int32)">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.Int16,System.Int32)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.UInt16[],System.Int32)">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.UInt16,System.Int32)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.Int32[],System.Int32)">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.Int32,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.UInt32[],System.Int32)">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.UInt32,System.Int32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.Single[],System.Int32)">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.Single,System.Int32)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.Int64[],System.Int32)">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.Int64,System.Int32)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.UInt64[],System.Int32)">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.UInt64,System.Int32)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.Double[],System.Int32)">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.Double,System.Int32)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.Write(System.String,System.String,System.Int32)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.WriteUnicodeString(System.String,System.String,System.Int32)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="SlaveID">从站地址</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:xktComm.XinjeXCModbus.AnlysisAddress(System.String)">
            <summary>
            解析信捷PLC的地址，返回的第一个数据为解析之后的读取地址，第二个数据位是否为布尔还是寄存器
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:xktComm.XinjeXCDataType">
            <summary>
            信捷PLC数据类型
            </summary>
        </member>
        <member name="M:xktComm.XinjeXCDataType.#ctor(System.Int32)">
            <summary>
            信捷PLC数据类型
            </summary>
            <param name="fromBase"></param>
        </member>
        <member name="P:xktComm.XinjeXCDataType.FromBase">
            <summary>
            指示地址是10进制，还是16进制的
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCDataType.X">
            <summary>
            X输入寄存器
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCDataType.Y">
            <summary>
            Y输出寄存器
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCDataType.M">
            <summary>
            M中间寄存器
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCDataType.S">
            <summary>
            S状态寄存器
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCDataType.T">
            <summary>
            T状态寄存器
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCDataType.C">
            <summary>
            C状态寄存器
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCDataType.D">
            <summary>
            D数据寄存器
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCDataType.TD">
            <summary>
            TD数据寄存器
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCDataType.CD">
            <summary>
            CD数据寄存器
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCDataType.FD">
            <summary>
            FD数据寄存器
            </summary>
        </member>
        <member name="F:xktComm.XinjeXCDataType.ED">
            <summary>
            ED数据寄存器
            </summary>
        </member>
    </members>
</doc>
