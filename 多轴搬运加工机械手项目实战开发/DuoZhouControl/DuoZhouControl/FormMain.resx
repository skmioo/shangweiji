<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACZmZkAk5OTAJ2dnQCysrIAurq6ALu7uwC7u7sAu7u7ALW2twBmeJMAOVuLADpb
        jAA6W4wAOluMADpbjAA5W4sAZniTALW2twC7u7sAu7u7ALu7uwC6uroAsrKyAJ2dnQCUlJQAmZmZAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJmZmQCenp4AmJiYIaCgoHOioqKioqKipqKioqaioqKmnp+gpmp1
        iKZOYH6mTmF/pk5hf6ZOYX+mTmF/pk5gfqZqdYimnp+gpqKioqaioqKmoqKipqKioqKgoKBzl5eXIZ6e
        ngCZmZkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmZmZAJaWlhSoqKixxcXF/tDQ0P/R0dH/0dHR/9LS
        0f/Ky8z/Y3qd/yhXmP8pWJj/KViY/ylYmP8pWJj/KFeY/2N6nf/Ky8z/0tLR/9HR0f/R0dH/0NDQ/8XF
        xf6oqKiylpaWFZmZmQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZmZkAl5eXRr6+vu/Z2dn/2dnZ/9nZ
        2f/Z2dn/2tra/9LS0/9kfqP/Jlyh/yddof8nXaH/J12h/yddof8mXKH/ZH6j/9LS0//a2tr/2dnZ/9nZ
        2f/Z2dn/2dnZ/76+vvCXl5dGmZmZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJmZmQCXl5dZw8PD/9vb
        2//a2tr/2tra/9ra2v/a2tr/0tLU/2aBpf8sZKj/LWWo/y1lqP8tZaj/LWWo/yxkqP9mgaX/0tLU/9ra
        2v/a2tr/2tra/9ra2v/b29v/w8PD/5eXl1mZmZkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmZmZAJeX
        l1nExMT/3Nzc/9vb2//b29v/29vb/9vb2//T09T/aYSo/zJtsP8zbbD/M22w/zNtsP8zbbD/Mm2w/2mE
        qP/T09T/29vb/9vb2//b29v/29vb/9zc3P/ExMT/l5eXWZmZmQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACZmZkAl5eXWcTExP/d3d3/3Nzc/9zc3P/c3Nz/3Nzc/9TU1f9riKz/OHe4/zl4uP85eLj/OXi4/zl4
        uP84d7j/a4is/9TU1f/c3Nz/3Nzc/9zc3P/c3Nz/3d3d/8TExP+Xl5dZmZmZAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAJmZmQCXl5dZxcXF/97e3v/d3d3/3d3d/93d3f/d3d3/1dXW/26Mr/8/gcD/QILA/0CC
        wP9AgsD/QILA/z+BwP9ujK//1dXW/93d3f/d3d3/3d3d/93d3f/e3t7/xcXF/5eXl1mZmZkAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAmZmZAJeXl1nGxsb/4ODg/97e3v/e3t7/3t7e/9/f3//W1tf/cJCy/0WL
        yf9Gi8n/RovJ/0aLyf9Gi8n/RYvJ/3CQsv/W1tf/39/f/97e3v/e3t7/3t7e/+Dg4P/Gxsb/l5eXWZmZ
        mQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZmZkAl5eXWcbGxv/h4eH/39/f/9/f3//f39//4ODf/9fW
        2P9zk7X/S5TR/0yU0f9MlNH/TJTR/0yU0f9LlNH/c5O1/9fW2P/g4N//39/f/9/f3//f39//4eHh/8bG
        xv+Xl5dZmZmZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJmZmQCXl5dZx8fH/+Li4v/g4OD/4ODg/+Dg
        4P/h4eH/2NfZ/3WWuP9RnNj/UpzY/1Kc2P9SnNj/UpzY/1Gc2P91lrj/2NfZ/+Hh4f/g4OD/4ODg/+Dg
        4P/i4uL/x8fH/5eXl1mZmZkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmZmZAJeXl1nIyMj/4+Pj/+Li
        4v/i4uL/4uLi/+Li4v/Z2Nr/d5q8/1eo4/9YqeL/WKni/1ip4v9YqeL/V6jj/3eavP/Z2Nr/4uLi/+Li
        4v/i4uL/4uLi/+Pj4//IyMj/l5eXWZmZmQAAAAAAAAAAAAAAAAB1WwoAdVsKAHVbCgCUkYYAl5eXWMnJ
        yf/l5eX/4+Pj/+Pj4//j4+P/5OTk/9zb3f+Ho7//brDb/3Gz2v9xs9r/cbPa/3Gz2v9usNv/h6O//9zb
        3f/k5OT/4+Pj/+Pj4//j4+P/5eXl/8nJyf+Xl5dYlJGGAHVbCgB1WwoAdVsKAHVbCgB5Xg0Ac1kIDVwz
        AAqWlpVbysrK/+bm5v/k5OT/5OTk/+Tk5P/k5OT/4uPj/8zP1P/Aw8z/wMTM/8DEzP/AxMz/wMTM/8DD
        zP/Mz9T/4uPj/+Tk5P/k5OT/5OTk/+Tk5P/m5ub/ysrK/5aWlVtcMwAKc1kIDXleDQB1WwoAdFoJAnVb
        Ck53XQy2dlsIvYN0RLDJyMT/6Ojp/+Xl5f/l5eX/5eXl/+Xl5f/l5eX/5+fm/+jn5//o5+f/6Ofn/+jn
        5//o5+f/6Ofn/+fn5v/l5eX/5eXl/+Xl5f/l5eX/5eXl/+jo6f/JyMT/g3REsHZbCL13XQy2dVsKTnRb
        CQN1WwooeV4NzX5iEP9+Yg//fGMV/6OUZf/Tz8H/5+fn/+fn6P/n5+f/5+fn/+fn5//n5+f/5+fn/+fn
        5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn6P/n5+f/1tLF/6WWaf98YxX/fmIP/35i
        EP95Xg3OdVsKKXVbClp/ZA/5hWkS/4VpEv+FaRH/g2cS/413Mv/Cup7/4+Lf/+np6f/o6Oj/6Ojo/+jo
        6P/o6Oj/6Ojo/+jo6P/o6Oj/6Ojo/+jo6P/o6Oj/6Ojo/+jo6P/p6en/5uXj/8O7of+OeDP/g2gS/4Vp
        Ef+FaRL/hWkS/39kD/d1WwpXdFoKYoRoEP+NcBT/jG8U/4xvFP+MbxP/iWwR/4xzI/+llWP/2NXJ/+rq
        6//q6ur/6enp/+np6f/p6en/6enp/+np6f/p6en/6enp/+np6f/p6ur/6uvr/9nWzP+omGn/jHMk/4ls
        Ef+MbxP/jG8U/4xvFP+NcBT/hGgQ+3RaClx0WgpIiWwQ6p9+F/+YeBb/lHUW/5V1Fv+Vdhb/k3QU/41v
        E/+bhkT/wrmc/+Xk4f/r6+z/6urq/+rq6v/q6ur/6urq/+rq6v/q6ur/6+vs/+bm4//Lxa//nIhJ/4xu
        Ev+TdBP/lXYW/5V1Fv+UdRb/mHgW/59+F/+IaxDmdFoKQ3JYCQ1+Yg1+mHgT8KuHGf+lgxn/nn0Y/519
        GP+dfRj/nn0Y/5h4FP+QdB3/saJ2/9zZz//s7Oz/7Ozs/+zs7P/s7Oz/7Ozs/+zs7f/j4t3/tKZ9/5V7
        Kv+YeBb/nX0Y/519GP+dfRj/nn0Y/6aDGf+rhxn/mHgT731iDH1xWAkMdVsKAGxUCAl6XwtQkXIRva2J
        Gf+zjxz/qYYb/6eEGv+nhRv/p4Ub/6WDGf+aexj/mYE5/8jAp//q6un/7e3u/+3t7f/s7Oz/zMWw/6WS
        Vf+afBz/pIIY/6eFG/+nhRv/p4Qa/6mHG/+zjxz/rYkZ/5BxEbx6XwtNbFQICXVbCgB7YAwAdVsKAIRn
        DgBxWAglh2oQq6mHG/2/mB//tpEe/7CNHf+wjR3/sY0d/7CNHf+ohhn/nYEq/66fbv/e29H/4uDZ/7+0
        kf+dgjD/pYMX/7CMHP+xjR3/sI0d/7CNHf+2kR7/v5ge/6mGG/yGahCpcVgIJYNnDQB1WwoAe2ALAAAA
        AAAAAAAAXUcFAH1oKAB5aDYbhnEvf6KCHOfEnB//xJ0h/7uVH/+6lB//upQf/7qVH/+3kh3/pYMZ/6SO
        Sf+jj07/o4Ie/7aRHf+6lR//upQf/7qUH/+7lR//xJ0h/8OcHv+ggiT2hnEygXlpOBl8aCgAXUcEAAAA
        AAAAAAAAAAAAAAAAAAB1WwoAa0sAAHliGwBgZGwCemIYUJV1EsvDnB/906gk/8efIv/DnCH/w5wh/8Sc
        If/DnCH/uZMd/7WQHP/CnCH/xJ0h/8OcIf/DnCH/x58i/9KoI//DnCD/o4o8/5qSeeeNjY4WiHxWAGpL
        AAB1WwoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfWkqAHhkIwCeiUgAa1IHH41vEIq5kxvy27Al/9Sq
        Jf/NpCT/zKQk/82kJP/NpST/zaUk/82kJP/MpCT/zaQk/9SqJf/bsCT/upcl/7OicP/QzcT/s7Oz54mK
        ixiZmpsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdVsKAHJZCQB4XQsAaFAHDH5i
        DGuvixnR3LEm/+K1KP/XrCb/1aom/9WrJv/Vqyb/1aom/9esJv/itSj/3LAl/q6RMvy3q4j/3NrX/+Lj
        4/+1tbXnh4eHGJmZmQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVb
        CgByWQkADwUAAXRbCjKaexSyzqkj/+u+K//itSn/3bEo/92xKP/itSn/6r4r/86pI/+ZehKvmZN/yt3d
        3f/n5+f/5ubm/7a2tueGhoYYmZmZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAHVbCgBvVQgAhGgOAGxTByCKbxCMwaAg5OvCLP/svyz/7L8s/+vCLP/AoCDkim8QimVK
        AB2lpaal4OHh/+rq6v/q6ur/uLi454WFhRiZmZkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//0sAcVcJAEIrAAV9ZA1Rp4wZ2N/BKv/fwSr/p4wZ2Hxj
        DFE4IQAEo5l5AKWlpafk5OT/7u7u/+7u7v+5ubnnhISEGJmZmQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVbCgB1WwoAc1kJAAAAAABzWgo9lX8Vn5V/
        FZ9zWgo9AAAAAHNZCQDHx8YApqamo+Xl5f/u7u7/7u7u/7u7u+aDg4MXmZmZAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1WwoAclgJAHtg
        DABMLgAJTC4ACXtgDAByWAkAdVsKAKOjowCcnJxLp6eno6ioqKaoqKinoKCgdZKSkgmZmZkAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAB1WwoAdVsKAHVbCgB1WwoAdVsKAHVbCgAAAAAAubm5AKKiogDLy8sA0NDQANDQ0ACxsbEAh4eHAJmZ
        mQAAAAAAAAAAAAAAAAAAAAAA4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AA
        AAfgAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAPAAAAD8AAAD/gA
        AA/+AAAP/wAAD//AAA//wAAP//AAD//4EA8=
</value>
  </data>
</root>